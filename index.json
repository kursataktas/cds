[
{
	"uri": "/docs/concepts/authentication/",
	"title": "Authentication",
	"tags": ["scope", "scopes", "consumer", "consumers", "session", "sessions", "builtin", "gitlab", "github", "sso", "local", "ldap"],
	"description": "",
	"content": "Consumer Two type of consumer:\n first level: GitLab, GitHub, CorporateSSO, LDAP, Local. n level: Builtin.  A builtin consumer can be created by a user. Every builtin consumer should have a parent consumer that can also be another builtin consumer. Using a child consumer you can give permission for all or a part of what its parent can access.\nGroups A consumer includes a list of groups. Wildcard for a first level. Wildcard or a list of group for a builtin consumer. A user can add only group if is member of it. (A cds admin can add any group inside a builtin consumer). A child consumer can only have groups that are in its parents.\nScopes Scope are setup on api routes, this mecaniscm allows to let a consumer access only a part of CDS handlers. A consumer includes a list of Scopes, first level consumer contains all scopes by default (wildcard). Second level consumer should at least include one scope. Each scope added in a builtin consumer should be in its parent.\nHatchery: service, hatchery, run execution, worker model\nHook: service, hooks, project, run\nOther: service\nScopes list:\n User: access to handlers for user profile and contact management. AccessToken: access to handlers for user authentication management, create new consumers, revoke sessions\u0026hellip; Action: access to handlers for action management. Admin: access to admin handlers. Group: access to handlers for group management. Template: access to handlers for workflow template management. Project: access to handlers for project management. Run: access to handlers for workflow run management. RunExecution. Hooks. Worker. WorkerModel: access to handlers for worker model management. Hatchery. Service.  Builtin consumer regen This allow you to get a new consumer signin token for a builtin consumer. Only consumers that are not disabled can be regen. If there are invalidated groups in the consumer, they will be removed. When a consumer is regenerated, its issued date will be updated so all old signin token will be invalidated.\nChanging user\u0026rsquo;s group If a user is removed from a group, the group should be invalidated in all the consumers that contains it. If it was the last group of the consumer we also want to disable the consumer. If user is re-added in a given group we restore consumers where this group was invalidated. Also if the consumer was disabled we re-enable it.\nDeleting a group Is a group was removed we removes all references to this group from all consumers. If it was the last group for a consumer the consumer will be disabled.\nChanging user ring A CDS admin can create builtin consumers that includes all groups including the shared.infra group. A CDS maintainer or a simple user can only includes some of its groups. When a user is downgraded from admin to another ring, we invalidates all the groups in its consumers where he is not part of. If all the groups are invalid the consumer will be disabled. When a user ring is set to admin, we check if there are consumers that contains invalid group that can be restored and re-enable consumers if needed.\n"
},
{
	"uri": "/about/why_cds/",
	"title": "CDS - The origins",
	"tags": [],
	"description": "",
	"content": "To build CDS, the development team took their inspiration from the Continuous Delivery principles:\n The process for releasing/deploying software MUST be repeatable and reliable. Automate everything! If somethings difficult or painful, do it more often Keep everything in source control Dev Done means “released” Build quality in! Everybody has responsibility for the release process Improve continuously Build binaries only once Use precisely the same mechanism to deploy to every environment Smoke test your deployment If anything fails, stop the line  ref. http://devopsnet.com/2011/08/04/continuous-delivery/\nThe team triggered the project after several dissatisfying attempts to integrate and use other open-source and commercial build tools at large scale. Even if most of the tested tools did not contradict the principles above, they were failing at the \u0026ldquo;real world\u0026rdquo; test. In fact, their limitations were quickly visible at scale. As the number of managed projects grew, these tools were showing signs of weakness of became hard or expensive to manage and maintain. Basic software updates of the tools themselves needed preparation and downtime. Basic configuration changes needed to be centralized on a single team thus creating an organizational bottleneck. etc.\nThis is why, at the start of the project, the team knew exactly the requirements that would make CDS a suitable tool for their daily operation. These requirements later became the CDS Building Design Principles listed below.\n1 - Self-Service In massively distributed architectures, development teams work independently to improve and deploy applications and services.\nGrowth in the number of teams and projects create some interesting dynamics where a handful of projects are launched every week. Some of them die at the proof-of concept stage while some others do survive and bring value. Of course, such a turnover rate comes with an ever-growing wishlist of build, test and deployment environments.\nCentralizing the creation and the configuration of these deployments on a single team is considered harmful. At best, it would create an organizational bottleneck where the Continuous Delivery is overwhelmed with requests and delays their execution. At worst, this multi-layered/multi-team process would look too heavy from the outside and push the developers to censor themselves putting a soft break to the innovation dynamics.\nCDS is built around a strong culture of self-service: Whenever it is possible, the control is delegated to the development teams and to the ops teams. Creation, configuration and deletion of CDS projects is completely decentralized. Moreover, project creators can re-delegate parts of their permissions to their teams through powerful built-in group ACLs.\nUsers are also free to add their own workers to the system if the workers provided by the Continuous Delivery team do not suit their needs. This covers the specific cases where specific hardware or software is required to build or test a software. To do so, users just need to start the CDS worker binary from their own machines and give it the IP address and the credentials of the CDS API. A worker CDS is a simple binary, you do not need libraries or particular JVMs on your machine to run it. CDS workers are compatible with Linux, macOS, FreeBSD as well as Windows, in architectures 386, amd64, arm or arm64.\nTo implement this strong self-service culture the team files an issue everytime a user needs the help of a CDS administrator to achieve a simple day-to-day task.\n2 - Horizontal Scalability CDS is built to scale. And this capability is challenged everyday in a large-scale production environment. This ability to scale has been made possible thanks to a simple design principle: statelessness\nCDS\u0026rsquo;s API servers are completely stateless. They do not store anything on the fileSystem. With this \u0026ldquo;share-nothing\u0026rdquo; architecture, servers can be deployed as much times as required to support the load. Instances can be spawned and decommissioned dynamically to handle usage surges when required while keeping the cost at its lowest when the platform is underused. All you need to provide is a scalable and highly available database.\n3 - High Availability When working with a continuous delivery tool on a daily basis using an actively maintained tool like CDS, updates are frequent. For example, it is frequent that OVH\u0026rsquo;s main CDS instance gets updated and redeployed several times a day.\nThis fast delivery and reactivity couldn\u0026rsquo;t have been possible without CDS\u0026rsquo;s High Availability architecture. The statelessnes property, described above, is again the property that allows to update API servers independently without interrupting any of the running jobs.\n« The loss of a CDS API server is a non-event ».\n4 - Pipeline Reutilisability CDS\u0026rsquo;s built-in don\u0026rsquo;t-repeat-yourself features help you minimize your effort when you need to build, test and deploy hundreds (thousands?) of projects with a similar workflow. This is especially useful when you are managing a micro-services-based infrastructure where containers are usually built and deployed the same way.\nA system of templating allows to customize the build runs depending on the apps to be built and on the deployment environments.\nThis feature is essential as it allows to quickly deploy new applications, provided that a similar one already exists in CDS.\n5 - REST API CDS can be fully operated through its REST API. The API is used by the CDS\u0026rsquo;s UI but also by the workers. All components speak the same language: REST.\nBoth the UI and the CLI use exclusively the REST API to operate. Therefore, if you can do it through the UI or the CLI, then you can do it through the REST API.\n« Everything must be scriptable, automatable ».\n6 - Customizable CDS is shipped with a lot of built-in steps and hatcheries that should most users' needs. But, power users will want to customize it to suit their own needs. This is why CDS has been designed to accept plug-ins for steps actions and the REST API-based hatchery operations allow and easy addition of customized hatcheries.\n"
},
{
	"uri": "/hosting/ready-to-run/docker-compose/docker-compose/",
	"title": "Docker Compose",
	"tags": [],
	"description": "",
	"content": "Run with Docker-Compose This tutorial allows you to start a CDS locally quickly.\n Do not use this docker-compose installation to run it in production without modification. For production purpose, please read CDS Services   The docker-compose.yml contains:\n cds-db service with a PostgreSQL cds-cache service with a Redis elasticsearch service with an Elasticsearch dockerhost allows cds-hatchery-swarm service to communicate with the local docker daemon cds-migrate service to prepare databases for API and CDN cds-api service cds-ui service cds-elasticsearch service cds-hatchery-swarm service cds-vcs service cds-repositories service cds-cdn service  Docker compose is very convenient to launch CDS for testing it. But this is not recommended for a Production Installation.\nHow to run $ mkdir /tmp/cdstest \u0026amp;\u0026amp; cd /tmp/cdstest $ curl https://raw.githubusercontent.com/ovh/cds/v0.54.1/docker-compose.yml -o docker-compose.yml $ export HOSTNAME=$(hostname) $ export CDS_DOCKER_IMAGE=ovhcom/cds-engine:0.54.1 # Get the latest version $ docker pull ovhcom/cds-engine:0.54.1 # Create PostgreSQL database, redis and elasticsearch $ docker-compose up -d cds-db cds-cache elasticsearch dockerhost # check if database is up, the logs must contain \u0026#34;LOG: database system is ready to accept connections\u0026#34; $ docker-compose logs| grep \u0026#39;database system is ready to accept connections\u0026#39; # you should have this line after few seconds: cds-db_1 | LOG: database system is ready to accept connections $ docker-compose up cds-db-init $ docker-compose up cds-migrate # You should have this log: \u0026#34;cdstest_cds-migrate_1 exited with code 0\u0026#34; # prepare initial configuration. $ docker-compose up cds-prepare # run API $ docker-compose up -d cds-api # the INIT_TOKEN variable will be used by cdsctl to create first admin user $ TOKEN_CMD=$(docker logs $(docker-compose ps -q cds-prepare) | grep INIT_TOKEN) \u0026amp;\u0026amp; $TOKEN_CMD # if you have this error: \u0026#34;command too long: export INIT_TOKEN=....\u0026#34;, # you can manually execute the command \u0026#34;export INIT_TOKEN=....\u0026#34; # download cdsctl # on linux: $ curl \u0026#39;http://localhost:8081/download/cdsctl/linux/amd64?variant=nokeychain\u0026#39; -o cdsctl # on OSX: $ curl \u0026#39;http://localhost:8081/download/cdsctl/darwin/amd64?variant=nokeychain\u0026#39; -o cdsctl # create user $ chmod +x cdsctl $ ./cdsctl signup --api-url http://localhost:8081 --email admin@localhost.local --username admin --fullname admin # enter a strong password # verify the user $ VERIFY_CMD=$(docker-compose logs cds-api | grep \u0026#39;cdsctl signup verify\u0026#39; | cut -d \u0026#39;$\u0026#39; -f2 | xargs) \u0026amp;\u0026amp; ./$VERIFY_CMD # if you have this error: \u0026#34;such file or directory: ./cdsctl signup verify --api-url...\u0026#34;,  # you can manually execute the command \u0026#34;./cdsctl signup verify --api-url...\u0026#34; # run cdsctl  $ ./cdsctl user me # should returns something like: #./cdsctl user me #created 2019-12-18 14:25:53.089718 +0000 UTC #fullname admin #id vvvvv-dddd-eeee-dddd-fffffffff #ring ADMIN #username admin # run others services $ docker-compose up -d cds-ui cds-cdn cds-hooks cds-elasticsearch cds-hatchery-swarm # create first worker model $ ./cdsctl worker model import https://raw.githubusercontent.com/ovh/cds/v0.54.1/contrib/worker-models/go-official-1.17.yml # import Import a workflow template $ ./cdsctl template push https://raw.githubusercontent.com/ovh/cds/v0.54.1/contrib/workflow-templates/demo-workflow-hello-world/demo-workflow-hello-world.yml Workflow template shared.infra/demo-workflow-hello-world has been created Template successfully pushed ! # create project, then create a workflow from template $ ./cdsctl project create DEMO FirstProject $ ./cdsctl template apply DEMO MyFirstWorkflow shared.infra/demo-workflow-hello-world --force --import-push --quiet # run CDS Workflow! $ ./cdsctl workflow run DEMO MyFirstWorkflow Workflow MyFirstWorkflow #1 has been launched http://localhost:8080/project/DEMO/workflow/MyFirstWorkflow/run/1  Important: the service is exposed without https.\n Do not use this docker-compose installation to run it in production without modification. Safari don\u0026rsquo;t manage secured cookie on localhost, please use another browser to avoid authentication error on your browser    Login on WebUI  Open a browser on http://localhost:8080/account/signup, then login with the user admin,\n Check on UI  on http://localhost:8080/project/DEMO/workflow/MyFirstWorkflow/run/1 you will have\nYou see that the pipeline deploy in production was not launched automatically. There is a Run Condition on it cds.manual = true:\nThe build pipeline contains two stages, with only one job in each stage\nIf the job does not start The worker model used in this tutorial is a docker image golang. CDS will run jobs only if the worker model is registered.\nSo, if the first job of the workflow stay in Waiting status, you can check if you worker model is well registered. Go on http://localhost:8080/settings/worker-model/shared.infra/go-official-1.17 , you must have the flag need registration: false.\nIf the flag is true, you can check the swarm hatchery logs:\n$ docker-compose logs -f cds-hatchery-swarm When a worker (so, a container) is starting, this container communicates with the api with the url http://$HOSTNAME:8081 to download the worker binary. This URL is using your $HOSTNAME, but perhaps that this can\u0026rsquo;t be used on your docker installation from a container. If the container can\u0026rsquo;t communicate to the api with this url, you can update it:\n# you can replace $HOSTNAME by your IP on local network. Example: 192.168.xxx.xxx $ export CDS_EDIT_CONFIG=\u0026#34;hatchery.swarm.commonConfiguration.provision.workerApiHttp.url=http://192.168.xxx.xxx:8081 \u0026#34; $ docker-compose up cds-edit-config $ docker-compose restart cds-hatchery-swarm Setup connection with a VCS # READ THE section https://ovh.github.io/cds/docs/integrations/github/github_repository_manager/#create-a-cds-application-on-github to generate the clientId and clientSecret. # Short version:  # go on https://github.com/settings/applications/new # Application name: cds-test-docker-compose # Homepage URL: http://localhost:8080 # Authorization callback: http://localhost:8080/cdsapi/repositories_manager/oauth2/callback # send click on register application. $ export CDS_EDIT_CONFIG=\u0026#34;vcs.servers.github.github.clientId=xxxxx vcs.servers.github.github.clientSecret=xxxxx \u0026#34; $ docker-compose up cds-edit-config $ docker-compose up -d cds-vcs cds-repositories Notice that here, you have the VCS and Repositories services up and running.\nvcs: The aim of this µService is to communicate with Repository Manager as GitHub, GitLab, Bitbucket… But, as your CDS is not probably public, GitHub won\u0026rsquo;t be able to call your CDS to automatically run your workflow on each git push.\nrepositories: this µService is used to enable the as-code feature. Users can store CDS Files on their repositories. This service clones user repositories on local filesystem.\nThen, next with Actions, Plugins  Import actions, example:  $ ./cdsctl action import https://raw.githubusercontent.com/ovh/cds/v0.54.1/contrib/actions/cds-docker-package.yml Go further  How to use OpenStack infrastructure to spawn CDS Workers read more Link CDS to a repository manager, as GitHub, Bitbucket Server or GitLab Learn more about CDS variables read more  "
},
{
	"uri": "/docs/",
	"title": "CDS Documentation",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/docs/concepts/cds_as_code/rbac/global/",
	"title": "Global roles",
	"tags": [],
	"description": "",
	"content": "The global section allows users/groups to manage global CDS configuration:\n users groups organization region hatcheries project creation  Available roles:\n manage-permission: Allow users/groups to create/update/delete an permission manage-organization: Allow users/groups to create/delete an organization manage-region: Allow users/groups to create/delete a region manage-hatchery: Allow users/groups to create/update/delete a hatchery create-project: Allow users/groups to create a project  Yaml example:\nname: my-permission-name global: - role: manage-permission users: [foo,bar] groups: [grpFoo] List of fields:\n role: [mandatory]role to applied users: list of usernames groups: list of groups  "
},
{
	"uri": "/docs/components/hatchery/local/",
	"title": "Hatchery Local",
	"tags": [],
	"description": "",
	"content": "Use case If you are a CDS user, you can use shared.infra Worker to run your job.\nBut, if you want to use your host for various good reasons as OS, Network, etc\u0026hellip; you can launch CDS Worker on your host.\nTwo prerequisites:\n your host must reach your CDS API on HTTP port defined on your CDS Configuration the basedir (default is /var/lib/cds-engine) must allow to execute binaries.  The worker binary is downloaded from CDS API at the start of the hatchery, it\u0026rsquo;s placed into basedir directory.\nStart Local hatchery Generate a token:\n$ cdsctl consumer new me \\ --scopes=Hatchery,RunExecution,Service,WorkerModel \\ --name=\u0026#34;hatchery.local\u0026#34; \\ --description=\u0026#34;Consumer token for local hatchery\u0026#34; \\ --groups=\u0026#34;\u0026#34; \\ --no-interactive Builtin consumer successfully created, use the following token to sign in: xxxxxxxx.xxxxxxx.4Bd9XJMIWrfe8Lwb-Au68TKUqflPorY2Fmcuw5vIoUs5gQyCLuxxxxxxxxxxxxxx Edit the section hatchery.local in the CDS Configuration file. The token have to be set on the key hatchery.local.commonConfiguration.api.http.token.\nThen start hatchery:\nengine start hatchery:local --config config.toml This hatchery will now start worker binary on your host. You can manage settings, as max workers in the hatchery configuration file.\n"
},
{
	"uri": "/docs/tutorials/init_workflow_with_cdsctl/",
	"title": "Init a CDS Workflow from a repository",
	"tags": [],
	"description": "",
	"content": " In this tutorial, you will create a CDS Workflow from an existing git repository.\n This will creates you some files inside your local git repository. Then you\u0026rsquo;ll can push them to get a CDS workflow lives with his configuration \u0026lsquo;as code\u0026rsquo;.   Prerequisites  Have an account on your CDS instance Have a Repository manager as GitHub, Bitbucket Server or GitLab set up on your CDS Instance. Have cdsctl command line, you can download it from here  To get started with CDS  In a terminal, go into your git repository and login with cdsctl  $ cd \u0026lt;path-to-repo\u0026gt; $ cdsctl login -H \u0026lt;cds-api-url\u0026gt; # you will be ask for your username and password  Create your first workflow  $ cdsctl workflow init This will ask you to choose:\n The CDS project The repository manager where your application code is hosted Select \u0026lsquo;n\u0026rsquo; for the question: \u0026lsquo;Do you want to reuse an existing pipeline?\u0026rsquo; Type your pipeline name  $ cdsctl workflow init Choose the CDS project FIRSTPROJECT - MyFirstProject [1] Your choice [1-1]: 1 Initializing workflow from sguiheux/cdsdemo (git@github.com:sguiheux/cdsdemo.git)... Choose the repository manager github [1] Your choice [1-1]: 1 application FIRSTPROJECT/cdsdemo (sguiheux/cdsdemo) found in CDS Do you want to reuse an existing pipeline? [y/n]: n Enter your pipeline name: MyPipeline File .cds/cdsdemo.yml created File .cds/MyPipeline.pip.yml created Pushing workflow to CDS... Pipeline MyPipeline successfully created Workflow cdsdemo has been updated Now you can run: git add .cds/ \u0026amp;\u0026amp; git commit -s -m \u0026#34;chore: init CDS workflow files\u0026#34; You should consider add the following keys in githubpgp -----BEGIN PGP PUBLIC KEY BLOCK----- xsBNBFqn6wYBCAC3nVRHO/QxBZqvD27jm3f8KhSBA2cxccHSoFQIRykkVy6kLzth VV2fxcEOiI9frKBxPQUKeTKQPBkbvqR9/JrP+h0opmLTQ9mQ4l5ax1K7fWazTUlR le/fOljJtkjEs9GnsSe348CDc00aN5giQcL6NRyM0IbmYDPo/bcTXRZa/zJYnFAK V11AAVLvjokDtA2vFDce6sqaPsu/y4M1tm2vPhef1kvJb3W4kH5soEGem5apKZ81 kvmmfjxVUFEUZKPGWZEIQli1RP8mTLTi+3B6C7klMkId8tyMo7HD/GGTwHgM3GN1 /7wTr7SUmIzyg1lTMseAugorIF/2MRqzmWbBABEBAAHNLmFwcC1wZ3AtZ2l0aHVi IChhcHAtcGdwLWdpdGh1YikgPGNkc0Bsb2NhaG9zdD7CwGkEEwEIAB0FAlqn6wYJ EJp/Gt0iarUSAhsDAhkBAwsJAgIVCgAAtqYIABMo6JFExLVu3Oyl58ouqhfcv7Qr VmiwT6rTcvOSAREj/7NB0BNm0gUyhOIvbdMjzSlhl2x6SLlgE1ZankCp+cl5d9GU QAWKGs044nntbsUpkVRD/TyJocv2kX88HkarfB11fDGUOfkAEB6cXRMZ6bxgKDw7 EhwG2qewFJ3bg2713Dpc30ViT0DtuCDF0gUO8eJAIEplu6IT9lmvg44d7+IErkGi +Q1uwybtMi85vdb2xgTORjoRACp8O1UVnygvJkjC0oirOghBxB9bMo6ZQDDrVwij QASpcijkSlEp/thSGoexNYNztn9w/WEeFHGrk3FOaljsTwH8+6OnqxVm/ubOwE0E WqfrBgEIANx9wDczcdUFrAnCoIsncSGUkEtuK9isogKqjkt/USFX4DNv6GMYyqE/ MUlWrSOHucTRlipXiaTJgPIuICTZPj90NNpf4CABYAJISM9+nwIRAfH8pVyqqexR yBmX4QNidi71MdytGaGEyqc4VAeqPyhAFtQ+ON89QnAQCTM2hMQVR7fibUlrn57v +D1NjU+e5Ugh56cD5TeknWKqNWV2UC0TWh5Wogbw3NKEAwuc1rqRxODFbRXLzNgL 5DZFpxvCbFCCsBf7UzuxM8JNqCek2lXN3iHyup47EcPPm0AL3avoevVkoctCYz06 XOnBGca28SW0SOTIAwtj0z4OBeNjAmInEQEAAcLAXwQYAQgAEwUCWqfrBgkQmn8a 3SJqtRICGwwAAOt1CABBvmQa9KLK4JdwyYYlfqJW/VASgqw29AJe72pgkGspmo2+ Jx5wITXMEdgXhcsVRP/3JNfO9NyOhYSp5nSA2/MB02WuPGeug9n69A6EUYJAbnh4 vhhXY5N6iTymBSmtjZXL/48B5OvG4PLHBflGHUxFcWJqlmq786d0GtqjKUBuD58g qNjUpv7Su38WmE6rBGYzpLDpf0X+dQoakZQwRHpRGEdzdlPXnk9UXv783T54sgt0 WmjyDAHgCf/bPAV1KOOrqmxcIgTQN2+ZWdp9tYt73JV+OIe82VoYhNs+39kBVkgH JDrYDf+Fii5pD3fgXlDWqFTwvdSz21OruCg16Ayx =lO/4 -----END PGP PUBLIC KEY BLOCK----- ssh ssh-rsa AAAAB3NzaC1yc2EAA30AADAQABAA06ACAQDyUXiY45Z9Bai7nsj8Tk2olZIwaDhYlBjw60TOlNLWVSvzNS5K+Rps8AA1985A7pcS1tbWtfC2xNMjRN7NznVatioHXgozLTQ/EhKOuEevOp4mCCuebUc62m/14pGKsCN/ikHb6Ca/rf0+NOKt+UUYAOvyVt7FM3NydyT8VrPZWonxULzOIDcPpyZPfbnpuooCZjK2IuaU1pzPxDgszks77bkPePKujhp17Ckfzi+Ke3SgHGr9399UgY8dD6wqvRd+xNQA+EUQNa9SGg5MJ4LgTlqiE+0s/qg7pVUtCLqTo6fSUK0oumkpClmsdwmgnBtfG+5Belli3sMJUHOdw9fQpKUYITQ6jFAaciVzXpdt9j0ImQytz8nP5cd4lpPuv5fHNbx39G7KqdraVsqe3I9Y8RSf2kCVvRON9TthRleYHoxukztsSuxcxeZ0GtaIbIauYymrAvRrAV1harOwSrFThY6sTWyofpZnKesG6S7omIGn5ZjZDtT2p5tiGnZh3gZlS2sHLALyoShUjHxgcOd2h4CMuC1JN63t94rXWfbTYH+eraAhufmnayLC8p4UM/lc0syQBy1aKywR+acScICww20xEt8SG3D5rAlJD5d2EPhJaEzGS0NC6apiaQ2CNlvaceWFoEDbkXj0TL4M0iX42va5Ry1jvo8IPwJ9MoAXrVlowyw== app-ssh-github@cds   CDS generated 3 files for you:\nOne for the application\nversion: v1.0 name: cdsdemo vcs_server: github repo: sguiheux/cdsdemo keys: app-pgp-github: type: pgp value: b59c70ed26bb4948994927448d506d1d vcs_branch: '{{.git.branch}}' vcs_default_branch: master vcs_pgp_key: app-pgp-github One for the pipeline\nversion: v1.0 name: MyPipeline jobs: - job: First job steps: - checkout: '{{.cds.workspace}}' requirements: - binary: git One for the workflow\n name: cdsdemo version: v1.0 pipeline: MyPipeline payload: git.author: \u0026quot;\u0026quot; git.branch: \u0026quot;\u0026quot; git.hash: \u0026quot;\u0026quot; git.hash.before: \u0026quot;\u0026quot; git.message: \u0026quot;\u0026quot; git.repository: sguiheux/cdsdemo application: cdsdemo pipeline_hooks: - type: RepositoryWebHook   Commit and push cds files\n  git add .cds/ \u0026amp;\u0026amp; git commit -s -m \u0026quot;chore: init CDS workflow files\u0026quot;  CDS triggered your workflow from your git push. You can track execution  $ cdsctl workflow status --track cdsdemo [b226e84 | steven.guiheux] #1.0 ➤ ✓ MyPipeline  On CDS UI  Update pipeline to execute a mvn package  Edit the pipeline file to add  version: v1.0 name: MyPipeline jobs: - job: First job steps: - checkout: \u0026#39;{{.cds.workspace}}\u0026#39; - script: mvn package - artifactUpload: target/*.jar requirements: - binary: mvn - binary: git $ cdsctl workflow status --track cdsdemo [d98bd14 | steven.guiheux] #2.0 ➤ ✓ MyPipeline  On CDS UI  "
},
{
	"uri": "/docs/concepts/job/",
	"title": "Job",
	"tags": [],
	"description": "",
	"content": "A job is composed of steps, which will be run sequentially. A job is executed in a dedicated workspace (i.e. filesystem). A new workspace is assigned for each new run of a job.\nA standard build job looks like this:\nYou can use « built-in » actions, such as checkoutApplication, script, jUnit, artifact upload/download.\n The checkoutApplication action clones your Git repository The Script action executes your build command as “make build” The artifactUpload action uploads previously-built binaries The jUnit action parses a given Junit-formatted XML file to extract its test results  Notice: you cannot share a workspace between jobs or between two runs of the same job. Actions Artifact Upload and Artifact Download can be used to transfert artifacts between jobs.\nA Job is executed by a worker. CDS will select a worker for the job dependending on the Requirements the job\u0026rsquo;s requirements.\nSteps The steps of a job is the list of the different operations performed by the CDS worker. Each step is based on an Action pre-defined by CDS. The list of all actions is defined on *\u0026lt;your cds url ui\u0026gt;/#/action*. When a step fails, its parent job is stopped and marked as failed.\nYou can define a Step as final. It mean that even if the job fails before reaching it, the step will be executed anyway. The final steps are executed after all other steps.\nYou can find below an example of steps creation in CDS. You have 2 configuration flags:\n Optional: The failure of the step does not cause the failure of the whole job. Always executed: with this flag checked, this step will be executed even if previous steps fail. This can be helpful, for example, if you run tests in a step and you would like to upload the tests report even if the tests fail.  "
},
{
	"uri": "/hosting/upgrade/migrate_0.48/",
	"title": "Migrate 0.48",
	"tags": [],
	"description": "",
	"content": "CDN service The release 0.48 introduced a new CDS service called CDN. This service is dedicated to receive and store CDS’s job logs.\nWe created this service to be able to move out job\u0026rsquo;s logs from CDS database to an object storage provider (more information about this list of providers here).\nIn this release, logs are stored both in CDN storage units and CDS database to facilitate migration. Old log data and database table will be removed in a future release.\nPrepare CDN service configuration  Init CDN configuration using engine binary.  $ engine config new cdn \u0026gt; cdn.toml Depending your needs you can change the default configuration to use a different storage unit (see: cdn.storageUnits.storages), the default configuration is using a local unit with encryption.\n Generate a auth consumer for your new CDN service.  $ cdsctl consumer new me \\ --scopes=Service,Worker,RunExecution \\ --name=\u0026#34;cdn\u0026#34; \\ --description=\u0026#34;Consumer for cdn service\u0026#34; \\ --groups=\u0026#34;shared.infra\u0026#34; \\ --no-interactive Builtin consumer successfully created, use the following token to sign in: xxxxxxxx.xxxxxxx.4Bd9XJMIWrfe8Lwb-Au68TKUqflPorY2Fmcuw5vIoUs5gQyCLuxxxxxxxxxxxxxx $ engine config edit --output cdn.toml cdn.toml cdn.api.token=xxxxxxxx.xxxxxxx.4Bd9XJMIWrfe8Lwb-Au68TKUqflPorY2Fmcuw5vIoUs5gQyCLuxxxxxxxxxxxxxx  Generate a auth consumer for CDS unit for CDN  $ cdsctl consumer new me \\ --scopes=Project,Run \\ --name=\u0026#34;cdn-storage-cds\u0026#34; \\ --description=\u0026#34;Consumer for cds storage unit\u0026#34; \\ --groups=\u0026#34;shared.infra\u0026#34; \\ --no-interactive Builtin consumer successfully created, use the following token to sign in: xxxxxxxx.xxxxxxx.4Bd9XJMIWrfe8Lwb-Au68TKUqflPorY2Fmcuw5vIoUs5gQyCLuxxxxxxxxxxxxxx $ engine config edit --output cdn.toml cdn.toml cdn.storageUnits.storages.cds.token=xxxxxxxx.xxxxxxx.4Bd9XJMIWrfe8Lwb-Au68TKUqflPorY2Fmcuw5vIoUs5gQyCLuxxxxxxxxxxxxxx The CDS unit will be useful to migrate logs from CDS database to CDN.\nInit CDN database CDN service will require a Postgres database, you can use the same database for CDS API and CDN with different schema or use two distinct databases. To init the database please follow the database management guide here.\nStart CDN service By default CDN log processing and migration is active for all projects and you\u0026rsquo;ll have to start the migration process manually.\nMigration will be executed in two steps, the first one will populate the CDN database from known log items. Then log content will be accessible through the temporary CDS unit and CDN will start to sync your storage unit with CDS unit.\nIf your CDS instance handles a lot of workflows, the migration may take a long time, thanks to the feature flip, you will be able to manually define the list of CDS projects that should use CDN to gradually migrate your projects to CDN.\n (Optional) Set feature flipping for CDN logs to migrate only some projects.  cat \u0026lt;\u0026lt;EOF \u0026gt; feature.yaml name: cdn-job-logs rule: return project_key == \u0026#34;PROJECT1\u0026#34; or project_key == \u0026#34;PROJECT2\u0026#34; EOF cdsctl admin feature import feature.yaml  Start CDN service and migration.  At this step, you will be able to start the CDN service. It will start processing logs for activated projects.\nStart migration using the command line:\n$ cdsctl admin cdn migrate This will only migrate activated projects. If you are using feature flipping to gradually migrate your projects, you will need to rerun this command each time you change this list of projects.\nYou can follow the migration from CDN logs or with the CDS command line:\n$ cdsctl admin cdn status Other changes  The CDS migrate service is now able to manage SQL migrations on both API and CDN databases. Its configuration file format changed to add CDN database config. Please use the following command to generate a config example and update your existing one to this new format.  $ engine config new migrate  Workflow Run will now contains a snapshot of required secrets when starting. This allows changing a secret on CDS entities without breaking existing runs. A migration script will generate this snapshot for recent Workflow Runs (\u0026lt; 3 Months), others will be set to read only mode. CDS UI service will now proxy both API and CDN calls, please add the following lines in your existing config.  # CDN µService URL cdnURL = \u0026#34;http://localhost:8089\u0026#34; # change this URL if needed to match CDN address "
},
{
	"uri": "/hosting/upgrade/migrate_0.49/",
	"title": "Migrate 0.49",
	"tags": [],
	"description": "",
	"content": "CDN service The release 0.49 introduced a new parameter in CDN configuration to disable and remove a CDN unit. In the previous version 0.48, you migrate log from CDS to CDN, by adding a temporary CDN Unit here. Time is coming to disabled it. In the next release (0.50), all logs data in CDS will be deleted, and CDN will become the only way to manage logs.\nDisable CDS Unit Add in your cdn configuration, the property \u0026ldquo;disableSync = true\u0026rdquo; for the CDS Unit\n[cdn.storageUnits.storages.cds-backend] syncParallel = 6 disableSync = true [cdn.storageUnits.storages.cds-backend.cds] host = \u0026#34;https://\u0026lt;your.cds.api\u0026gt;\u0026#34; token = \u0026#34;\u0026lt;your.token\u0026gt;\u0026#34; Remove CDS Unit item from CDN Database To remove CDS Unit items, follow these steps:\n Disable CDS Unit in CDN Retrieve CDS Unit identifier usings cdsctl  cdsctl -c prod admin cdn unit list  Mark CDS Unit item as delete using cdsctl  cdsctl admin cdn unit delete-items \u0026lt;unit_id\u0026gt; Remove CDS Unit from CDN Database To remove CDS Unit from CDN, follow these steps:\n Remove all CDS Unit items from CDN database Remove the unit using cdsctl  cdsctl admin cdn unit delete \u0026lt;unit_id\u0026gt; "
},
{
	"uri": "/hosting/upgrade/migrate_0.50/",
	"title": "Migrate 0.50",
	"tags": [],
	"description": "",
	"content": "Migrate an existing instance Before upgrading your CDS Instance:\n You have to backup your databases: cds and cdn databases. You have to install the version 0.49.0 if you use the 0.48 version. The backend cds-backend have to be removed from the cdn configuration.  PostgreSQL PostgreSQL 14 is now recommended\nCDN Service This release introduced the CDN Artifacts. This means that all artifacts upload / download will be done through the CDN service. This is not enabled by default, you have to enable that with a feature flipping. The version 0.51 will use the CDN service to manage artifacts by default.\nHow to configure the new CDN artifact service? Some configuration have to be added to the cdn service to manage artifacts.\nYou have to add a storageUnits.buffers with the type \u0026ldquo;file\u0026rdquo;.\n[cdn.storageUnits.buffers.local-buffer] # it can be \u0026#39;log\u0026#39; to receive logs or \u0026#39;file\u0026#39; to receive artifacts bufferType = \u0026#34;file\u0026#34; [cdn.storageUnits.buffers.local-buffer.local] path = \u0026#34;/var/lib/cds-engine/cdn-buffer\u0026#34; To multi-instantiate the cdn service, you can use a NFS for the bufferType file, example:\n[cdn.storageUnits.buffers.buffer-nfs] bufferType = \u0026#34;file\u0026#34; [cdn.storageUnits.buffers.buffer-nfs.nfs] host = \u0026#34;w.x.y.z\u0026#34; targetPartition = \u0026#34;/zpool-partition/cdn\u0026#34; userID = 0 groupID = 0 [[cdn.storageUnits.buffers.buffer-nfs.nfs.encryption]] Cipher = \u0026#34;aes-gcm\u0026#34; Identifier = \u0026#34;nfs-buffer-id\u0026#34; ## enter a key here, 32 length Key = \u0026#34;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\u0026#34; Sealed = false How to enable the CDS Artifact? Make sure you have configured cdn in the paragraph above, then enable it with this command:\ncat \u0026lt;\u0026lt;EOF \u0026gt; feature.yaml name: cdn-artifact rule: return true EOF cdsctl admin feature import feature.yaml In the next release (0.51.0), you don\u0026rsquo;t need to use the feature flipping cdn-artifact to enable cdn artifact.\nHow to migrate existing artifacts to the new backend? If you want to migrate some artifacts to the new backend, you can use cdsctl:\n$ cdsctl workflow artifact cdn-migrate \u0026lt;project_key\u0026gt; \u0026lt;workflow_name\u0026gt; \u0026lt;run_number\u0026gt; This command will migrate artifacts for one workflow run.\nWorkflow Runs : Purge and Retention The default retention rule have to be added in api configuration:\n[api.workflow] # Default rule for workflow run retention policy, this rule can be overridden on each workflow. # Example: \u0026#39;return run_days_before \u0026lt; 365\u0026#39; keeps runs for one year. defaultRetentionPolicy = \u0026#34;return run_days_before \u0026lt; 365\u0026#34; Documentation: https://ovh.github.io/cds/docs/concepts/workflow/retention/\nSpawning worker : MaxAttemptsNumberBeforeFailure A new hatchery configuration attribute is available to control the maximum attempts to start a same job.\nExample on the hatchery.local:\n[hatchery.local.commonConfiguration.provision] # Maximum attempts to start a same job. -1 to disable failing jobs when too many attempts # maxAttemptsNumberBeforeFailure = 5 CDS Binaries lazy loading downloadFromGitHub and supportedOSArch are added. This will allow you to download cds workers / cdsctl from GitHub if it\u0026rsquo;s not in already downloaded into the directory.\n[api.download] # this directory contains cds binaries. If it\u0026#39;s empty, cds will download binaries from GitHub (property downloadFromGitHub) or from an artifactory instance (property artifactory) to it directory = \u0026#34;/var/lib/cds-engine\u0026#34; # allow downloading binaries from GitHub downloadFromGitHub = true # example: [\u0026#34;darwin/amd64\u0026#34;,\u0026#34;darwin/arm64\u0026#34;,\u0026#34;linux/amd64\u0026#34;,\u0026#34;windows/amd64\u0026#34;]. If empty, all os / arch are supported: windows,darwin,linux,freebsd,openbsd and amd64,arm,386,arm64,ppc64le supportedOSArch = [] "
},
{
	"uri": "/hosting/upgrade/migrate_0.51/",
	"title": "Migrate 0.51",
	"tags": [],
	"description": "",
	"content": "Migrate an existing instance Before upgrading your CDS Instance:\n You have to backup your databases: cds and cdn databases. You have to install the version 0.50.0 if you use the \u0026lt;= 0.49 version.  CDN Service All artifacts upload / download will be done through the CDN service, this is now enabled by default.\nThe feature flipping cdn-artifact to enable cdn artifact is now obsolete, you can remove it.\ncdsctl admin feature delete cdn-artifact Hatchery Marathon This hatchery is now deprecated, it will be removed in the next release.\n"
},
{
	"uri": "/hosting/upgrade/migrate_0.53/",
	"title": "Migrate 0.53",
	"tags": [],
	"description": "",
	"content": "Migrate an existing instance Before upgrading your CDS Instance:\n You have to backup your databases: cds and cdn databases. You have to install the version 0.52.0. You must follow the following step before upgrading to 0.53.0.  Before upgrading Organization The version 0.52.0 introduced the notion of Organization in CDS for all authentication drivers. In 0.53.0, organizations are now mandatory so you need to add them before upgrading to 0.53.0.\n Upgrade you CDS API configuration to add the following fields on your different authentication drivers. List all allowed organizations in the field \u0026lsquo;allowedOrganizations\u0026rsquo;  [api.auth] allowedOrganizations = [\u0026#34;my-organization\u0026#34;] [api.auth.local] organization = \u0026#34;my-organization\u0026#34; [api.auth.github] organization = \u0026#34;my-organization\u0026#34; [api.auth.gitlab] organization = \u0026#34;my-organization\u0026#34; [api.auth.oidc] organization = \u0026#34;my-organization\u0026#34; [api.auth.corporateSSO] # There is no organization in SSO configuration, as it\u0026#39;s provided by the SSO itself [api.auth.ldap] # There is no organization in ldap configuration as it\u0026#39;s provided by the company ldap field   Create organization in CDS through the cli  cdsctl admin organization add my-organization cdsctl admin organization list +--------------------------------------+-----------------+ | ID | NAME | +--------------------------------------+-----------------+ | 47cc19b8-918e-4bc3-b291-b1cf1ba233ef | my-organization | +--------------------------------------+-----------------+  Migrate all existing users in the organization  cdsctl admin organization user-migrate my-organization Upgrading to 0.53.0 This version contains changes on database table used to authenticate users, this will requires CDS to be stopped before the migration.\n Shutdown all CDS\u0026rsquo;s services. Apply the following changes to your CDS API configuration:  # The field enabled was renamed by signinEnabled in auth api.auth [api.auth] [api.auth.local] signinEnabled = true [api.auth.github] signinEnabled = true [api.auth.gitlab] signinEnabled = true [api.auth.oidc] signinEnabled = true [api.auth.corporateSSO] signinEnabled = true [api.auth.ldap] signinEnabled = true # The common configuration for auth drivers were moved to a new config section called drivers [api.drivers] [api.drivers.github] url = \u0026quot;\u0026quot; apiUrl = \u0026quot;\u0026quot; clientId = \u0026quot;\u0026quot; clientSecret = \u0026quot;\u0026quot; [api.drivers.gitlab] url = \u0026quot;\u0026quot; applicationID = \u0026quot;\u0026quot; secret = \u0026quot;\u0026quot; [api.drivers.oidc] ... [api.drivers.corporateSSO] ... [api.drivers.ldap] ...  Run the database migration, documentation on https://ovh.github.io/cds/hosting/database/ Start CDS API service (scale to 1 instance if you usually use multiple instances). Login to CDS using the command line and check if there is no error on migration using cdsctl admin migration list.  There are two migrations to check: \u0026lsquo;OrganizationMigration\u0026rsquo; and \u0026lsquo;ConsumerMigration\u0026rsquo;. Migration can take a few minutes depending on the number of users.   Scale up CDS API if you usually use multiple instances then restart others services.  "
},
{
	"uri": "/docs/concepts/cds_as_code/",
	"title": "New CDS as Code",
	"tags": [],
	"description": "",
	"content": "Description Coming soon\u0026hellip;\n"
},
{
	"uri": "/docs/concepts/workflow/payload/",
	"title": "Payload",
	"tags": [],
	"description": "",
	"content": "A CDS Workflow can be launched:\n manually, user can enter a Payload by webhooks / repository webhooks, payload contains the value sent by initiator of the hook scheduler, the payload contains the value of the default payload. You can edit the default payload on the root pipeline (on roadmap) listener, as a Kafka listener. The payload will contain the content of the Kafka message  A payload is a JSON value. You can use it inside your CDS Jobs.\nExample:\n{ \u0026#34;akey\u0026#34;: \u0026#34;valueOfKey\u0026#34;, \u0026#34;subkey\u0026#34;: { \u0026#34;akey\u0026#34;: \u0026#34;value\u0026#34; } } Two variables are available inside your jobs:\n{{.akey}} and\n{{.subkey.akey}} Choose a git branch in the payload If an application attached to the pipeline context is linked to a Git repository, you can set git.branch attribute to a branch of your choice:\n"
},
{
	"uri": "/docs/concepts/cds_as_code/rbac/",
	"title": "Permission",
	"tags": [],
	"description": "",
	"content": "Description CDS permissions system uses a Role-based Access Control (RBAC).\nYou will be able to manage all CDS resources, included ascode resources. For example, if a user updates your workflow files on your repository but doesn\u0026rsquo;t have permission to do so, his changes will be discarded.\nYou can manage permissions on all CDS resources through 5 sections:\n global hatcheries regions workflows projects  CLI Permissions can be managed by CDS cli.\nPermission You need the permission manage-permission to be able to created/update/delete a permission\nYaml Example name: my-full-permission global: - role: manage-permission users: [foo] hatcheries: - role: start-worker region: nyc-infra hatchery: my-swarm-hatchery projects: - role: read all: true users: [foo] groups: [grpFoo] - role: manage-workflow users: [foo] projects: [PROJ_KEY1, PROJ_KEY2] regions: - role: execute region: nyc-infra all_users: true organization: US workflows: - role: trigger all_users: true project: PROJ_KEY1 all_workflows: true users: [foo] "
},
{
	"uri": "/docs/concepts/workflow/hooks/webhook/",
	"title": "Webhook",
	"tags": [],
	"description": "",
	"content": "On a Root Pipeline, you can add a \u0026ldquo;Webhook\u0026rdquo;. Click on the created icon to get the WebHook URL.\nIn order to trigger this one you just have to make a HTTP call on the given URL with the selected method. If the selected method is POST you can also send a payload from your workflow inside the request body or if you use GET method you can write your payload using query parameters.\nExample of curl:\ncurl -H \u0026#34;Content-Type: application/json\u0026#34; -X POST -d \u0026#39;{\u0026#34;git.branch\u0026#34;:\u0026#34;development\u0026#34;}\u0026#39; https://cds.localhost.local/hook/webhook/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx In this example, https://cds.localhost.local/hook/ is your CDS Hooks µService.\n"
},
{
	"uri": "/docs/concepts/files/workflow-syntax/",
	"title": "Workflow configuration file",
	"tags": [],
	"description": "",
	"content": "A CDS workflow file only contains the description of pipelines orchestration, hooks, run conditions, etc. Consider the following workflow which implements a basic two-stage workflow:\nname: my-workflow workflow: build: pipeline: build application: my-application deploy: depends_on: - build when: - success pipeline: deploy application: my-application environment: my-production parameters: name: value one_at_a_time: true hooks: build: - type: RepositoryWebHook integrations: my-artifactory-integration-name: type: artifact_manager notifications: - type: email pipelines: - deploy settings: on_success: never recipients: - me@foo.bar retention_policy: return run_days_before \u0026lt; 7 There are two major things to understand: workflow and hooks. A workflow is a kind of graph starting from a root pipeline, and other pipelines with dependencies. In this example, the deploy pipeline will be triggered after the build pipeline.\nRun Conditions Run Conditions documentation\nExample of basic condition. Notice that the when attribute is optional, it\u0026rsquo;s just a shortcut on condition cds.status == Success.\nyourpipeline: depends_on: - theparentpipeline conditions: check: - variable: git.branch operator: ne value: master when: - success Example with many checks:\nconditions: check: - variable: git.branch operator: eq value: master - variable: git.repository operator: eq value: ovh/cds when: - success Example with using LUA syntax as advanced condition:\nconditions: script: return cds_manual == \u0026#34;true\u0026#34; or (cds_status == \u0026#34;Success\u0026#34; and git_branch == \u0026#34;master\u0026#34; and git_repository == \u0026#34;ovh/cds\u0026#34;) Integrations Artifactory Integration\nNotifications Notifications documentation\nExample of email notification.\n- type: email pipelines: - deploy settings: on_success: never recipients: - me@foo.bar Example of vcs notification. Note that pipelines list is optional on every notifications. When it\u0026rsquo;s not specified, notification will be triggered for each pipeline\n- type: vcs settings: template: body: |+[[- if .Stages ]] CDS Report [[.WorkflowNodeName]]#[[.Number]].[[.SubNumber]] [[ if eq .Status \u0026#34;Success\u0026#34; -]] ✔ [[ else ]][[ if eq .Status \u0026#34;Fail\u0026#34; -]] ✘ [[ else ]][[ if eq .Status \u0026#34;Stopped\u0026#34; -]] ■ [[ else ]]- [[ end ]] [[ end ]] [[ end ]] [[- end]] disable_comment: false disable_status: false Mutex Mutex documentation\nExample of a pipeline limited to one execution at a time: deployments to production cannot be executed concurrently.\nname: my-workflow workflow: # ... deploy: pipeline: deploy # ... one_at_a_time: true # No concurrent deployments Retention Policy Retention documentation\n"
},
{
	"uri": "/development/",
	"title": "CDS Developer Manual",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/docs/concepts/",
	"title": "Concepts",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/hosting/ready-to-run/docker-compose/full-example/",
	"title": "Docker Compose Full Tutorial",
	"tags": [],
	"description": "",
	"content": "Run with Docker-Compose - Full Tutorial This page will help you to create a public instance of CDS:\n installed on a Virtual Machine with a Public Cloud Instance on Openstack with a domain name and SSL configured installed with docker-compose  The whole tutorial of docker-compose is duplicated here. This article contains additional details on HAPRoxy, SSL configuration, IP Restriction.\nAt the end of this tutorial, you will have a CDS running with all CDS Services and a Swarm Hatchery. This CDS is fully functional with GitHub. A CDS installed with this tutorial should only be used for demonstration only. Please read this article for a production installation.\nCreate the Virtual Machine with OpenStack Create an OpenStack project on OVHcloud Public Cloud: https://www.ovh.com/manager/public-cloud/#/pci/projects/onboarding\nExport Openstack Variables:\nexport OS_AUTH_URL=https://auth.cloud.ovh.net/v3/ export OS_IDENTITY_API_VERSION=3 export OS_TENANT_ID=your-tenant-id export OS_TENANT_NAME=\u0026#34;your-tenant-name\u0026#34; export OS_USERNAME=\u0026#34;your-openstack-username\u0026#34; export OS_PASSWORD=\u0026#34;your-openstack-password\u0026#34; export OS_REGION_NAME=\u0026#34;opentack-region\u0026#34; # create virtual machine. openstack server create --flavor b2-15-flex --image \u0026#34;Debian 10\u0026#34; --key-name=\u0026#34;your-key-name\u0026#34; --nic net-id=Ext-Net cdsdemo This new virtual machime is attached to the default security group. This group should allows ingress for port 22 and port 443 (from your remote IP). It must also allow the port 80 for SSL configuration.\nInstall Docker on your VM # get server public IP openstack server list # connect to the vm with ssh debian@ip-of-your-virtual-machine # go to root sudo su # then install docker apt-get update \u0026amp;\u0026amp; \\ apt-get install -y apt-transport-https ca-certificates software-properties-common curl git netcat make binutils bzip2 gnupg haproxy telnet htop \u0026amp;\u0026amp; \\ curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add - \u0026amp;\u0026amp; \\ add-apt-repository \u0026#34;deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs)stable\u0026#34; \u0026amp;\u0026amp; \\ apt-get -y update \u0026amp;\u0026amp; \\ apt-get -y upgrade \u0026amp;\u0026amp; \\ apt-get install -y --allow-unauthenticated docker-ce docker-ce-cli containerd.io \u0026amp;\u0026amp; \\ curl -L https://github.com/docker/compose/releases/download/1.14.0/docker-compose-`uname -s`-`uname -m` \u0026gt; /usr/local/bin/docker-compose \u0026amp;\u0026amp; \\ chmod +x /usr/local/bin/docker-compose \u0026amp;\u0026amp; \\ usermod -aG docker debian \u0026amp;\u0026amp; \\ echo \u0026#34;127.0.0.11 cdsdemo cdsdemo\u0026#34; \u0026gt;\u0026gt; /etc/hosts Configure SSL With root user:\nexport DOMAIN=\u0026#39;your-cdsdemo.domain\u0026#39; export YOUR_MAIL=\u0026#39;admin@localhost.local\u0026#39; apt-get install certbot certbot certonly --standalone -d ${DOMAIN} --non-interactive --agree-tos --email ${YOUR_MAIL} --http-01-port=80 # then generate pem file mkdir /etc/haproxy/certs/ cat /etc/letsencrypt/live/$DOMAIN/fullchain.pem /etc/letsencrypt/live/$DOMAIN/privkey.pem \u0026gt; /etc/haproxy/certs/$DOMAIN.pem chmod -R go-rwx /etc/haproxy/certs Configure HAProxy In the content below, replace your-cdsdemo.domain by your domain name, then create the file /etc/haproxy/haproxy.cfg with the root user.\nglobal log /dev/log\tlocal0 log /dev/log\tlocal1 notice chroot /var/lib/haproxy stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners stats timeout 30s user haproxy group haproxy daemon # Default SSL material locations ca-base /etc/ssl/certs crt-base /etc/ssl/private ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS ssl-default-bind-options no-sslv3 defaults log\tglobal mode\thttp option\thttplog option\tdontlognull timeout connect 5000 timeout client 50000 timeout server 50000 errorfile 400 /etc/haproxy/errors/400.http errorfile 403 /etc/haproxy/errors/403.http errorfile 408 /etc/haproxy/errors/408.http errorfile 500 /etc/haproxy/errors/500.http errorfile 502 /etc/haproxy/errors/502.http errorfile 503 /etc/haproxy/errors/503.http errorfile 504 /etc/haproxy/errors/504.http frontend webstats bind your-cdsdemo.domain:9999 ssl crt /etc/haproxy/certs/your-cdsdemo.domain.pem frontend cdsdemo bind your-cdsdemo.domain:443 ssl crt /etc/haproxy/certs/your-cdsdemo.domain.pem redirect scheme https if !{ ssl_fc } mode http default_backend cdsdemo_ui # you can enable stats if you want # stats enable # Enable stats page # stats hide-version # Hide HAProxy version # stats realm Haproxy\\ Statistics # Title text for popup window # stats uri /haproxy_stats # Stats URI # stats auth cds:your-strongpassword # Authentication credentials # stats refresh 30s # stats show-node backend cdsdemo_ui mode http balance roundrobin server cdsui 127.0.0.1:8080 check Then restart HAProxy\nservice haproxy restart Register new OAuth Application on GitHub  go on https://github.com/settings/applications/new Application name: cds-demo Homepage URL: https://your-cdsdemo.domain Authorization callback: https://your-cdsdemo.domain/cdsapi/repositories_manager/oauth2/callback Click on Register application.  Notice that you can create a new OAuth Application on a GitHub organization: https://github.com/organizations/your-organization/settings/applications/new\nYou will have the CientID and ClientSecret\nInstall CDS, initialize everything In the content below, replace the value of\n CDS_DOMAIN_NAME CDS_GITHUB_CLIENT_ID CDS_GITHUB_CLIENT_SECRET  then create the file /home/debian/boot.sh with the user debian.\n#!/bin/bash  set -ex export CDS_DOMAIN_NAME=\u0026#34;your-cdsdemo.domain\u0026#34; export CDS_GITHUB_CLIENT_ID=\u0026#34;xxxxxxxxxxx\u0026#34; export CDS_GITHUB_CLIENT_SECRET=\u0026#34;xxxxxxxxxxx\u0026#34; mkdir -p tools/smtpmock curl https://raw.githubusercontent.com/ovh/cds/v0.54.1/docker-compose.yml -o docker-compose.yml export HOSTNAME=$(hostname) export CDS_DOCKER_IMAGE=ovhcom/cds-engine:0.54.1 docker pull ovhcom/cds-engine:0.54.1 docker-compose up -d cds-db cds-cache elasticsearch dockerhost sleep 3 docker-compose logs| grep \u0026#39;database system is ready to accept connections\u0026#39; docker-compose up cds-db-init docker-compose up cds-migrate sleep 3 docker-compose up cds-prepare export CDS_EDIT_CONFIG=\u0026#34;vcs.servers.github.github.clientId=${CDS_GITHUB_CLIENT_ID}vcs.servers.github.github.clientSecret=${CDS_GITHUB_CLIENT_SECRET}\u0026#34; docker-compose up cds-edit-config export CDS_EDIT_CONFIG=\u0026#34;api.url.api=http://localhost:8081 api.url.ui=https://${CDS_DOMAIN_NAME}hatchery.swarm.commonConfiguration.api.http.url=http://cds-api:8081\u0026#34; docker-compose up cds-edit-config export CDS_EDIT_CONFIG=\u0026#34;hatchery.swarm.commonConfiguration.api.http.url=https://${CDS_DOMAIN_NAME}/cdsapi hooks.urlPublic=https://${CDS_DOMAIN_NAME}/cdshooks ui.hooksURL=http://cds-hooks:8083\u0026#34; docker-compose up cds-edit-config docker-compose up -d cds-api sleep 3 TOKEN_CMD=$(docker logs $(docker-compose ps -q cds-prepare) | grep INIT_TOKEN) \u0026amp;\u0026amp; $TOKEN_CMD curl \u0026#39;http://localhost:8081/download/cdsctl/linux/amd64?variant=nokeychain\u0026#39; -o cdsctl chmod +x cdsctl # this line will ask a password for admin user ./cdsctl signup --api-url http://localhost:8081 --email admin@localhost.local --username admin --fullname admin VERIFY_CMD=$(docker-compose logs cds-api | grep \u0026#39;cdsctl signup verify\u0026#39; | cut -d \u0026#39;$\u0026#39; -f2 | xargs) \u0026amp;\u0026amp; ./$VERIFY_CMD # this line returns the RING of user, must be ADMIN ./cdsctl user me export CDS_EDIT_CONFIG=\u0026#34;api.url.api=https://${CDS_DOMAIN_NAME}/cdsapi api.url.ui=https://${CDS_DOMAIN_NAME}\u0026#34; docker-compose up cds-edit-config docker-compose stop cds-api docker-compose rm -f cds-api docker-compose up -d cds-api sleep 3 docker-compose up -d cds-ui cds-cdn cds-hooks cds-elasticsearch cds-hatchery-swarm cds-vcs cds-repositories sleep 5 ./cdsctl worker model import https://raw.githubusercontent.com/ovh/cds/v0.54.1/contrib/worker-models/maven3-jdk10-official.yml ./cdsctl template push https://raw.githubusercontent.com/ovh/cds/v0.54.1/contrib/workflow-templates/demo-workflow-hello-world/demo-workflow-hello-world.yml ./cdsctl project create DEMO FirstProject ./cdsctl template apply DEMO MyFirstWorkflow shared.infra/demo-workflow-hello-world --force --import-push --quiet ./cdsctl workflow run DEMO MyFirstWorkflow With user debian\n# be sure that you have group docker groups # you should have these groups: # debian adm dialout cdrom floppy sudo audio dip video plugdev netdev docker # if it's not the case, logout and re-login with debian user. cd /home/debian chmod +x boot.sh ./boot.sh The boot.sh will ask you the password for admin user, you have to enter a strong password. The script will also ask you the context name for cdsctl, you can choose the default context default.\nAt the end, you should have to log:\nWorkflow MyFirstWorkflow #1 has been launched https://your-cdsdemo.domain/project/DEMO/workflow/MyFirstWorkflow/run/1 This url should be accessible at the moment, since your have configured the SSL and haproxy.\nThe docker ps should returns this:\n $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 02b60d3f98c0 ovhcom/cds-engine:latest \u0026quot;sh -c '/app/cds-eng…\u0026quot; 33 seconds ago Up 32 seconds (healthy) 0.0.0.0:8080-\u0026gt;8080/tcp debian_cds-ui_1 ae8e87c60e2b ovhcom/cds-engine:latest \u0026quot;sh -c '/app/cds-eng…\u0026quot; 35 seconds ago Up 33 seconds (healthy) debian_cds-vcs_1 c2b8852e487a ovhcom/cds-engine:latest \u0026quot;sh -c '/app/cds-eng…\u0026quot; 35 seconds ago Up 33 seconds (healthy) 127.0.0.1:8083-\u0026gt;8083/tcp debian_cds-hooks_1 fe2fcbee96aa ovhcom/cds-engine:latest \u0026quot;sh -c '/app/cds-eng…\u0026quot; 35 seconds ago Up 33 seconds (healthy) debian_cds-repositories_1 f2eb7b8c4329 ovhcom/cds-engine:latest \u0026quot;sh -c '/app/cds-eng…\u0026quot; 35 seconds ago Up 33 seconds (healthy) debian_cds-elasticsearch_1 22dc66a1b2a2 ovhcom/cds-engine:latest \u0026quot;sh -c '/app/cds-eng…\u0026quot; 35 seconds ago Up 33 seconds (healthy) debian_cds-hatchery-swarm_1 958ab1703f16 ovhcom/cds-engine:latest \u0026quot;sh -c '/app/cds-eng…\u0026quot; 39 seconds ago Up 39 seconds (healthy) 0.0.0.0:8081-\u0026gt;8081/tcp debian_cds-api_1 9223395500ab postgres:14.0 \u0026quot;docker-entrypoint.s…\u0026quot; 2 minutes ago Up About a minute 5432/tcp debian_cds-db_1 c9b58ce83003 docker.elastic.co/elasticsearch/elasticsearch:6.7.2 \u0026quot;/usr/local/bin/dock…\u0026quot; 2 minutes ago Up About a minute 9200/tcp, 9300/tcp debian_elasticsearch_1 08cfe15c3e2c bobrik/socat \u0026quot;socat TCP4-LISTEN:2…\u0026quot; 2 minutes ago Up About a minute 127.0.0.1:2375-\u0026gt;2375/tcp debian_dockerhost_1 fc2ac075c000 redis:alpine \u0026quot;docker-entrypoint.s…\u0026quot; 2 minutes ago Up About a minute 6379/tcp debian_cds-cache_1 Tips Limit access to some IP only Limit access to your current IP:\n# get your the current IP - from your desk export MY_IP=$(curl ipaddr.ovh) # Allow your IP to call the 443 port openstack security group rule create default --protocol tcp --dst-port 443:443 --remote-ip ${MY_IP}/32 # Allow your IP to call the 22 port openstack security group rule create default --protocol tcp --dst-port 22:22 --remote-ip ${MY_IP}/32 # check if new rules are applied openstack security group rule list default Allow GitHub to call your CDS\n# Check GitHub IP Hooks on https://api.github.com/meta # replace $RANGE_GITHUB with the range of GitHub Hooks. openstack security group rule create default --protocol tcp --dst-port 443:443 --remote-ip $RANGE_GITHUB # check if new rules are applied openstack security group rule list default Disable Signup on you CDS Instance # to run from user debian, from directory /home/debian/ export CDS_EDIT_CONFIG=\u0026quot;api.auth.local.signupDisabled=true\u0026quot; docker-compose up cds-edit-config # then, restart api export HOSTNAME=$(hostname) docker-compose restart cds-api Reinstall all CDS on the same VM # with user debian # delete all containers and volumes docker rm -f `docker ps -aq` \u0026amp;\u0026amp; docker volume prune # run boot.sh file ./boot.sh "
},
{
	"uri": "/docs/concepts/cds_as_code/rbac/hatchery/",
	"title": "Hatchery roles",
	"tags": [],
	"description": "",
	"content": " start-worker: Allow the hatchery to spawn a worker in the given region  Yaml example:\nname: my-permission-name hatcheries: - role: start-worker region: nyc-infra hatchery: my-swarm-hatchery List of fields:\n role: [mandatory]role to applied region: [mandatory]the region name hatchery: [mandatory]the hatchery name  "
},
{
	"uri": "/docs/tutorials/import_workflow_with_webui/",
	"title": "Import a CDS Workflow from a repository",
	"tags": [],
	"description": "",
	"content": " In this tutorial, you will create a CDS Workflow from an existing git repository.\n The repository have to add .cds/ directory. With the web UI, on will create a CDS Workflow \u0026lsquo;as code\u0026rsquo;.   Prerequisites  Have an account on your CDS instance Have a Repository manager as GitHub, Bitbucket Server or GitLab set up on your CDS Instance.  Prepare your git repository The easiest way to initialize cds files in your repository is to follow first tutorial\nCreate the pipeline file .cds/build.pip.yml\nversion: v1.0 name: build-pipeline jobs: - job: First job steps: - checkout: \u0026#39;{{.cds.workspace}}\u0026#39; - script: mvn package - artifactUpload: target/*.jar requirements: - binary: git Create the application file .cds/cdsdemo.app.yml\nversion: v1.0 name: cdsdemo vcs_server: github repo: your-orga/cdsdemo vcs_branch: \u0026#39;{{.git.branch}}\u0026#39; vcs_default_branch: master vcs_pgp_key: app-pgp-github Create the workflow file .cds/cdsdemo.yml\nname: cdsdemo version: v1.0 pipeline: build-pipeline payload: git.branch: \u0026#34;master\u0026#34; git.repository: yesnault/cdsdemo application: cdsdemo  pipeline_hooks: - type: Git Repository Poller Create workflow from UI  Attach a repository manager on your CDS Project - Advanced tab   Go on Workflows tab, then click on \u0026lsquo;Create Workflow\u0026rsquo;   Click on \u0026lsquo;From repository\u0026rsquo;, then choose a repository manager   Choose a git repository describe how to clone it, then click on \u0026lsquo;Inspect repository\u0026rsquo;   Files found are display, then click on \u0026lsquo;Create workflow\u0026rsquo; button   A resume page is displayed, click on \u0026lsquo;See workflow\u0026rsquo;   View workflow  "
},
{
	"uri": "/docs/concepts/files/pipeline-syntax/",
	"title": "Pipeline configuration file",
	"tags": [],
	"description": "",
	"content": "A CDS workflow file only contains the description of pipelines orchestration, hooks, run conditions, etc. Consider the following Pipeline which implements a basic two-stage continuous delivery pipeline:\nversion: v1.0 name: build parameters: param_name: type: string default: default_value stages: - Compile - Package jobs: - job: Build UI stage: Compile steps: - gitClone: branch: \u0026#39;{{.git.branch}}\u0026#39; commit: \u0026#39;{{.git.hash}}\u0026#39; directory: cds url: \u0026#39;{{.git.url}}\u0026#39; - script: - echo {{.cds.pip.param_name}}  - cd cds/ui - npm set registry https://registry.npmjs.org - npm install - ng build -prod --aot - tar cfz ui.tar.gz dist - artifactUpload: path: cds/ui/ui.tar.gz tag: \u0026#39;{{.cds.version}}\u0026#39; requirements: - binary: git - memory: \u0026#34;1024\u0026#34; - model: Node8.9.1 - job: Test UI stage: Compile enabled: false requirements: - binary: git - memory: \u0026#34;1024\u0026#34; - model: Node8.9.1 steps: - gitClone: branch: \u0026#39;{{.cdsbuildgitbranch}}\u0026#39; commit: \u0026#39;{{.git.hash}}\u0026#39; directory: cds password: \u0026#34;\u0026#34; privateKey: \u0026#34;\u0026#34; url: \u0026#39;{{.cds.app.repo}}\u0026#39; user: \u0026#34;\u0026#34; - script: - export CHROME_BIN=chromium - npm set registry https://registry.npmjs.org - cd cds/ui - npm install - npm test - jUnitReport: ./cds/ui/tests/**/results.xml - job: Package UI stage: Package requirements: - binary: docker steps: - artifactDownload: path: . - CDS_DockerPackage: dockerfileDirectory: . imageName: ovh/cds-ui imageTag: \u0026#39;{{.cds.version}}\u0026#39; Stages This file describes three jobs (Build UI, Test UI and Package UI) in two stages Compile and Package. The two first jobs will be run in parallel in the first stage. When the first Stage is successful, the second stage containing the last job will be run.\nA pipeline always begins with:\nversion: v1.0 name: build stages: - Compile - Package where:\n version: v1.0 represents the version of the syntax used in this file name: build is the name of the pipeline stages is the ordered list of the stages  Jobs Each job has several properties:\n name - job: Build UI defines the name as Build UI. stage - this is mandatory if you have more than one stage. It must be one of the list stages described above. enabled - can be omitted, true by default. If you want to disable a Job, set this property to false. requirements - the list of the requirements to match a worker. Read more about requirements. steps - the ordered list of steps.  Steps Each job is composed of steps. A step is an action performed by a CDS Worker within a workspace. Each step uses an action and the syntax is:\n if the action has only one parameter:  - job: xxx steps: - myAction: myParameter  if the action has more that one parameter:  - job: xxx steps: - myAction: myFistParameter: value mySecondParameter: value Read more about available actions.\nOptional It is possible to make a step optional. Even if this task fail the job will continue.\n- job: xxx steps: - myAction: myFistParameter: value mySecondParameter: value optional: true This also work for built-in action\n- job: xxx steps: - coverage: format: other path: \u0026#34;{{.cds.workspace}}/target/site/jacoco/jacoco.xml\u0026#34; optional: true "
},
{
	"uri": "/docs/concepts/workflow/pipeline-context/",
	"title": "Pipeline Context",
	"tags": [],
	"description": "",
	"content": "After adding the pipeline, you can \u0026ldquo;Edit the pipeline Context\u0026rdquo; (sidebar).\nThen, you can:\n add or remove application. Jobs can use cds.app.* configuration and or remove an environment. Jobs can use cds.env.* configuration enable / disable Pipeline Mutex  "
},
{
	"uri": "/docs/concepts/cds_as_code/project/",
	"title": "Project",
	"tags": [],
	"description": "",
	"content": "Description A CDS project is the root entity for a team.\nIt brings together all your as-code entites ( workflows, actions, worker models)\nThe following resources can be created/linked on a project:\n Repository Manager: allow you to linked github, gitlab, bitbucket Repository: allow you to linked git repositories to your project and then trigger workflows VariableSet: allow you to create variableset for your workflows Notification: allow you to create notification  "
},
{
	"uri": "/docs/concepts/project/",
	"title": "Project",
	"tags": [],
	"description": "",
	"content": "A CDS Project brings together several entities such as pipelines, applications, workflows, environments. A project also allows to link one or more repository manager such as github, bitbucket, gitlab\u0026hellip;\nA project is often associated with one or more groups with differents ACLs.\nMetadata In a company, a project is a collection of a team\u0026rsquo;s workflows. This allows to release some statistics of use with metadata.\nA metadata is composed by a key and a value.\nExport CDS Projects:\ncdsctl admin metadata project export ## a file export_metadata_projects.csv is created The file export_metadata_projects.csv looks like :\nproject_key;project_name;last_modified;ou1;ou2 PRJ_KEY_A;My Fist Project;2019-06-21T17:52:36;foo;bar PRJ_KEY_B;Project B;2019-06-21T17:52:36;foo;bar2 PRJ_KEY_C;Project C;2019-06-21T17:52:37;foo;bar2 Here, ou1 and ou2 are two metadata keys. You can add more metadata by adding key on the first line and values on lines below.\nYou can import / create metadata:\ncdsctl admin metadata project import export_metadata_projects.csv Notice that exporting metadata on application \u0026amp; workflows will export metadata from project. On the example above, the metadata ou1 is set on all workflows and applications on the third projects.\n"
},
{
	"uri": "/docs/concepts/cds_as_code/rbac/project/",
	"title": "Project roles",
	"tags": [],
	"description": "",
	"content": "These roles allow users/groups to manage resources on a project\n read: Allow users/groups to list all resources defined inside a project manage: Allow users/groups to manage VCS and repository on a project manage-worker-model: Allow users/groups to create/update/delete a worker model manage-action: Allow users/groups to create/update/delete an action manage-workflow: Allow users/groups to create/update/delete a workflow  Yaml example:\nname: my-permission-name projects: - role: read all: true users: [foo,bar] groups: [grpFoo] - role: manage-worker-model users: [foo] projects: [PROJ_KEY1, PROJ_KEY2] List of fields:\n role: [mandatory]role to applied all: applied the permission on for all projects projects: list of projects key if there is no field all users: list of usernames groups: list of groups  "
},
{
	"uri": "/docs/concepts/cds_as_code/rbac/region/",
	"title": "Region roles",
	"tags": [],
	"description": "",
	"content": "These roles allow users/groups to manage a region or start job on a region\n list: Allow users/groups to list/get the given region manage: Allow users/groups to manage the given region execute: Allow users/groups to start jobs on the given region  Yaml example:\nname: my-permission-name regions: - role: execute region: nyc-infra all_users: true organization: US List of fields:\n role: [mandatory]role to applied region: [mandatory]the region name all_users: applied the permission for all users organizations: organization allowed users: list of usernames groups: list of groups  "
},
{
	"uri": "/docs/concepts/cds_as_code/project/repository_manager/",
	"title": "Repository Manager",
	"tags": [],
	"description": "",
	"content": "Description A repository manager is needed by your CDS project to link repositories.\nA project can be linked to one or more repository manager:\n github bitbucket server gitlab  Permission To be able to manage repository manager you will need the permission manage on your project\nAdd a repository manager with CLI cdsctl experimental project vcs import \u0026lt;PROJECT-KEY\u0026gt; \u0026lt;vcs_file.yaml\u0026gt;  PROJECT-KEY: The project key  Full CLI documentation here\n"
},
{
	"uri": "/hosting/requirements/",
	"title": "Requirements",
	"tags": [],
	"description": "",
	"content": "CDS API is the core component of CDS. To start CDS API, the only mandatory dependencies are a PostgreSQL database, a Redis server and a path to the directory containing other CDS binaries.\nThere is are two ways to set up CDS:\n as toml configuration over environment variables.  CDS API Third-parties At the minimum, CDS needs a PostgreSQL database \u0026gt;= 9.6 (version 14.0 recommended) and Redis \u0026gt;= 3.2. But for serious usage your may need:\n A Redis server or sentinels based cluster used as a cache and session store A LDAP Server for authentication A SMTP Server for mails A Kafka Broker to manage CDS events A OpenStack Swift Tenant to store builds artifacts A Vault server for CDS configuration A Consul to manage CDS Configuration  See Configuration template for more details\nSupported Platforms  Darwin i386 / amd64 FreeBSD amd64 Linux i386 / amd64 / arm(Raspberry Pi) / arm64 / ppc64le (Power 8 \u0026amp; 9) OpenBSD amd64 Solaris amd64 Windows amd64  You\u0026rsquo;ll find binaries on CDS Releases\n"
},
{
	"uri": "/docs/concepts/workflow/hooks/scheduler/",
	"title": "Scheduler",
	"tags": [],
	"description": "",
	"content": "On a Root Pipeline, you can add a \u0026ldquo;Hook Scheduler\u0026rdquo;. This kind of hook is useful when you want to launch a workflow periodically (for example each day at 1AM). You can use the Crontab Expression Format to configure your scheduler\u0026rsquo;s period. You can also configure a specific payload for your scheduler.\n"
},
{
	"uri": "/docs/tutorials/service-requirement-nginx/",
	"title": "Service Requirement NGINX",
	"tags": [],
	"description": "",
	"content": "Add the service requirement  Name: mynginx. This will be the service hostname Type: service Docker Image: nginx:1.11.1. This is the name of Docker image to link to current job  Add a step of type script Docker image nginx:1.11.1 start a nginx at startup. So, it\u0026rsquo;s now available on http://mynginx\ncurl -v -X GET http://mynginx Execute Pipeline\nSee output:\n"
},
{
	"uri": "/hosting/cds_services/",
	"title": "Understand the CDS µServices",
	"tags": [],
	"description": "",
	"content": "CDS is composed of two binaries: engine and worker, you can find them on CDS Releases for your os/architecture.\n worker is the binary used to run a CDS Job. engine is the binary used to run all CDS µServices.  CDS µServices A CDS µService is a process that can be launch by the engine binary.\n api: this is the main µService.  Each api must shared the same PostgreSQL and redis databases. All other CDS µServices have to communicate with api. The database user does not need to have the admin rights to create / alter tables.   cdn: the cdn service is dedicated to receive and store CDS\u0026rsquo;s logs and artifacts.  Each cdn must shared the same PostgreSQL and redis databases. The database user does not need to have the admin rights to create / alter tables.   ui: the ui service serves the CDS UI static files.  It\u0026rsquo;s the only service that can be accessed by end users. http path: /cdsapi - proxypass to reach CDS API. http path: /cdshooks - proxypass that can be used by some external integrations or webhooks.   hooks: this service manages Hooks.  You can multi-instantiate this service, it uses a redis to synchronize all tasks over all instances. Users and some integrations need to send HTTP requests to this service, you can use the proxypass /cdshooks on the CDS UI to reach this service.   vcs: The aim of this µService is to communicate with Repository Manager as GitHub, GitLab, Bitbucket\u0026hellip;  You can multi-instantiate this service, a redis is used to synchronize tasks over all instances.   repositories: this µService is used to enable the as-code feature.  Users can store CDS Files on their repositories. This service clones user repositories on local filesystem. You can\u0026rsquo;t multi-instantiate this service for now.   elasticsearch: user timeline and vulnerabilities computed are stored on a elasticsearch through this µService.  It\u0026rsquo;s optional unless you want theses features activated on your CDS.   hatchery:local: the local hatchery spawns CDS Workers locally.  All workers shares the same filesystem. Not recommended for production with shared.infra group   hatchery:swarm: the swarm hatchery spawn CDS Workers with docker.  A single process of hatchery:swarm can managed many docker daemons. You can use Service Requirement with this hatchery. This hatchery uses the worker model docker.   hatchery:openstack: the openstack hatchery creates Virtual Machine with a CDS Worker inside.  This hatchery uses the worker model openstack.   hatchery:kubernetes: the kubernetes hatchery creates a CDS Worker inside a Pod.  You can use Service Requirement with this hatchery. This hatchery uses the worker model docker.   hatchery:vsphere: the vSphere hatchery creates Virtual Machine with a CDS Worker inside.  This hatchery uses the worker model vsphere.   migrate: this µService is used to run database migrations to upgrade your CDS Installation.  The configuration needs a postgreSQL user with rights to create / alter tables on postgreSQL.    Single Process With a single CDS Engine process, you can run all µServices. This is very convenient for testing CDS locally but it\u0026rsquo;s not recommended for a production installation.\nMulti-Processes The binary engine can be used to launch in different processes each µService. This is recommended for a production installation.\nEach µService can be multi-instantiated, example:\n 6x $engine start api, each api shared the same PostgreSQL and redis. 6x $engine start cdn, each cdn shared the same PostgreSQL and redis. 3x $engine start ui. 3x $engine start hooks, each hooks shared the same redis. 3x $engine start vcs, each hooks shared the same redis. 3x $engine start elasticsearch. 1x $engine start repositories.  RAM resources needed Example of an installation for a production with 18.000 jobs launched per day:\n 6x $engine start api  RAM: 3Go per instance Redis: 128Mo   6x $engine start cdn  RAM: 3Go per instance Redis: 4Go   3x $engine start ui  RAM: 128Mo per instance   3x $engine start hooks  RAM: 256Mo per instance Redis: 256Mo   3x $engine start vcs  RAM: 256Mo per instance Redis: 256Mo   3x $engine start elasticsearch  RAM: 256Mo per instance   1x $engine start repositories  RAM: 256Mo per instance   1x $engine start migrate  RAM: 128Mo per instance   hatcheries: 256Mo per instance  "
},
{
	"uri": "/docs/tutorials/worker_model-docker/docker-customized/",
	"title": "With your own Docker image",
	"tags": [],
	"description": "",
	"content": "A worker model of type docker can be spawned by a Hatchery Docker Swarm\nSetup Docker Worker Model with your own image In this example, we will build a Docker model able to build an AngularJS application with webfonts. To create webfonts, a grunt task (optionally) requires fontforge and ttfautohint.\nThe following tools must be included in the model:\n Node.js and npm bower grunt-cli gulp-cli fontforge ttfautohint  We will use the official nodejs image from Docker. In this image, there is already a user named node. For the example, we will compile ttfautohint.\nPrerequisite To build a Docker model, you need:\n your favorite text editor a sane installation of Docker https://docs.docker.com/engine/installation/  Dockerfile Copy this content in a file named Dockerfile\n# User official Node.js Docker imageFROMnode:6.10.1#Answer \u0026#39;yes\u0026#39; to each questionENV DEBIAN_FRONTEND noninteractive# Upgrade the debian packagesRUN (apt-get update \u0026amp;\u0026amp; apt-get upgrade -y -q \u0026amp;\u0026amp; apt-get -y -q autoclean \u0026amp;\u0026amp; apt-get -y -q autoremove)#The official image comes with npm; so we can use it to install some packagesRUN npm install -g grunt-cli gulp-cli bower# Install fontforge for our specific needRUN apt-get install -y fontforge# Install packages and compile ttfautohint (still for our specific need)RUN apt-get install -y libharfbuzz-dev libfreetype6-dev libqt4-dev\\  \u0026amp;\u0026amp; cd /tmp \\  \u0026amp;\u0026amp; curl -L http://download.savannah.gnu.org/releases/freetype/ttfautohint-1.6.tar.gz |tar xz\\  \u0026amp;\u0026amp; cd ttfautohint-1.6\\  \u0026amp;\u0026amp; ./configure\\  \u0026amp;\u0026amp; make\\  \u0026amp;\u0026amp; make install# Change user. If you do not specify this command, the user will be root, and in our case,# Bower will shout as it cannot be launched by rootUSERnode# Specify a working directory on which the current user has write access# Remember, a curl command will be, first, executed to download the workerWORKDIR/home/nodeBuild it and push it from you shell, type the following command to build the Docker image:\ndocker build --no-cache --pull -t registry.my.infra.net/my/beautiful/worker:latest . If you want to test it, you can launch your Docker in bash mode:\ndocker run -it registry.my.infra.net/my/beautiful/worker:latest /bin/bash pwd fontforge -v exit Now push it\ndocker push registry.my.infra.net/my/beautiful/worker:latest Register your model in CDS  In the UI, click on the wheel on the hand right top corner and select *workers\u0026quot; (or go the the route #/worker) At the bottom of the page, fill the form  Name of your worker My Beautiful type docker image registry.my.infra.net/my/beautiful/worker:latest pattern: if you aren\u0026rsquo;t an administrator select a pattern for your configuration script (CDS provide default pattern for Linux environment called basic_unix) shell command: if you are an administrator in the main shell command you can indicate sh -c for a Unix environment. command: is the main worker command, typically on a Unix system curl {{.API}}/download/worker/linux/$(uname -m) -o worker --retry 10 --retry-max-time 120 -C - \u0026amp;\u0026amp; chmod +x worker \u0026amp;\u0026amp; exec ./worker to see all the available variables to interpolate for your worker parameters click here   Click on Add button and that\u0026rsquo;s it  Now you can specify this model in prerequisite on your job. Create a new prerequisite of type \u0026ldquo;model\u0026rdquo;, then choose your worker model in list\n If you want to specify an image using a private registry or a private image. You need to check the private checkbox and fill credentials in username and password to access to your image. And if your image is not on docker hub but from a private registry you need to fill the registry info (the registry api url, for example for docker hub it\u0026rsquo;s https://index.docker.io/v1/ but we fill it by default).  "
},
{
	"uri": "/docs/concepts/files/worker_model-syntax/",
	"title": "Worker Model configuration file",
	"tags": [],
	"description": "",
	"content": "Example:\nname: go-official-1.17 group: shared.infra image: golang:1.17 description: official from https://hub.docker.com/_/golang/ type: docker pattern_name: basic_unix Import a worker model:\ncdsctl worker model import ./go-official-1.17.yml or with a remote file:\ncdsctl worker model import https://raw.githubusercontent.com/ovh/cds/v0.54.1/contrib/worker-models/go-official-1.17.yml   If you want to specify an image using a private registry or a private image, you need to fill credentials in field username and password to access your image. And if your image is not on docker hub but from a private registry, you need to fill the registry info (the registry api url, for example for docker hub it\u0026rsquo;s https://index.docker.io/v1/ but we fill it by default).  "
},
{
	"uri": "/docs/concepts/cds_as_code/entities/workflow/",
	"title": "Workflow",
	"tags": [],
	"description": "",
	"content": "Description The workflow is the main entity in CDS. It allows you to chain jobs, using conditional branching.\nAs Code directory A workflow is described directly on your repository inside the directory .cds/workflows/.\nPermission The permission manage-workflow on your project is mandatory to manage a workflow.\nFields name: cds repository: vcs: github name: ovh/cds commit-status: ... on: [push]  integrations: [my-artifactory] stages: ... jobs: ... env: VAR_1: value VAR_2: value2 gates: ...   *name: The name of your workflow *on: Allow you to define hooks to trigger your workflow *jobs: Jobs definitions integrations: Integrations linked to the workflow repository: The repository linked to the workflow commit-status: Commit status created by CDS on workflow run stages: List of stages env: Define environment variable for the whole workflow gates: Manual gate for your workflow  *mandatory fields\nRepository The repository linked to you workflow allows you to:\n Listen event to trigger the workflow through the field on Use actions as checkout that simply git clone action  Commit-status: A commit build status is always sent by CDS with default values. You can customize the title and description of the build status with the commit-status attribute.\ncommit-status: title: foo description: bar On Available hooks:\n push: trigger the workflow on repository push event pull-request: trigger the workflow on repository pull-request event, see types of pull-request below. model-update: trigger the workflow is a worker model used in the worker has been updated workflow-update: trigger the workflow is the workflow definition was updated  model-update and workflow-update are only available is the workflow definition is different from the repository field of your workflow. The hook will be triggered when default branch is updated, and will trigger the default branch of the destination repository\nthe on field has 2 formats\nArray of string: on: [push,pull-request,model-update,workflow-update] Map on: push: branches: [main,develop] paths: [^src/.*/.*.java$] model-update: models: [MYPROJ/github/ovh/resources/mymodel] target_branch: main pull-request: comment: \u0026#34;a comment here\u0026#34; types: [\u0026#34;opened\u0026#34;,\u0026#34;reopened\u0026#34;,\u0026#34;closed\u0026#34;,\u0026#34;edited\u0026#34;] branches: [main,develop] paths: [^src/.*/.*.java$] pull-request-comment: comment: \u0026#34;a comment here\u0026#34; types: [\u0026#34;created\u0026#34;,\u0026#34;deleted\u0026#34;,\u0026#34;edited\u0026#34;] branches: [main,develop] paths: [^src/.*/.*.java$] workflow-update: target_branch: main  push.branches: branches filter push.paths: file paths filter pull-request.comment: comment written by cds at workflow end if it was triggered by a pull-request event. pull-request.types: types of pull-request event that can trigger the workflow. Could be: opened, reopened, closed, edited. pull-request.branches: branches filter pull-request.paths: file paths filter pull-request-comment.comment: comment written by cds at workflow end if it was triggered by a pull-request-comment event. pull-request-comment.types: types of pull-request-comment event that can trigger the workflow. Could be: created, deleted, edited. pull-request-comment.branches: branches filter pull-request-comment.paths: file paths filter model-update.models: worker model filter model-update.target_branch: destination repository branch to trigger workflow-update.target_branch: destination repository branch to trigger  Integrations Allow a job to use an project integration.\nIntegration can be put directly on a job or at the workflow top level to be applied on all jobs\nSupported integrations:\n Artifactory  jobs Jobs field is a map that contains all the jobs of your workflow. The key of the map is the name that will be display in CDS UI\njobs: myJob: runs-on: ./cds/worker-models/my-custom-ubuntu.yml vars: [varset1, varset2] integrations: [my-artifactory] steps: run: echo \u0026#39;Hello World\u0026#39; mySecondJob: runs-on: ./cds/worker-models/my-custom-ubuntu.yml needs: [myJob] steps: run: echo \u0026#39;Bye\u0026#39;   *runs-on: define on which worker model your job will be executed *steps: the list of step to execute name: job description needs: the list of jobs that need to be executed before this one vars: the list of variable set available in the job integrations: integration linked to the job region: the region on which the job must be triggered if: condition that must be satisfied to run the job. if and gate field cannot be set together gate: manual gate definition to use.if and gate field cannot be set together inputs: input of the job. If used, only these inputs can be used in the job steps. All others contexts cannot be used stage: link the job to a stage continue-on-error: if true, the job will be considered as Success when it fails integrations: link project integrations to your job. Available integration: artifactory strategy: add a run strategy services: add container services to run with your job. env: define environment variables to inject to your job. It overrides environment variable with the same name defined at the workflow level  Step A step represent\njobs: myjob: steps: - id: stepIdentifier run: echo \u0026#39;Hello World\u0026#39; # cannot be used with `uses` uses: actions/checkout # cannot be used with `run` with: ref: develop sha: aefd1235 if: failure() continue-on-error: true env: NEW_VAR: myValue   id: step identifier run: script to execute. Cannot be used simultaneously with uses field uses: action to execute. Cannot be used simultaneously with run field with: allow you to customize action input. Must be used with uses field if: condition that must be satisfied to execute the step continue-on-error: if true, the step will be considered as Success when it fails env: define environment variables to inject to your job. It overrides environment variable with the same name defined oat the workflow and job level  Inputs Inputs allow you to define a list of variable that will be used in your job. If you use it all others contexts will be unavailable. This allows you to exactly control the inputs of your job\njobs: myjob: inputs: inp1: ${{ git.ref }} inp2: ${{ cds.workflow }} inp3: My Value Strategy Allow you to define a execution strategy for your job.\nAvailable strategy:\n matrix  jobs: myjob: strategy: matrix: version: [\u0026#34;go1.21\u0026#34;, go1.22] os: [ubuntu, debian] steps: run: echo ${{ matrix.version }} - ${{ matrix.os }}  The matrix strategy allows you to template a job with matrix variables that will automatically create multiple jobs during the execution\nIn this example, CDS will create 4 jobs during execution with the given matrix context:\n job1: matrix.Version = go1.21 / matrix.os = ubuntu job2: matrix.Version = go1.21 / matrix.os = debian job3: matrix.Version = go1.22 / matrix.os = ubuntu job4: matrix.Version = go1.22 / matrix.os = debian  Services Service are docker containers spawned with your job in a private network. For example it allows you to start a postreSQL DB for your tests\njobs: init: runs-on: .cds/worker-models/buildpack-deps-buster.yml services: myngnix: image: nginx:1.13 env: NGINX_PORT: 80 readiness: command: curl --fail http://myngnix:80 interval: 10s timeout: 5s retries: 5 mypostgres: ...   image: The docker image of the service env: Environment variable to inject in the service readiness: Allows you to configure a readiness test for your service. Your job will wait for it before starting the steps execution  command: Command to execute to check the readiness of the service interval: Interval between 2 tests timeout: Command timeout before failing retries: Number of retries    Gates Gates are hooks that allow you to manually trigger a job under certain conditions\ngates: first-gate: if: ${{ git.ref == \u0026#39;main\u0026#39; \u0026amp;\u0026amp; gate.approve }} inputs: approve: type: boolean reviewers: groups: [release-team] jobs: myGateJob: gate: first-gate  if: condition that must be satisfied to pass the gate inputs:  type: type of the input (boolean, number, text)   reviewers: Allow you to define who can trigger the gate  groups: list of groups that are allowed to trigger the gate users: list of users that are allowed to trigger the gate    Stages The use of stages allows you to structure and organize jobs in a modular way\nstages: my-stage: my-stage2: needs: [my-stage]  needs: the list of stages that need to be executed before this one  Conditions Condition can be use at different level but share the same syntaxe\n workflow gate job.if step.if  You can use all contexts to create your condition\nSyntax if: ${{ git.ref == \u0026quot;master\u0026quot; \u0026amp;\u0026amp; cds.job == \u0026quot;MyJob\u0026quot; }} or if: git.ref == \u0026quot;master\u0026quot; \u0026amp;\u0026amp; cds.job == \u0026quot;MyJob\u0026quot; Operators list  == != \u0026gt; \u0026lt; \u0026gt;= \u0026lt;= || \u0026amp;\u0026amp; !  "
},
{
	"uri": "/docs/concepts/cds_as_code/rbac/workflow/",
	"title": "Workflow roles",
	"tags": [],
	"description": "",
	"content": "These roles allow users/groups to realize action on workflows\n trigger: Allow users/groups to trigger workflows  Yaml example:\nname: my-permission-name workflows: - role: trigger all_users: true project: MYPROJECT workflows: [wkf1,wkf2] all_workflows: false users: [foo,bar] groups: [grpFoo] List of fields:\n role: [mandatory]role to applied all_users: applied the permission for all users project: [mandatory]the key of the project that contains the workflows workflows: list of workflows inside the given project all_workflows: applied the permission on all workflow inside the given project users: list of usernames groups: list of groups  "
},
{
	"uri": "/development/contribute/documentation/",
	"title": "Write documentation",
	"tags": [],
	"description": "",
	"content": "Documentation https://ovh.github.io/cds is generated with Hugo. Source are under https://github.com/ovh/cds/tree/v0.54.1/docs/content\nWrite / Generate / Test documentation:\n Download release Hugo Version Extended v0.54.0 https://github.com/gohugoio/hugo/releases/tag/v0.54.0 - put hugo binary in your PATH Download CDS Binaries: cdsctl, engine, worker from https://github.com/ovh/cds/releases/latest Clone CDS repository: git clone https://github.com/ovh/cds.git inside ${CDS_SOURCES} Generate documentation with Hugo  cd ${CDS_SOURCES} make install # to recompile all CDS binaries GEN_PATH=${CDS_SOURCES}/docs/content/docs/components make doc cd ${CDS_SOURCES}/docs hugo server  go to http://localhost:1313/  "
},
{
	"uri": "/docs/concepts/worker-model/ascode/",
	"title": "[Experimental] Ascode Worker Model",
	"tags": [],
	"description": "",
	"content": "Description Worker model can be defined ascode. That\u0026rsquo;s mean the definition of the worker model will be in a git repository, and each time you will push something, CDS will update it.\nPrerequisite  You must use the new CDS permission system RBAC  Files To be detected by CDS, your worker model files must be in this directory .cds/worker-models/\n*: mandatory field\nDocker name: my-worker-model-name description: my description osarch: linux/amd64 type: docker spec: image: myregistry.org/ns/myworkermodel:1.0 username: foo password: bar envs: myvar: myvalue Fields:\n *name: Name of the worker model description: Description of the worker model *type: Type of worker model *osarch: OS and architecture of the model *spec.image: Docker image name spec.username: Docker registry username spec.password: Docker registry password. The field must be encrypted with cdsctl spec.envs: Additional environment variables  Openstack name: my-worker-model-name description: my description type: openstack osarch: linux/amd64 spec: image: Ubuntu flavor: \u0026#34;b2-4\u0026#34; Fields:\n *name: Name of the worker model description: Description of the worker model *osarch: OS and architecture of the model *type: Type of worker model *spec.image: Openstack image name *spec.flavor: Openstack flavor to use  vSphere name: my-worker-model-name description: my description osarch: linux/amd64 type: vsphere spec: image: Ubuntu username: foo password: bar Fields:\n *name: Name of the worker model description: Description of the worker model *osarch: OS and architecture of the model *type: Type of worker model *spec.image: vSphere template name *spec.username: username to use to connect to the VM *spec.password: password to use to connect to the VM. The field must be encrypted with cdsctl  "
},
{
	"uri": "/docs/concepts/cds_as_code/entities/action/",
	"title": "Action",
	"tags": [],
	"description": "",
	"content": "Description An action is a sequence of steps that can be used within a job\nAs Code directory An action is described directly on your repository inside the directory .cds/actions\nPermission To be able to manage actions you will need the permission manage-action on your project\nFields name: test-parent-action2 description: simple parent action as code inputs: name: description: my description required: true default: Steven workflow: description: event receive default: ${{ cds.workflow }} runs: steps: - run: | echo \u0026#34;Welcome ${{ inputs.name }}  *name: The name of your workflow descrption: information about the action inputs: action inputs  inputs.description required: indicates if the inputs is mandatory default: default value   runs.steps: the list of steps executed by the action  "
},
{
	"uri": "/docs/concepts/files/action-syntax/",
	"title": "Action configuration file",
	"tags": [],
	"description": "",
	"content": "Hello World Action\nversion: v1.0 name: CDS_HelloWorld description: Hello World Action steps: - name: Initialization script: - echo \u0026#34;Hello World\u0026#34; With a real action CDS_SonarScanner: this action contains parameters with default values and some of them are advanced parameters. Two plugins are also used in the steps: plugin-download and plugin-archive\nversion: v1.0 name: CDS_SonarScanner description: Run Sonar analysis. You must have a file sonar-project.properties in your source directory. parameters: sonar-project.properties: type: text default: |-sonar.projectKey={{.cds.application}} sonar.projectName={{.cds.application}} sonar.projectVersion={{.git.hash}} sonar.sources=. sonar.exclusions=**/*_test.go,**/vendor/** sonar.tests=. sonar.test.inclusions=**/*_test.go sonar.test.exclusions=**/vendor/** description: sonar-project.properties file sonarBranch: type: string default: \u0026#39;{{.git.branch}}\u0026#39; description: The Sonar branch (e.g. master) sonarDownloadURL: type: string default: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-{{.sonarVersion}}-linux.zip description: The download URL of Sonar CLI advanced: true sonarPassword: type: string default: \u0026#39;{{.cds.proj.sonarPassword}}\u0026#39; description: The Sonar server\u0026#39;s password advanced: true sonarURL: type: string default: \u0026#39;{{.cds.proj.sonarURL}}\u0026#39; description: The URL of the Sonar server advanced: true sonarUsername: type: string default: \u0026#39;{{.cds.proj.sonarUsername}}\u0026#39; description: The Sonar server\u0026#39;s username advanced: true sonarVersion: type: string default: 3.2.0.1227 description: SonarScanner\u0026#39;s version to use advanced: true workspace: type: string default: \u0026#39;{{.cds.workspace}}\u0026#39; description: The directory where your project is (e.g. /go/src/github.com/ovh/cds) requirements: - binary: bash - plugin: plugin-archive - plugin: plugin-download steps: - name: Initialization script: - \u0026#39;#!/bin/bash\u0026#39; - set -x - \u0026#39;# Installation\u0026#39; - mkdir -p {{.workspace}}/opt - plugin-download: filepath: \u0026#39;{{.workspace}}/opt/sonar-scanner-cli-{{.sonarVersion}}-linux.zip\u0026#39; url: \u0026#39;{{.sonarDownloadURL}}\u0026#39; - plugin-archive: action: uncompress destination: \u0026#39;{{.workspace}}/opt/\u0026#39; source: \u0026#39;{{.workspace}}/opt/sonar-scanner-cli-{{.sonarVersion}}-linux.zip\u0026#39; - script: - \u0026#39;#!/bin/bash\u0026#39; - set -x - \u0026#34;\u0026#34; - \u0026#39;# Installation\u0026#39; - ln -s {{.workspace}}/opt/sonar-scanner-{{.sonarVersion}}-linux {{.workspace}}/opt/sonar - export PATH=\u0026#34;${PATH}:{{.workspace}}/opt/sonar/bin\u0026#34; - \u0026#34;\u0026#34; - \u0026#39;# Runtime\u0026#39; - export SONAR_SCANNER_OPTS=\u0026#34;-Xmx1024m\u0026#34; - cd {{.workspace}} - cat \u0026lt;\u0026lt;EOF \u0026gt; sonar-project.properties - \u0026#39;{{.sonar-project.properties}}\u0026#39; - EOF - \u0026#34;\u0026#34; - sonar-scanner -Dsonar.host.url={{.sonarURL}} -Dsonar.login={{.sonarUsername}} -Dsonar.password={{.sonarPassword}} -Dsonar.branch={{.sonarBranch}} -Dsonar.scm.disabled=true Import a worker model:\ncdsctl worker model import ./cds-docker-package.yml Or with a remote file:\ncdsctl action import https://raw.githubusercontent.com/ovh/cds/v0.54.1/contrib/actions/cds-docker-package.yml "
},
{
	"uri": "/docs/actions/",
	"title": "Actions",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/docs/concepts/files/application-syntax/",
	"title": "Application configuration file",
	"tags": [],
	"description": "",
	"content": "An Application allows you to enable some features of CDS within a workflow:\n Variables Keys VCS Deployment  The application configuration format is as following:\nversion: v1.0 name: my-application variables: artifact.name: type: string value: my-application docker.image: value: my-org/my-application docker.registry: value: hub.docker.com keys: app-mySSHKey: type: ssh repo: my-org/my-application vcs_server: github vcs_connection_type: ssh vcs_ssh_key: app-mySSHKey deployments: my-kubernetes-cluster: timeout: value: 180 namespace: my-namespace helm_chart: value: deploy/helm/ helm_values: type: deploy/helm/values.yaml helm_version: type: 2.12.2 Variables Define application scoped variables as a dictionary. Each Variable must have a type and a value. You will be able to play with those variables using {{.cds.app.my-variable}} and CDS_APP_MY_VARIABLE. The recognized types are string, password, text, boolean or number. By default the type is string.\nTo be able to write secret in the CDS yaml files, you have to encrypt data within your CDS project.\n$ cdsctl encrypt MYPROJECT my-data my-super-secret-value my-data: 01234567890987654321 The command returns the value: 01234567890987654321. You can use this value in a configuration file.\nKeys Keys managed in CDS in are from two types: SSH and PGP. Let\u0026rsquo;s import an application with a SSH Key. Those key could be important to manage your Git repositories.\n➜ ~ cat app.yml name: myapp keys: app-mysshkey: type: ssh ➜ ~ cdsctl application import MYPROJ app.yml Application myapp successfully created SSH key app-mysshkey created on application myapp CDS has just created a new SSH keypair on its own. To be able to keep this keypair for the future, you can gather an identifier by running an export.\n➜ ~ cdsctl application export FSAMIN myapp version: v1.0 name: myapp keys: app-mysshkey: type: ssh value: 19a2ca3271854c3183aabb4af9df05e1 Note that each time you want to import the application and keep the keypair as it, you must provide the exported value.\nIf you want to keep your application in your git repository and let CDS configure and reconfigure the application automatically, we suggest to use the regen option. With this option CDS will generate the SSH keypair if it doesn\u0026rsquo;t exist, and won\u0026rsquo;t touch it on each import.\nname: myapp keys: app-mysshkey: type: ssh regen: false VCS To be able to link an application to a VCS, you must have at least one repository manager properly configured on your CDS instance. Each application in CDS can be linked to one repository on a repository manager.\nDefining your VCS setup on an application will allow to benefit for the deep integration of CDS and the Repository Manager (such as GitHub). So you would be able to setup webhooks, browse through commits and publish your releases easily.\n   Setting Definition     vcs_server Set the name of the repository manager on which on repository is hosted   repo The fullname of the repositiry i.e myorg/myrepo   vcs_connection_type Define the way you would like to checkout the code. Allowed values are ssh or https   vcs_ssh_key If you set vcs_connection_type = ssh, choose the ssh key you want to use to git clone   vcs_user If you set vcs_connection_type = http, set the HTTP Username   vcs_password If you set vcs_connection_type = http, set the HTTP Password   vcs_pgp_key If you want to commit and sign, you can choose here a PGP Key    Please note that you can use key at project or application level. Default vcs_connection_type is https. If your repository is public, you can omit vcs_connection_type, vcs_user and vcs_password.\nExample version: v1.0 name: myapp repo: myorg/myapp vcs_server: github vcs_connection_type: ssh vcs_ssh_key: proj-ssh-key vcs_pgp_key: proj-pgp-key Now with this setup you will be able to use the actions CheckoutApplication and Release in your pipelines.\nDeployment In this section, you can define the setup to deploy your application on a platform. To be able to setup it, you must have at least one integration supporting deployment properly configured on your CDS instance.\nThe deployments section is the list of the settings you can use to deploy to several platforms. For instance, if you want to be able to be deploy the same application, from the same helm chart with subtle changes in variables, depending on the cluster, you can set the following configuration.\nversion: v1.0 name: myapp deployments: my-kubernetes-cluster-A: namespace: my-namespace-A helm_chart: value: deploy/helm/ helm_values: type: deploy/helm/values-cluster-A.yaml helm_version: type: 2.12.2 my-kubernetes-cluster-B: namespace: my-namespace-B helm_chart: value: deploy/helm/ helm_values: type: deploy/helm/values-cluster-B.yaml helm_version: type: 2.12.2 The list of the available deployment platform is available from the Web UI on the project / integration section, or with the command cdsctl project integration list\n➜ ~ cdsctl project integration list MYPROJ +-----------------------------+ | NAME | +-----------------------------+ | my-kubernetes-cluster-A | | my-kubernetes-cluster-B | +-----------------------------+ The settings depend on the integration. Please refer to the integration documentation.\nNow you are ready to use the DeployApplication action in your pipelines.\n"
},
{
	"uri": "/docs/tutorials/step_by_step_build_deploy/",
	"title": "Build &amp; Deploy a standard application",
	"tags": [],
	"description": "",
	"content": " In this tutorial, you will create a CDS Workflow with the Web UI.\n Create a workflow using two pipelines: one for building, another for deploying Discover application and environments concepts. Discover Run Conditions.   This tutorial seems very long, don\u0026rsquo;t worry, it\u0026rsquo;s very detailed and it will take you about 10-15 minutes to try it.\nYou will play with many CDS Concepts, discover the reuse of pipelines, how to play with CDS Variables.\n 1 - Create your CDS project Let\u0026rsquo;s create a project. On the top navbar, click on \u0026lsquo;Create a project\u0026rsquo;.\n Enter a Project Name The project key will be useful when you want to use cdsctl. Click on \u0026lsquo;Create\u0026rsquo; button.   view screenshots...     2 - Add a repository manager on your project The project is now create, you have to link a repository manager. Be sure to have a Repository manager as GitHub, Bitbucket Server or GitLab set up on your CDS Instance.\n Select \u0026lsquo;Advanced\u0026rsquo; section In the section \u0026lsquo;Link to a repository manager\u0026rsquo;, select \u0026lsquo;github\u0026rsquo;, then click on \u0026lsquo;Connect\u0026rsquo; A popup is displayed, Click on \u0026lsquo;Click here\u0026rsquo; to finalize the link with GitHub. By doing that, you allow CDS to create hook on GitHub.   view screenshots...   Select \u0026lsquo;Advanced\u0026rsquo; section In the section \u0026lsquo;Link to a repository manager\u0026rsquo;, select \u0026lsquo;github\u0026rsquo;, then click on \u0026lsquo;Connect\u0026rsquo; A popup is displayed, Click on \u0026lsquo;Click here\u0026rsquo; to finalize the link with GitHub. By doing that, you allow CDS to create hook on GitHub. Here, GitHub is well linked on your CDS project.\n  3 - Create an application, link it to a Git Repository You\u0026rsquo;ve got a project, linked to GitHub. Let\u0026rsquo;s create an application.\nA CDS Application is useful to have a link to a Git Repository.\n Go on Project -\u0026gt; Applications tab, click on \u0026lsquo;Create a new application\u0026rsquo; Enter application name, here \u0026lsquo;my-java-app\u0026rsquo; Go on Advanced tab, select a Repository Expand configuration, select \u0026lsquo;https\u0026rsquo;. If your repository is public, you can keep empty fields, then click on \u0026lsquo;Save\u0026rsquo;   view screenshots...   Go on Project -\u0026gt; Applications tab, click on \u0026lsquo;Create a new application\u0026rsquo; Enter application name, here \u0026lsquo;my-java-app\u0026rsquo; Go on Advanced tab, select a Repository Expand configuration, select \u0026lsquo;https\u0026rsquo;. If your repository is public, you can keep empty fields, then click on \u0026lsquo;Save\u0026rsquo;   4 - Add a variable on your application You\u0026rsquo;ve got an application, let\u0026rsquo;s create an application variable. We will use it further in a Job.\n Select the variables tab, name \u0026lsquo;my-variable\u0026rsquo;, type \u0026lsquo;string\u0026rsquo;, value \u0026lsquo;my-value\u0026rsquo; Then click on \u0026lsquo;Save\u0026rsquo;   view screenshots...   Select the variables tab, name \u0026lsquo;my-variable\u0026rsquo;, type \u0026lsquo;string\u0026rsquo;, value \u0026lsquo;my-value\u0026rsquo; Then click on \u0026lsquo;Save\u0026rsquo;   5 - Create the workflow Here we go, you will create your first workflow.\n Go to Project -\u0026gt; Workflows tab Enter the Workflow name, then click on Next You have now to choose the first pipeline. As you don\u0026rsquo;t have a pipeline yet, you will create a new one, named \u0026lsquo;build-pipeline\u0026rsquo;. Click on Next Now, you have to select an application. Choose your application \u0026lsquo;my-java-app\u0026rsquo;, then click on Next We don\u0026rsquo;t need an environment for the build pipeline, Click on \u0026lsquo;Finish\u0026rsquo;   view screenshots...   Go to Project -\u0026gt; Workflows tab Enter the Workflow name, then click on Next You have now to choose the first pipeline. As you don\u0026rsquo;t have a pipeline yet, you will create a new one, named \u0026lsquo;build-pipeline\u0026rsquo;. Click on Next Now, you have to select an application. Choose your application \u0026lsquo;my-java-app\u0026rsquo;, then click on Next We don\u0026rsquo;t need an environment for the build pipeline, Click on \u0026lsquo;Finish\u0026rsquo; The workflow is now created   6 - Edit your first pipeline for building the application The workflow is initialized with an empty pipeline named \u0026lsquo;build-pipeline\u0026rsquo;. You have now to create your first job.\n In your workflow, select the pipeline \u0026lsquo;build-pipeline\u0026rsquo;, then click on \u0026lsquo;Edit the pipeline\u0026rsquo;. Click on \u0026lsquo;Add job\u0026rsquo; Add the first step \u0026lsquo;CheckoutApplication\u0026rsquo; Add a second step \u0026lsquo;Script\u0026rsquo;. The content of the script is `mvn package`` The third step is \u0026lsquo;Artifact Upload\u0026rsquo;, to upload your built binary And the last step is \u0026lsquo;JUnit\u0026rsquo;. This step is \u0026lsquo;always executed\u0026rsquo; and let you to see test results on UI. Last thing about the \u0026lsquo;build-pipeline\u0026rsquo;: as you use mvn, you probably want to add mvn and java. Click on Requirements link then add binaries prerequisites.   view screenshots...   In your workflow, select the pipeline \u0026lsquo;build-pipeline\u0026rsquo;, then click on \u0026lsquo;Edit the pipeline\u0026rsquo;. Click on \u0026lsquo;Add job\u0026rsquo;. Add the first step \u0026lsquo;CheckoutApplication\u0026rsquo; Add the first step \u0026lsquo;CheckoutApplication\u0026rsquo; Add a second step \u0026lsquo;Script\u0026rsquo;. The content of the script is `mvn package`` The third step is \u0026lsquo;Artifact Upload\u0026rsquo;, to upload your built binary And the last step is \u0026lsquo;JUnit\u0026rsquo;. This step is \u0026lsquo;always executed\u0026rsquo; and let you to see test results on UI. Last thing about the \u0026lsquo;build-pipeline\u0026rsquo;: as you use mvn, you probably want to add mvn and java. Click on Requirements link then add binaries prerequisites.   7 - Add a Hook on your workflow In this example, we create a Workflow to build \u0026amp; deploy an application. This is a standard Continuous Integration \u0026amp; Continuous Delivery Workflow.\nSo, we have to trigger this workflow on each commit, on every git branches. This will be useful to compile code from all developers and deploy master branch if the build is Ok.\nThe application is linked to a GitHub Git Repository, we have two choices to trigger automatically the workflow:\n add a Git Repository Webhook or add a Git Repository Poller.  The difference between both is simple: a Git Repository Webhook does not work if your CDS Instance is not reachable from GitHub. So, we have to add a Git Repository Poller\n Select the pipeline root, then click on \u0026lsquo;Add a hook\u0026rsquo; Choose a Git Repository Poller The poller is added and linked to your first pipeline   view screenshots...   Select the pipeline root, then click on \u0026lsquo;Add a hook\u0026rsquo; Choose a Git Repository Poller The poller is added and linked to your first pipeline   8 - Run your workflow It\u0026rsquo;s time to launch your Workflow, click on the green button \u0026lsquo;Run workflow\u0026rsquo;.\n On the popup, you can choose the git branch, then click on green button \u0026lsquo;OK\u0026rsquo; The first pipeline is building (you can double-click on it, it\u0026rsquo;s a shortcut), you can see logs. The pipeline is done, it\u0026rsquo;s a success. Click on \u0026lsquo;Test\u0026rsquo; tab, you can see Unit Tests. Click on \u0026lsquo;Artifact\u0026rsquo;, you see the built artifact.   view screenshots...   On the popup, you can choose the git branch, then click on green button \u0026lsquo;OK\u0026rsquo; The first pipeline is building (you can double-click on it, it\u0026rsquo;s a shortcut), you can see logs. The pipeline is done, it\u0026rsquo;s a success. Click on \u0026lsquo;Test\u0026rsquo; tab, you can see Unit Tests. Click on \u0026lsquo;Artifact\u0026rsquo;, you see the built artifact.   9 - Add a pipeline for deploying your application on staging Ok, we have an artifact to deploy. Let\u0026rsquo;s create a deploy pipeline and trigger it after the build pipeline.\n Select the \u0026lsquo;build-pipeline\u0026rsquo; Create a \u0026lsquo;deploy-pipeline\u0026rsquo;, then click on \u0026lsquo;Next\u0026rsquo; Select the application \u0026lsquo;my-java-app\u0026rsquo;, then click on \u0026lsquo;Next\u0026rsquo; Create a new environment named \u0026lsquo;staging\u0026rsquo;, then click on \u0026lsquo;Finish\u0026rsquo; The workflow contains now two pipelines   view screenshots...   Select the build pipeline Create a \u0026lsquo;deploy-pipeline\u0026rsquo;, then click on \u0026lsquo;Next\u0026rsquo; Select the application \u0026lsquo;my-java-app\u0026rsquo;, then click on \u0026lsquo;Next\u0026rsquo; Create a new environment named \u0026lsquo;staging\u0026rsquo;, then click on \u0026lsquo;Finish\u0026rsquo; The workflow contains now two pipelines   10 - Add a pipeline for deploying your application on production Same as previous, we will add a pipeline to deploy in production.\n Select the \u0026lsquo;deploy-pipeline\u0026rsquo; Select the \u0026lsquo;deploy-pipeline\u0026rsquo;, then click on \u0026lsquo;Next\u0026rsquo; Select the application \u0026lsquo;my-java-app\u0026rsquo;, then click on \u0026lsquo;Next\u0026rsquo; Create a new environment named \u0026lsquo;production\u0026rsquo;, then click on \u0026lsquo;Finish\u0026rsquo; The workflow contains now two pipelines   view screenshots...   Select the \u0026lsquo;deploy-pipeline\u0026rsquo; Select the \u0026lsquo;deploy-pipeline\u0026rsquo;, then click on \u0026lsquo;Next\u0026rsquo; Select the application \u0026lsquo;my-java-app\u0026rsquo;, then click on \u0026lsquo;Next\u0026rsquo; Create a new environment named \u0026lsquo;production\u0026rsquo;, then click on \u0026lsquo;Finish\u0026rsquo; The workflow contains now three pipelines   11 - Add run conditions before deploying So, now, you have a workflow to build your application and deploy it on your staging environment. But, we don\u0026rsquo;t want to deploy all builds, from all branches, we want to deploy only the master branch. Let\u0026rsquo;s create a Run Condition on git.branch, to trigger automatically a deployment on staging if git branch is equals to master.\n Select the \u0026lsquo;deploy-pipeline\u0026rsquo;, then click on \u0026lsquo;Edit run Conditions\u0026rsquo; Add a run condition \u0026lsquo;git.branch\u0026rsquo;, with value \u0026lsquo;master\u0026rsquo;, click on \u0026lsquo;Plus\u0026rsquo; button Click on \u0026lsquo;Save\u0026rsquo;   view screenshots...   Select the \u0026lsquo;deploy-pipeline\u0026rsquo;, then click on \u0026lsquo;Edit run Conditions\u0026rsquo; Add a run condition \u0026lsquo;git.branch\u0026rsquo;, with value \u0026lsquo;master\u0026rsquo;, click on \u0026lsquo;Plus\u0026rsquo; button Click on \u0026lsquo;Save\u0026rsquo;   12 - Add run conditions before deploying in production Same as \u0026lsquo;deploy-pipeline\u0026rsquo; on staging, we will add condition on the pipeline which deploy in \u0026lsquo;production\u0026rsquo;.\n Select the \u0026lsquo;deploy-pipeline_2\u0026rsquo;, then click on \u0026lsquo;Edit run Conditions\u0026rsquo; Add a run condition \u0026lsquo;cds.manual\u0026rsquo;, with value \u0026lsquo;true\u0026rsquo;, click on \u0026lsquo;Plus\u0026rsquo; button   view screenshots...   Select the \u0026lsquo;deploy-pipeline_2\u0026rsquo;, then click on \u0026lsquo;Edit run Conditions\u0026rsquo; Add a run condition \u0026lsquo;cds.manual\u0026rsquo;, with value \u0026lsquo;true\u0026rsquo;, click on \u0026lsquo;Plus\u0026rsquo; button   13 - Edit the name of the pipelines in your workflow In your project, you\u0026rsquo;ve got two pipelines: \u0026lsquo;build-pipeline\u0026rsquo; and \u0026lsquo;deploy-pipeline\u0026rsquo;. The \u0026lsquo;deploy-pipeline\u0026rsquo; is used twice: once for \u0026lsquo;staging\u0026rsquo; deploy, another for \u0026lsquo;production\u0026rsquo;.\nLet\u0026rsquo;s rename the pipelines on your workflow.\n Select the \u0026lsquo;deploy-pipeline\u0026rsquo;, then on the top left, click on on the edit button. Rename to \u0026lsquo;auto-deploy-pipeline\u0026rsquo; Do the same for the second \u0026lsquo;deploy-pipeline\u0026rsquo;, rename it to \u0026lsquo;manual-deploy-pipeline\u0026rsquo;   view screenshots...   Select the \u0026lsquo;deploy-pipeline\u0026rsquo;, then on the top left, click on on the edit button. Rename to \u0026lsquo;auto-deploy-pipeline\u0026rsquo; Do the same for the second \u0026lsquo;deploy-pipeline\u0026rsquo;, rename it to \u0026lsquo;manual-deploy-pipeline\u0026rsquo;   14 - Edit the \u0026lsquo;deploy-pipeline\u0026rsquo; The \u0026lsquo;deploy-pipeline\u0026rsquo; is empty for now. Let\u0026rsquo;s add some stuff to simulate a deployment. We will use CDS Variable from application.\n Select the \u0026lsquo;auto-deploy-pipeline\u0026rsquo;, then click on \u0026lsquo;Edit the pipeline\u0026rsquo; on the sidebar Add a step \u0026lsquo;Artifact Download\u0026rsquo; and a step \u0026lsquo;script\u0026rsquo;. The script contains echo \u0026quot;deploying {{.cds.application}} with variable {{.cds.app.my-variable}} on environment {{.cds.environment}}\u0026quot;   view screenshots...   Select the \u0026lsquo;auto-deploy-pipeline\u0026rsquo;, then click on \u0026lsquo;Edit the pipeline\u0026rsquo; on the sidebar Add a step \u0026lsquo;Artifact Download\u0026rsquo; and a step \u0026lsquo;script\u0026rsquo;. The script contains echo \u0026quot;deploying {{.cds.application}} with variable {{.cds.app.my-variable}} on environment {{.cds.environment}}\u0026quot;   15 - Run your workflow Let\u0026rsquo;s Run the workflow.\n The pipeline \u0026lsquo;auto-deploy-pipeline\u0026rsquo; is automatically launched. The script step on this pipeline contains deploying my-java-app with variable my-value on environment staging The pipeline deploy in production is not launched, as expected.   view screenshots...   The pipeline \u0026lsquo;auto-deploy-pipeline\u0026rsquo; is automatically launched. The script step on this pipeline contains deploying my-java-app with variable my-value on environment staging The pipeline deploy in production is not launched, as expected.   16 - Run the deploy in production As you add a run condition on the \u0026lsquo;manual-deploy-pipeline\u0026rsquo;, with cds.manual = true, you have to click on Run to launch a deployment in production.\n Select the \u0026lsquo;manual-deploy-pipeline\u0026rsquo;, then click on the \u0026lsquo;Play\u0026rsquo; button on the top left The script step displays deploying my-java-app with variable my-value on environment production   view screenshots...   Select the \u0026lsquo;manual-deploy-pipeline\u0026rsquo;, then click on the \u0026lsquo;Play\u0026rsquo; button on the top left The script step displays deploying my-java-app with variable my-value on environment production   "
},
{
	"uri": "/docs/components/cdn/",
	"title": "CDN",
	"tags": [],
	"description": "",
	"content": "What\u0026rsquo;s CDN CDN is a service dedicated to receive and store CDS\u0026rsquo;s logs and artifacts.\nCDN stores the list of all known log or artifact items in a Postgres database and communicates with storage backends to store the contents of those items. These backends are call units and there are two types of units in CDN:\n  Buffer unit: To store logs and artifacts of incoming jobs, these units are designed to be fast for read / write operations, but with limited capacity.\n  Storage Unit: to store complete job\u0026rsquo;s logs and artifacts.\n  When logs or file are received by CDN from a cds worker, it will first store these items in its buffer. Then, when the item is fully received, it will be moved to one of the configured storage units. If the CDN service is configured with multiple storage units, each unit periodically checks for missing items and synchronizes these items from other units.\nCDS UI and CLI communicate with CDN to get entire logs, or stream them.\nSupported units  Buffer (type: log): Redis. Buffer (type: file): Local, NFS Storage: Local, Swift, S3, Webdav  Configuration Like any other CDS service, CDN requires to be authenticated with a consumer. The required scopes are Service, Worker and RunExecution.\nYou can generate a configuration file with the engine binary:\n$ engine config new cdn \u0026gt; cds-configuration.toml You must have at least one storage unit, one file buffer and one log buffer to be able to run CDN.\nCDN artifact configuration Storage Unit Buffer You must have a storageUnits.buffers , one for the type log, another for the type file.\nType log:\n[cdn.storageUnits.buffers.redis] bufferType = \u0026#34;log\u0026#34; [cdn.storageUnits.buffers.redis.redis] host = \u0026#34;aaa@instance0,instance1,instance2\u0026#34; password = \u0026#34;your-password\u0026#34; Type file:\n[cdn.storageUnits.buffers.local-buffer] # it can be \u0026#39;log\u0026#39; to receive logs or \u0026#39;file\u0026#39; to receive artifacts bufferType = \u0026#34;file\u0026#34; [cdn.storageUnits.buffers.local-buffer.local] path = \u0026#34;/var/lib/cds-engine/cdn-buffer\u0026#34; To multi-instantiate the cdn service, you can use a NFS for the bufferType file, example:\n[cdn.storageUnits.buffers.buffer-nfs] bufferType = \u0026#34;file\u0026#34; [cdn.storageUnits.buffers.buffer-nfs.nfs] host = \u0026#34;w.x.y.z\u0026#34; targetPartition = \u0026#34;/zpool-partition/cdn\u0026#34; userID = 0 groupID = 0 [[cdn.storageUnits.buffers.buffer-nfs.nfs.encryption]] Cipher = \u0026#34;aes-gcm\u0026#34; Identifier = \u0026#34;nfs-buffer-id\u0026#34; ## enter a key here, 32 length Key = \u0026#34;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\u0026#34; Sealed = false Storage Units Storage The storage unit \u0026lsquo;storage\u0026rsquo; store the artifacts. You can use Local, Swift, S3, Webdav\nExample of storage unit local:\n[cdn.storageUnits.storages] [cdn.storageUnits.storages.local] # flag to disabled backend synchronization disableSync = false # global bandwidth shared by the sync processes (in Mb) syncBandwidth = 128 # number of parallel sync processes syncParallel = 2 [cdn.storageUnits.storages.local.local] path = \u0026#34;/tmp/cds/local-storage\u0026#34; [[cdn.storageUnits.storages.local.local.encryption]] Cipher = \u0026#34;aes-gcm\u0026#34; Identifier = \u0026#34;cdn-storage-local\u0026#34; LocatorSalt = \u0026#34;xxxxxxxxx\u0026#34; SecretValue = \u0026#34;xxxxxxxxxxxxxxxxx\u0026#34; Timestamp = 0 Example of storage unit swift:\n [cdn.storageUnits.storages] [cdn.storageUnits.storages.swift] syncParallel = 6 syncBandwidth = 1000 [cdn.storageUnits.storages.swift.swift] address = \u0026quot;https://xxx.yyy.zzz/v3\u0026quot; username = \u0026quot;foo\u0026quot; password = \u0026quot;your-password-here\u0026quot; tenant = \u0026quot;your-tenant-here\u0026quot; domain = \u0026quot;Default\u0026quot; region = \u0026quot;XXX\u0026quot; containerPrefix = \u0026quot;prod\u0026quot; [[cdn.storageUnits.storages.swift.swift.encryption]] Cipher = \u0026quot;aes-gcm\u0026quot; Identifier = \u0026quot;swift-backend-id\u0026quot; LocatorSalt = \u0026quot;XXXXXXXX\u0026quot; SecretValue = \u0026quot;XXXXXXXXXXXXXXXX\u0026quot; "
},
{
	"uri": "/development/contribute/hatchery/",
	"title": "Develop a hatchery",
	"tags": [],
	"description": "",
	"content": "Example with a creation of a vSphere hatchery   First of all you need to create a new package like the other into the hatchery package. Let\u0026rsquo;s call this package vSphere for our example.\n  You have to implement the Service interface (see here) in order to configure launch this new hatchery mode via CDS engine CLI.\n  Your have to create a Configuration structure composed of the hatchery.CommonConfiguration and the variables you need to access to vSphere API. You finally have to update the engine main.go file to manage this new service and add and manage the configuration structure as part of the global configuration.\n  You need to implement the hatchery interface (see here)\n  The Init function is useful to create the struct and to set all of these parameters, for our example it\u0026rsquo;s in this function that we\u0026rsquo;re going to create all our vSphere information fetched from the vSphere API. (cf init.go). In this case we create a new vSphere client to request vSphere API, a new finder to fetch all information about our vSphere host. In fact, all information that we need to spawn and kill the vms with our workers inside on the vSphere infrastructure. This function is also used to create and register the hatchery on the API via the function in the sdk called hatchery.Register. This register will give you the id of your hatchery.\n  The ID function returns the id of the current hatchery that comes from the hatchery client registered with the sdk previously in the Init function.\n  The ModelType function returns the type of the hatchery, in this case it\u0026rsquo;s vSphere type. We can create a constant VSphere inside our sdk package.\n  Hatchery function returns the hatchery struct initialised previously in the Init function.\n  Client function returns the sdk client initialised previously in the Init function too.\n  NeedRegistration is used to know if your worker model need registration. For example if a user update a worker model you have to rebuild the virtual machine model linked to this worker model. And this function returns true if the worker model was updated after the virtual machine model was created on vSphere. In order to know that for vSphere we have add some metadata on each vms in order to add more custom data as the last creation of this vm for example.\n  WorkersStartedByModel returns all workers which are running with a worker model. In our vSphere example, in order to know that we register a string metadata called model which tell us the name of our worker model.\n  WorkersStarted returns all workers include those which are running to build a vm model or to register a worker model. For example in the vSphere case, in order to count them we all prefix our worker spawned with worker-.\n  CanSpawn is where the magic happens, it\u0026rsquo;s in this function that you spawn your vms with the right configuration. In fact with vSphere we check if there is a vm model already created for the worker model passed in parameter. If it doesn\u0026rsquo;t we create a vm model with the user data store in worker model infos. Then we spawn a vm with right environment variables created from information passed in parameters (workerModel, registerOnly, \u0026hellip;) and with a script inside the vm that download the worker binary, execute it and shutdown when all is done. In this function we also check if the worker should be launch to register or to execute steps. When we launch a worker for register it means that the worker is launched and then send all there binary capabilities to the API for this worker model but don\u0026rsquo;t execute any jobs.\n  In our vSphere implementation we also launch multiple goroutine to clean and kill workers which seem down or in error. It\u0026rsquo;s a ticker that check all vms state in a periodic way.\n  Test If you want to test that you just have to launch it like that:\n$ engine start hatchery:vsphere --config config.toml "
},
{
	"uri": "/development/contribute/development/",
	"title": "Development Environment",
	"tags": [],
	"description": "",
	"content": "Before contributing to CDS, you\u0026rsquo;ll need to install your development environment.\n PostgreSQL Redis Node.js Golang CDS  If you are familiar with these different tools, you probably will not need to read this page :-)\nPostgreSQL Download PostgreSQL from https://www.postgresql.org/download/, version \u0026gt;= 9.6. Version 14.0 recommended\nYou can easily use only PostgreSQL binaries, downloaded from https://www.enterprisedb.com/download-postgresql-binaries.\nInitialize DB by running:\n$ mkdir -p ~/data/postgres/data $ initdb -D ~/data/postgres/data Create user cds and database cds\n$ psql -d postgres postgres=# create user cds with password 'cds'; postgres=# create database cds owner cds; postgres=# create database cdn owner cds; postgres=\\q Then launch PostgreSQL with:\n$ postgres -D ~/data/postgres/data Note: this is not recommended for a production installation.\nThat\u0026rsquo;s all for a local PostgreSQL installation\nRedis Download the latest stable Redis from https://redis.io/download, version \u0026gt;= 3.2\nExample with version 4.0.11:\n$ wget http://download.redis.io/releases/redis-4.0.11.tar.gz $ tar xzf redis-4.0.11.tar.gz $ cd redis-4.0.11 $ make # launch redis-server $ src/redis-server # you should add src/ to your PATH That\u0026rsquo;s all for a local Redis installation.\nNode.js Download the latest stable Node.js from https://nodejs.org/en/download/current/, version \u0026gt;= 16.4.2\nExample with version 16.4.2 on macOS:\n$ curl -O https://nodejs.org/dist/v16.4.2/node-v16.4.2-darwin-x64.tar.gz $ tar xzf node-v16.4.2-darwin-x64.tar.gz # directory node-v16.4.2-darwin-x64 is created # You should add node-v16.4.2-darwin-x64/bin to your PATH Golang Download the latest Golang version from https://golang.org/dl/, version \u0026gt;= 1.19\nExample with version 1.19 on macOS:\n$ export GOROOT=~/go $ export PATH=$PATH:$GOROOT/bin $ cd ~ $ curl -O https://dl.google.com/go/go1.19.darwin-amd64.tar.gz $ tar xzf go1.19.darwin-amd64.tar.gz Check if Go installation is ok\n$ go version go version go1.19 darwin/amd64 CDS Compile CDS:\n# Checkout code $ mkdir -p $(go env GOPATH)/src/github.com/ovh $ cd $(go env GOPATH)/src/github.com/ovh $ git clone https://github.com/ovh/cds.git # Compile everything $ cd $(go env GOPATH)/src/github.com/ovh/cds $ make clean # useful if you had already compile CDS before $ make build # if you want to build only one OS/ARCH, you can do for linux/amd64: $ make build OS=\u0026#34;linux\u0026#34; ARCH=\u0026#34;amd64\u0026#34; All binaries are stored in the dist/ directory\nConfigure CDS:\n# Generate default configuration file $ engine config new \u0026gt; ~/.cds/dev.toml # edit ~/.cds/dev.toml file  ## in section [api] ### --\u0026gt; set variable defaultOS to your OS, darwin if you are on macOS for example ## in section [hatchery.local.commonConfiguration] ### --\u0026gt; set name to \u0026#34;hatchery-local\u0026#34; ## in section [hatchery.local.commonConfiguration.api.http] ### --\u0026gt; uncomment url, should be set to url = \u0026#34;http://localhost:8081\u0026#34;  ## in section [hatchery.local] ### basedir = \u0026#34;/tmp/cds\u0026#34;  # this directory will contains the cds workers workspace ## in section [api.directories] ### baseDirectory = \u0026#34;/your-gopath/src/github.com/ovh/cds/engine/worker/dist\u0026#34;  # this directory should contains the workers binaries ## in section [api.artifact.local] # baseDirectory = \u0026#34;/tmp/cds/artifacts\u0026#34; Prepare database:\nThis command will create tables, indexes and initial data on CDS database. you have to launch it each time you have to upgrade cds.\n$ cd $(go env GOPATH)/src/github.com/ovh/cds $ engine database upgrade --db-password cds --db-sslmode disable If you don\u0026rsquo;t have a local PostgreSQL, you should run engine database upgrade --help and update ~/.cds/dev.toml file.\nLaunch CDS engine API:\n$ engine --config ~/.cds/dev.toml start api Launch CDS UI:\n$ cd $(go env GOPATH)/src/github.com/ovh/cds/ui $ npm start Register first user with cdsctl:\n# INIT_TOKEN is used to create the first user as an administrator of CDS. export INIT_TOKEN=`./engine config init-token --config ~/.cds/dev.toml` $ cdsctl signup -H http://localhost:8081 --email your-username@localhost.local --fullname yourFullname --username your-username # Check CDS API logs to get the validation code Launch local hatchery:\n$ engine --config ~/.cds/dev.toml start hatchery:local Open a browser, go on http://localhost:8080 - Have fun.\nNotes If you want to launch uService on different process:\n# launch API only $ engine --config ~/.cds/dev.toml start api # launch local hatchery only $ engine --config ~/.cds/dev.toml start hatchery:local If you want to launch vcs \u0026amp; hooks µServices, you have to:\n set name in sections [vcs] and [hooks] uncomment API URL in sections [vcs.api.http] and [hooks.api.http] for vcs uService, please read tutorial on GitHub, Bitbucket Server or GitLab.  Of course, you have to do the same thing with other µServices repositories, elasticsearch, hatchery.swarm, etc\u0026hellip;\nA remark / question / suggestion, feel free to join us on https://github.com/ovh/cds/discussions\n"
},
{
	"uri": "/hosting/download/",
	"title": "Download",
	"tags": [],
	"description": "",
	"content": "You\u0026rsquo;ll find the latest release of CDS on GitHub Releases\nCDSCTL cdsctl Documentation\n   OS 386 amd64 arm arm64 ppc64le     darwin        freebsd        linux        openbsd        windows         CDS Engine CDS Engine Documentation\n   OS 386 amd64 arm arm64 ppc64le     darwin        freebsd        linux        openbsd        windows         "
},
{
	"uri": "/docs/concepts/workflow/hooks/git-repo-webhook/",
	"title": "Git Repository Webhook",
	"tags": [],
	"description": "",
	"content": "Do you want to run a workflow after a git push on a repository? This kind of hook is for you.\nYou have to:\n link your project to a Repository Manager, on Advanced Section link an application to a git repository add a Repository Webhook on the root pipeline, this pipeline have the application linked in the context  GitHub / GitHub Enterprise / Bitbucket Cloud / Bitbucket Server / GitLab are supported by CDS.\n When you add a repository webhook, it will also automatically delete your runs which are linked to a deleted branch (24h after branch deletion).\n "
},
{
	"uri": "/docs/components/hatchery/",
	"title": "Hatchery",
	"tags": [],
	"description": "",
	"content": "Hatchery is a service dedicated to spawn and kill worker in accordance with build queue needs.\nAn hatchery is started with permissions to build all pipelines accessible from a given group, using token.\nThere are 6 modes for hatcheries:\n Local: Hatchery starts workers directly as local process. Swarm: The hatchery connects to a Docker Swarm cluster and starts workers inside containers. Kubernetes: The hatchery connects to a Kubernetes cluster and starts workers inside containers. OpenStack: Hatchery starts workers on OpenStack virtual machines using OpenStack Nova. vSphere: Hatchery starts workers on vSphere datacenter using VMware vSphere.  Admin hatchery As a CDS administrator, it is possible to generate an access token for all projects using the shared.infra group.\nThis group is builtin to CDS, and all CDS administrators are administrator of this group.\nThis means that by default, an hatchery using a token generated for this group will be able to spawn workers able to build all pipelines.\n"
},
{
	"uri": "/docs/concepts/workflow/hooks/",
	"title": "Hooks",
	"tags": [],
	"description": "",
	"content": "If you want to trigger the run of your workflow you need some hooks on your root pipeline inside the workflow.\nOn the root pipeline only, you can add hooks:\n webhook scheduler git repository webhooks git repository poller kafka hook RabbitMQ hook  There are two hooks on this pipeline, a repository webhook (GitHub here) and a webhook:\n"
},
{
	"uri": "/docs/concepts/permissions/",
	"title": "Permissions - ACLs",
	"tags": [],
	"description": "",
	"content": "There are 3 types of permissions:\n Read (as code value: 4) Read / Execute (as code value: 5) Read / Write / Execute (as code value: 7)  These permissions can be attached to different objects:\n Project Workflow Workflow node      Project Workflow Workflow node     Create a workflow RWX - -   Edit a workflow (change run conditions, add nodes, edit payload, notifications, \u0026hellip;) RO RWX -   Create/edit an environment/pipeline/application RWX - -   Manage permissions on project RWX - -   Manage permissions on a workflow RO RWX    Run a workflow RO RX / - OR RX (if there is some groups on node)    Permissions cannot be attached directly to users, they need to be attached to groups of users. Users inherit their permissions from the groups they are belonging to.\nExample usage: Enforce a strict separation of duties by allowing a group of people to view/inspect a workflow, a second group will be able to push it to a deploy-to-staging node and a third group will be allowed to push it to a deploy-to-production node. You can have a fourth group responsible of editing the workflow if needed.\nA more common scenario consists in giving Read / Execute permissions on the node deploy-to-staging to everyone in your development team while restricting the deploy-to-production node and the project edition to a smaller group of users.\nWarning: when you add a new group permission on a workflow node, only the groups linked on the node will be taken in account.\n"
},
{
	"uri": "/docs/concepts/pipeline/",
	"title": "Pipeline",
	"tags": [],
	"description": "",
	"content": "A pipeline describes how things need to be executed in order to obtain the expected result. In CDS, a pipeline belongs to a single project and can be used with the applications of that project.\nA pipeline is structured in sequential stages containing one or multiple concurrent jobs.\nCDS pipelines can be parametrized. This allows you to reuse the same pipeline when you have similar workloads. For example, you could use the same pipeline to deploy in your pre-production environment first and then to your production environment.\nA stage is a set of jobs that will be run in parallel. Stages are executed sequentially, if the previous stage is successful.\nLet’s take a real-life use case: the pipeline that built CDS. This pipeline has four stages:\n The Build Minimal stage is launched for all Git branches. The main goal of this stage is to compile the Linux version of CDS binaries. The Build other os/arch stage is only launched on the master branch. This stage compiles all binaries supported by the os/arch: linux, openbsd, freebsd, darwin, windows – 386, amd64 and arm. The Package stage is launched for all Git branches. This stage prepares the docker image and Debian package. Finally, the Publish stage is launched, whatever the Git branch.  Most tasks are executed in parallel, whenever possible. This results in very fast feedback, so we will quickly know if the compilation is OK or not.\nStages Usually in CDS a build pipeline is structured of the following stages:\n Compile stage: Build the binaries Analysis \u0026amp; Unit Tests stage: Run all unit tests and analyse code quality Packaging stage: Build the final package, Virtual Machine Image or Docker Image.  A Stage is a set of jobs that will be run in parallel. Stages are executed sequentially, if the previous stage is successful.\nYou can define trigger conditions on a stage, to enable/disable it under given conditions. For instance, you may want to run the Compile Stage and Analysis \u0026amp; Unit Tests stage on all branches but dedicate the Packaging Stage run on master and develop branches only.\n"
},
{
	"uri": "/docs/concepts/cds_as_code/project/repository/",
	"title": "Repository",
	"tags": [],
	"description": "",
	"content": "Description A repository represents a link between your CDS project and a git repository.\nA repository is analyzed by CDS on each push event in order to detect cds files that represent CDS as code entities. During this analysis, CDS will retrieve the user and create/update found entities regarding his permissions.\nPermission To be able to manage repositories you will need the permission manage on your project\nAdd a repository using CLI cdsctl experimental project repository add \u0026lt;PROJECT-KEY\u0026gt; \u0026lt;VCS-NAME\u0026gt; \u0026lt;REPOSITORY-NAME\u0026gt;  PROJECT-KEY: The project key VCS-NAME: The vcs name in which the repository is located. REPOSITORY-NAME: The repository name (/\u0026lt;repo_name\u0026gt;) to link  Full CLI documentation here\nAdd a repository using UI Comming soon\n"
},
{
	"uri": "/hosting/ready-to-run/from-binaries/",
	"title": "Run with binaries",
	"tags": [],
	"description": "",
	"content": "This article contains the steps to start CDS locally, with API, UI and a local Hatchery.\n Download CDS from GitHub Prepare Database Launch CDS API, CDS UI and a Local Hatchery  Prerequisite  a Redis a PostgreSQL 9.6 min (Version 14.0 recommended)  Get the latest release from GitHub mkdir $HOME/cds cd cds LAST_RELEASE=$(curl -s https://api.github.com/repos/ovh/cds/releases | grep tag_name | head -n 1 | cut -d \u0026#39;\u0026#34;\u0026#39; -f 4) OS=linux # could be linux, darwin, windows, freebsd, openbsd ARCH=amd64 # could be 386, arm, amd64, arm64, ppc64le # GET Binaries from GitHub curl -L https://github.com/ovh/cds/releases/download/$LAST_RELEASE/cds-engine-$OS-$ARCH -o cds-engine curl -L https://github.com/ovh/cds/releases/download/$LAST_RELEASE/cdsctl-$OS-$ARCH -o cdsctl # if you don\u0026#39;t want to use the your keychain, you have to use this: # curl -L https://github.com/ovh/cds/releases/download/$LAST_RELEASE/cdsctl-$OS-$ARCH-nokeychain -o cdsctl chmod +x cds-engine cdsctl Generate configuration Generate a Configuration File\ncd $HOME/cds ./cds-engine config new \u0026gt; conf.toml You will probably need to update some values in this file. If you need to automatize some update, you can use the ./cds-engine config edit command.\nExample:\nmkdir -p $HOME/cds/artifacts $HOME/cds/download $HOME/cds/hatchery-basedir ./cds-engine config edit conf.toml --output conf.toml \\  api.artifact.local.baseDirectory=$HOME/cds/artifacts \\  api.directories.download=$HOME/cds/download \\  hatchery.local.basedir=$HOME/cds/hatchery-basedir Prepare Cache For this example, we consider that the redis is installed on localhost, port 6379 with no password. You can edit the section api.cache.redis in conf.toml file if needed.\nIf it\u0026rsquo;s just for test purpose, you can start a redis with docker, as:\ndocker run --name cds-cache -p 127.0.0.1:6379:6379 -d redis:5 Prepare Database For this example, we consider that the database is installed on localhost, port 5432, with an existing empty database and user named cds and a password \u0026lsquo;cds\u0026rsquo;.\nYou can edit the section api.database in conf.toml file if needed.\nIf it\u0026rsquo;s just for test purpose, you can start a postgreSQL database with docker, as:\ndocker run --name cds-db -e POSTGRES_PASSWORD=cds -e POSTGRES_USER=cds -e POSTGRES_DB=cds -p 127.0.0.1:5432:5432 -d postgres:14.0 cd $HOME/cds ./cds-engine download sql --config conf.toml ./cds-engine database upgrade --db-host localhost --db-user cds --db-password cds --db-name cds --db-schema public --db-sslmode disable --db-port 5432 --migrate-dir sql/api PGPASSWORD=cds psql -h localhost -U cds -d cds -c \u0026#34;CREATE SCHEMA IF NOT EXISTS cdn AUTHORIZATION cds;\u0026#34; ./cds-engine database upgrade --db-host localhost --db-user cds --db-password cds --db-name cds --db-schema cdn --db-sslmode disable --db-port 5432 --migrate-dir sql/cdn Launch CDS API Generate a Configuration File\ncd $HOME/cds ./cds-engine download workers --config conf.toml ./cds-engine start api --config conf.toml Check that CDS is up and running:\ncurl http://localhost:8081/mon/version curl http://localhost:8081/mon/status Launch Signup \u0026amp; CDS UI Signup with cdsctl. INIT_TOKEN is used to validate the user as an administrator.\nexport INIT_TOKEN=`./cds-engine config init-token --config conf.toml` ./cdsctl signup --api-url http://localhost:8081 --email admin@localhost.local --username admin --fullname admin If you don\u0026rsquo;t have email service configured you just have to check your CDS API logs to get the cdsctl signup verify... command to run.\ncd $HOME/cds ./cdsctl signup verify --api-url ... # Get this command from the API Logs ./cds-engine download ui --config conf.toml ./cds-engine start ui --config conf.toml Then, open a browser on http://localhost:8080/ .\nLaunch CDS cdn CDN is a service dedicated to receive and retrieve logs. Doc: https://ovh.github.io/cds/docs/components/cdn/\nStart the cdn service:\ncd $HOME/cds mkdir -p storage/cdn-buffer storage/cdn ./cds-engine config edit conf.toml --output conf.toml \\  cdn.storageUnits.storages.local.local.path=$HOME/cds/storage/cdn \\  cdn.storageUnits.buffers.local-buffer.local.path=$HOME/cds/storage/cdn-buffer ./cds-engine start cdn --config $HOME/cds/conf.toml Launch CDS Local Hatchery A Hatchery is a service dedicated to spawn and kill worker in accordance with build queue needs.\nStart the local hatchery:\n./cds-engine start hatchery:local --config $HOME/cds/conf.toml # notice that you can run api, ui, cdn and hatchery with one common only: # ./cds-engine start api ui cdn hatchery:local --config $HOME/cds/conf.toml Note about CDS Engine It is possible to start all services as a single process $ ./cds-engine start api ui cdn hooks hatchery:local --config config.toml.\n$ ./cds-engine start api hooks hatchery:local --config config.toml Reading configuration file config.toml Starting service api Starting service ui Starting service cdn Starting service hooks Starting service vcs Starting service hatchery:local For serious deployment, we strongly suggest to run each service as a dedicated process.\n$ ./cds-engine start api --config config.toml $ ./cds-engine start cdn --config config.toml $ ./cds-engine start ui --config config.toml $ ./cds-engine start hooks --config config.toml $ ./cds-engine start vcs --config config.toml $ ./cds-engine start hatchery:local --config config.toml $ ./cds-engine start hatchery:docker --config config.toml $ ./cds-engine start hatchery:swarm --config config.toml $ ./cds-engine start hatchery:marathon --config config.toml $ ./cds-engine start hatchery:openstack --config config.toml $ ./cds-engine start hatchery:vsphere --config config.toml You can scale as you want each of this component, you probably will have to create a configuration for each instance of each service expect the API.\n$ ./cds-engine config new \u0026gt; config.api.toml # All API instance can share the same configuration. $ cp config.api.toml config.hatchery.swarm-1.toml $ cp config.api.toml config.hatchery.swarm-2.toml $ cp config.api.toml config.hatchery.swarm-3.toml $ cp config.api.toml config.hooks.toml $ cp config.api.toml config.vcs.toml $ vi config.hatchery.local.toml # Edit the file and keep only the [logs] and [hatchery]/[hatchery.local] sections $ vi config.hatchery.docker.toml # Edit the file and keep only the [logs] and [hatchery]/[hatchery.docker] sections $ vi config.hatchery.swarm-1.toml # Edit the file and keep only the [logs] and [hatchery]/[hatchery.swarm] sections $ vi config.hatchery.swarm-2.toml # Edit the file and keep only the [logs] and [hatchery]/[hatchery.swarm] sections $ vi config.hatchery.swarm-3.toml # Edit the file and keep only the [logs] and [hatchery]/[hatchery.swarm] sections $ vi config.hooks.toml # Edit the file and keep only the [logs] and [hooks] sections $ vi config.vcs.toml # Edit the file and keep only the [logs] and [vcs] sections ... If you decide to use consul or vault to store your configuration, you will have to use different key/secrets to store each piece of the configuration\nGo further  How to use OpenStack infrastructure to spawn CDS container read more   Link CDS to a Repository Manager as GitHub, Bitbucket Server or GitLab set up on your CDS Instance.   Learn more about CDS variables read more  "
},
{
	"uri": "/docs/tutorials/service-requirement-pg/",
	"title": "Service Requirement PostgreSQL",
	"tags": [],
	"description": "",
	"content": "Add the service requirement Requirement Service\n Type: service Hostname: mypg. This will be the service hostname Docker Image: postgres:9.5.3. This is the name of Docker image to link to current job Options:  POSTGRES_USER=myuser POSTGRES_PASSWORD=mypassword And a requirement model which allow you to execute apt-get install -y postgresql-client, see HowTo\nAdd a step of type script Docker image postgres:9.5.3 start a PostgreSQL at startup. So, it\u0026rsquo;s now available on mypg\n#!/bin/bash  set -ex apt-get update apt-get install -y postgresql-client PGPASSWORD=mypassword psql -U myuser -h mypg \u0026lt;\u0026lt;EOF \\x SELECT version(); EOF Execute Pipeline\nSee output:\n"
},
{
	"uri": "/docs/concepts/cds_as_code/entities/worker_model/",
	"title": "Worker Model",
	"tags": [],
	"description": "",
	"content": "Description Worker model can be defined ascode. That\u0026rsquo;s mean the definition of the worker model will be in a git repository, and each time you will push something, CDS will update it.\nAs Code directory A workflow is described directly on your repository inside the directory .cds/worker-models\nPermission To be able to manage a workflow you will need the permission manage-worker-model on your project\nFiles *: mandatory field\nDocker name: my-worker-model-name description: my description osarch: linux/amd64 type: docker spec: image: myregistry.org/ns/myworkermodel:1.0 username: foo password: bar envs: myvar: myvalue Fields:\n *name: Name of the worker model description: Description of the worker model *type: Type of worker model *osarch: OS and architecture of the model *spec.image: Docker image name spec.username: Docker registry username spec.password: Docker registry password. The field must be encrypted with cdsctl spec.envs: Additional environment variables  Openstack name: my-worker-model-name description: my description type: openstack osarch: linux/amd64 spec: image: Ubuntu Fields:\n *name: Name of the worker model description: Description of the worker model *osarch: OS and architecture of the model *type: Type of worker model *spec.image: Openstack image name  vSphere name: my-worker-model-name description: my description osarch: linux/amd64 type: vsphere spec: image: Ubuntu username: foo password: bar Fields:\n *name: Name of the worker model description: Description of the worker model *osarch: OS and architecture of the model *type: Type of worker model *spec.image: vSphere template name *spec.username: username to use to connect to the VM *spec.password: password to use to connect to the VM. The field must be encrypted with cdsctl  "
},
{
	"uri": "/docs/concepts/worker-model/patterns/",
	"title": "Worker Model patterns",
	"tags": [],
	"description": "",
	"content": "In CDS you can use worker model on any platform, distribution and arch you want. To permit that you need to indicate what will be executed on the worker vm or image before the execution of the worker binary itself. For example, before launching the worker binary you need to download that binary with curl or wget or anything else, depends on which OS you are.\nTo not copy/paste each time the same script for each worker model on the same OS and also to give the ability for a no CDS administrator to create their own worker model you can create worker model patterns. A pattern is only created by administrator and is linked to a worker model type (OpenStack, Docker, vSphere, \u0026hellip;). For example you can have different patterns for type vSphere and for different OS like Windows, Linux, macOS, \u0026hellip;\nCDS give you some variables to use in your patterns: click here.\nTo create a pattern in the UI (only for CDS administrator) go to the navbar admin menu:\nAnd then you can add/create/delete patterns with this kind of view:\n"
},
{
	"uri": "/docs/concepts/worker-model/variables/",
	"title": "Worker Model Variables",
	"tags": [],
	"description": "",
	"content": "When you want to add a new worker model or a new worker model pattern, you have to use some variables that CDS gives you with interpolation. To use them for example for the --api flag, CDS provides a variable named API that you can use like this --api={{.API}}.\nHere is the list of available variables:\n API string \u0026ndash;\u0026gt; URI of the CDS API set in the hatchery configuration Token string \u0026ndash;\u0026gt; token set in the hatchery configuration Name string \u0026ndash;\u0026gt; Name of the worker BaseDir string \u0026ndash;\u0026gt; basedir configuration set in the hatchery configuration HTTPInsecure bool \u0026ndash;\u0026gt; http insecure configuration set in the hatchery configuration Model int64 \u0026ndash;\u0026gt; ID of the model that the hatchery want to spawn Hatchery int64 \u0026ndash;\u0026gt; ID of the hatchery HatcheryName string PipelineBuildJobID int64 WorkflowJobID int64 \u0026ndash;\u0026gt; Useful to know which workflow job the hatchery will launch spawning this worker TTL int FromWorkerImage bool GraylogHost string GraylogPort int GraylogExtraKey string GraylogExtraValue string  "
},
{
	"uri": "/docs/concepts/cds_as_code/entities/",
	"title": "As code entities",
	"tags": [],
	"description": "",
	"content": "Description By linking a repository to your project, you will me able to manage as code entities:\n Workflows Actions Worker Models  "
},
{
	"uri": "/docs/tutorials/step_by_step_build_tag_release/",
	"title": "Build, tag and release an application",
	"tags": [],
	"description": "",
	"content": " In this tutorial, you will create a CDS Workflow with the Web UI.\n Create a workflow using two pipelines: one for building, a second for tagging You will discover the GitTag action, which create tag compatible which Semantic Verstionning 2.0.0   1 - Create your CDS project Let\u0026rsquo;s create a project. On the top navbar, click on \u0026lsquo;Create a project\u0026rsquo;.\n Enter a Project Name The project key will be useful when you want to use cdsctl. Click on \u0026lsquo;Create\u0026rsquo; button.   view screenshots...     2 - Add a repository manager on your project The project is now create, you have to link a repository manager. Be sure to have a Repository manager as GitHub, Bitbucket Server or GitLab set up on your CDS Instance.\n Select \u0026lsquo;Advanced\u0026rsquo; section In the section \u0026lsquo;Link to a repository manager\u0026rsquo;, select \u0026lsquo;github\u0026rsquo;, then click on \u0026lsquo;Connect\u0026rsquo; A popup is displayed, Click on \u0026lsquo;Click here\u0026rsquo; to finalize the link with GitHub. By doing that, you allow CDS to create hook on GitHub.   view screenshots...   Select \u0026lsquo;Advanced\u0026rsquo; section In the section \u0026lsquo;Link to a repository manager\u0026rsquo;, select \u0026lsquo;github\u0026rsquo;, then click on \u0026lsquo;Connect\u0026rsquo; A popup is displayed, Click on \u0026lsquo;Click here\u0026rsquo; to finalize the link with GitHub. By doing that, you allow CDS to create hook on GitHub. Here, GitHub is well linked on your CDS project.\n  3 - Create an application, link it to a Git Repository You\u0026rsquo;ve got a project, linked to GitHub. Let\u0026rsquo;s create an application.\nA CDS Application is useful to have a link to a Git Repository.\n Go on Project -\u0026gt; Applications tab, click on \u0026lsquo;Create a new application\u0026rsquo; Enter application name, here \u0026lsquo;my-java-app\u0026rsquo; Go on Advanced tab, select a Repository Expand configuration, select \u0026lsquo;https\u0026rsquo;. If your repository is public, you can keep empty fields, then click on \u0026lsquo;Save\u0026rsquo;   view screenshots...   Go on Project -\u0026gt; Applications tab, click on \u0026lsquo;Create a new application\u0026rsquo; Enter application name, here \u0026lsquo;my-java-app\u0026rsquo; Go on Advanced tab, select a Repository Expand configuration, select \u0026lsquo;https\u0026rsquo;. If your repository is public, you can keep empty fields, then click on \u0026lsquo;Save\u0026rsquo;   4 - Generate a GitHub Token This token will be used to let CDS create a tag.\n Go on https://github.com/settings/tokens/new, enter a description. Example \u0026lsquo;cds-demo\u0026rsquo;, click on Generate Token. Go on CDS, select your application and put the token in field password   view screenshots...   Create a token on GitHub. GitHub give you a token, put it in password field.   5 - Create the workflow  Go to Project -\u0026gt; Workflows tab Enter the Workflow name, then click on Next You have now to choose the first pipeline. As you don\u0026rsquo;t have a pipeline yet, you will create a new one, named \u0026lsquo;build-pipeline\u0026rsquo;. Click on Next Now, you have to select an application. Choose your application \u0026lsquo;my-java-app\u0026rsquo;, then click on Next We don\u0026rsquo;t need an environment, neither platform for the build pipeline, Click on \u0026lsquo;Finish\u0026rsquo;  Notice: the build pipeline does nothing here. You can add some job inside it, please read this tutorial to create a \u0026lsquo;build\u0026rsquo; pipeline.\n view screenshots...   Create the pipeline Then select your application. Click on create to create the workflow.   6 - Add a Hook on your workflow In this example, we create a Workflow to build, tag and release an application.\nSo, we have to trigger this workflow on each commit, on every git branches - and on each tag created. This will be useful to compile code from all developer and sometimes create a tag from master branch if the build is Success.\nThe application is linked to a GitHub Git Repository, we have two choices to trigger automatically the workflow:\n add a Git Repository Webhook or add a Git Repository Poller.  The difference between both is simple: a Git Repository Webhook does not work if your CDS Instance is not reachable from GitHub. So, we have to add a Git Repository Poller\n Select the pipeline root, then click on \u0026lsquo;Add a hook\u0026rsquo; Choose a Git Repository Poller The poller is added and linked to your first pipeline   view screenshots...     7 - Create a tag  Select the pipeline \u0026lsquo;build-pipeline\u0026rsquo;, then click on the sidebar \u0026lsquo;Add a pipeline\u0026rsquo; Create a new pipeline named \u0026lsquo;create-tag\u0026rsquo;, then select the application \u0026lsquo;my-java-app\u0026rsquo; We don\u0026rsquo;t need an environment, neither platform for create a tag, Click on \u0026lsquo;Finish\u0026rsquo; Edit the pipeline \u0026lsquo;create-tag\u0026rsquo; Click on Edit as Code button, then paste that code:  version: v1.0 name: create-tag parameters: tagLevel: type: list default: major;minor;patch description: major, minor or patch jobs: - job: CreateTag steps: - checkout: \u0026#39;{{.cds.workspace}}\u0026#39; - gitTag: path: \u0026#39;{{.cds.workspace}}\u0026#39; tagLevel: \u0026#39;{{.cds.pip.tagLevel}}\u0026#39; tagMessage: Release from CDS run {{.cds.version}}   view screenshots...   Select the pipeline \u0026lsquo;build-pipeline\u0026rsquo;, then click on the sidebar \u0026lsquo;Add a pipeline\u0026rsquo; Edit the pipeline \u0026lsquo;create-tag\u0026rsquo; Click on Edit as Code button, then paste that code: Pipeline is created   8 - Run Workflow The workflow is now ready to be launched, but before launch it, let\u0026rsquo;s configure some Run Condition on the pipeline \u0026lsquo;create-tag\u0026rsquo;. We don\u0026rsquo;t want to launch it on each commit - we want to decide when to launch it.\n Click on the pipeline \u0026lsquo;create-tag\u0026rsquo; Add two Run Conditions:  cds.manual = true git.branch = master   Launch the workflow, select the tag level, then click on Run   view screenshots...   Edit Run Conditions. Launch the workflow. The workflow is stopped, because you set cds.manual to true in your run conditions. Select the pipeline, then click on the \u0026lsquo;play\u0026rsquo; button. You can choose the tag level. Tag is created, cf. step logs. Tag is created on GitHub.   9 - Release Action Release action action is implemented for GitHub only. You can use it to create a release from a tag and push some artifacts on it.\n view screenshots...     "
},
{
	"uri": "/docs/components/",
	"title": "Components",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/hosting/ready-to-run/docker-compose/",
	"title": "Docker Compose",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/docs/concepts/files/environment-syntax/",
	"title": "Environment configuration file",
	"tags": [],
	"description": "",
	"content": "Definition An environment is a way to declare and manipulate sets of environment variables and attach them to pipelines within a workflow. It is also a way to organize your workflow and keep it clear and still readable.\nFormat name: MyEnvironment values: myBooleanVariable: type: boolean value: true myNumberVariable: type: number value: 1 mySecretVariable: type: password value: f1a2b3dd756e4db381d7a88631c67355 myStringVariable: value: myStringValue myTextVariable: type: text value: |This Is a multiline text value with a project variable inside {{.cds.proj.var}} All variables in CDS have a type: string (the default type that can be omitted), number, boolean, and text. You can also define password, the value in the file is encrypted. You can generate an encrypted value with the command cdsctl encrypt MYPROJECT my-data my-super-secret-value.\nAll values can reference other variables, thanks to the CDS interpolation engine:\nmyTextVariable: type: text value: |This Is a multiline text value with a project variable inside {{.cds.proj.var}} File usage The environment files can be exported and imported from CDS with the following command.\n➜ ~ cdsctl environment export ➜ ~ cdsctl environment import The files can also lie in your git repositories if your workflow definition is stored in your git repository.\nUsage in a pipeline While running a pipeline attached to this environment, you can manipulate those variables in too ways:\n From the interpolation engine using {{.cds.env.MyStringVariable}} From the environment variables using CDS_ENV_MYSTRINGVARIABLE, CDS_ENV_MyStringVariable, MYSTRINGVARIABLE, MyStringVariable  Note that the variable names are exposed as following:\n   Name Exposed variables     MyStringVariable {{.cds.env.MyStringVariable}}, CDS_ENV_MYSTRINGVARIABLE, CDS_ENV_MyStringVariable, MYSTRINGVARIABLE, MyStringVariable   My.String.Variable {{.cds.env.My.String.Variable}}, CDS_ENV_MY_STRING_VARIABLE, CDS_ENV_My.String.Variable, MY_STRING_VARIABLE, My.String.Variable   My-String-Variable {{.cds.env.My-String-Variable}}, CDS_ENV_MY_STRING_VARIABLE, CDS_ENV_My-String-Variable, MY_STRING_VARIABLE, My-String-Variable   My_String_Variable {{.cds.env.My_String_Variable}}, CDS_ENV_MY_STRING_VARIABLE, CDS_ENV_My_String_Variable, MY_STRING_VARIABLE, My_String_Variable    "
},
{
	"uri": "/docs/concepts/workflow/hooks/git-repo-poller/",
	"title": "Git Repository Poller",
	"tags": [],
	"description": "",
	"content": "Do you want to run a workflow after a git push on a repository BUT your CDS instance isn\u0026rsquo;t accessible from the internet? This kind of hook is for you. (If your CDS instance is accessible from the internet please check the Git Repository Webhook).\nThis kind of hook will poll periodically the GitHub API to know the push and pull-request events on your repository.\nYou have to:\n link your project to a Repository Manager, on Advanced Section link an application to a git repository add a Git Poller on the root pipeline, this pipeline have the application linked in the context  For now, only GitHub are supported for git poller by CDS.\n"
},
{
	"uri": "/hosting/ready-to-run/",
	"title": "Ready to RUN",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/docs/concepts/requirement/requirement_region/",
	"title": "Region Requirement",
	"tags": [],
	"description": "",
	"content": "The Region prerequisite allows you to require a worker to have access to a specific region.\nA Region can be configured on each hatchery. With a free text as myregion in hatchery configuration, user can set a prerequisite \u0026lsquo;region\u0026rsquo; with value myregion on CDS Job.\nExample of job configuration:\njobs: - job: build requirements: - region: myregion steps: ... "
},
{
	"uri": "/docs/concepts/workflow/run-conditions/",
	"title": "Run conditions on pipeline",
	"tags": [],
	"description": "",
	"content": "In CDS if you want to launch a pipeline in your workflow only in specific cases you can add conditions. For example, if you want to run a pipeline automatically only if the value of git.branch is master.\nTo edit your pipeline condition on the user interface, you have to select a node under edition mode of your workflow and click on Edit run conditions like this:\nThere are 2 types of conditions:\nBasic run conditions With this type of conditions you can add multiple comparisons with a basic operators (=, !=, match for a regular expression, \u0026gt;=, \u0026gt;, \u0026lt;=, \u0026lt;). The variables syntax here are dotted syntax (example: cds.dest.application). Under the hood, if you use match operator it uses the Go regexp package, so you can use regular expressions that are supported in the Go regexp package.\nIf you add multiple basic run conditions, all of these must be satisfied to run the pipeline. So with basic conditions you can\u0026rsquo;t make an OR between multiple conditions, it\u0026rsquo;s always an AND. If you want to make more specific or advanced run conditions you have to use the second type of conditions (advanced).\nAdvanced run conditions If you want some advanced run conditions, like for example make some computation over specific variables and then compare their values, you have the ability to use advanced run conditions. In fact, you are free to make any computation or comparison because advanced condition is a Lua script that returns a boolean (true if you want to run the pipeline or false if you don\u0026rsquo;t). In this case the variables syntax is in Unix case (example: cds_dest_application) and prefixed with cds_, git_ or workflow_. In general, . or - in CDS variable name must be replaced with _. For example, if you have a variable named cds.build.my-variable then in Lua you have to use it as cds_build_my_variable.\nPay attention, all types of variables are string. Inside the Lua editor on CDS you have the autocompletion of your variables, you just have to write cds_, git_ or workflow_ to see suggestions. Please be aware that you can\u0026rsquo;t have at the same time basic conditions and advanced conditions. The behavior when you have both is that ONLY advanced run conditions will be effective.\nFor example if you want to launch the pipeline if the value of cds_status is Success and git_branch is master OR if the value of cds_manual is true you have to write:\n-- Pay attention! All variables value are string so you compare cds_manual with the string \u0026#34;true\u0026#34; and not true return cds_status == \u0026#34;Success\u0026#34; and (git_branch == \u0026#34;master\u0026#34; or cds_manual == \u0026#34;true\u0026#34;) Another use case is to enable auto-prod during working days only (not Saturday and Sunday):\nreturn os.date(\u0026#34;%w\u0026#34;) \u0026lt; \u0026#34;5\u0026#34; Or if you also want to block deployment on your production after 6pm:\nreturn os.date(\u0026#34;%w\u0026#34;) \u0026lt; \u0026#34;5\u0026#34; and os.date(\u0026#34;%H\u0026#34;) \u0026lt; \u0026#34;18\u0026#34; You can also use regular expression in your Lua condition, for instance:\n-- this example checks if current application beginning with \u0026#39;abc\u0026#39; -- don\u0026#39;t forget to import the regular expression module local re = require(\u0026#34;re\u0026#34;) return re.match(cds_application, \u0026#34;abc.*\u0026#34;) == cds_application Functions re.find, re.gsub, re.match, re.gmatch are available. These functions have the same API as Lua pattern match.\n"
},
{
	"uri": "/docs/concepts/requirement/requirement_secret/",
	"title": "Secret Requirement",
	"tags": [],
	"description": "",
	"content": "The Secret prerequisite allows you to require a worker to start with some project\u0026rsquo;s secrets when those secrets are not automatically injected.\nSecret automatic injection can be disabled if a job requires to run in a specific region (using a \u0026ldquo;Region\u0026rdquo; prerequisite) that was added in CDS API configuration (key: skipProjectSecretsOnRegion).\nThe value for the requirement should be a valid regex. In the following example it is used to match both default SSH and PGP keys for a CDS project.\nExample of job configuration:\n- job: build requirements: - region: myregion - secret: ^cds.key.proj-(ssh|pgp)-test.priv$ steps: ... Example of CDS API configuration:\n[api] ... [api.secrets] ... skipProjectSecretsOnRegion = [\u0026quot;myregion\u0026quot;] Example of CDS Hatchery configuration:\n[hatchery] [hatchery.local] ... [hatchery.local.commonConfiguration] ... [hatchery.local.commonConfiguration.provision] ... region = \u0026quot;myregion\u0026quot; ignoreJobWithNoRegion = true "
},
{
	"uri": "/docs/concepts/cds_as_code/project/variableset/",
	"title": "VariableSet",
	"tags": [],
	"description": "",
	"content": "Description A variableSet represent a list a variables provided to the jobs during the workflow execution.\nA variable can be a:\n string secret  For each type of variable it\u0026rsquo;s possible to provide a JSON value.\nPermission To be able to manage repository manager you will need the permission manage on your project\nAdd a variableset using CLI cdsctl experimental project variableset add \u0026lt;PROJECT-KEY\u0026gt; \u0026lt;VARIABLESET-NAME\u0026gt;  PROJECT-KEY: The project key VARIABLESET-NAME: The name of the variableset  Full CLI documentation here\nAdd a variable in a variableset using CLI cdsctl experimental project variableset add \u0026lt;PROJECT-KEY\u0026gt; \u0026lt;VARIABLESET-NAME\u0026gt; \u0026lt;NAME\u0026gt; \u0026lt;VALUE\u0026gt; \u0026lt;TYPE\u0026gt;  PROJECT-KEY: The project key VARIABLESET-NAME: The name of the variableset NAME: The name of the variable VALUE: The value of the variable TYPE: The type of variable: string | secret  Full CLI documentation here\n"
},
{
	"uri": "/hosting/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": "The toml configuration can be provided by a file, via consul k/v store or via vault.\nStart CDS with local configuration file You can also generate a configuration file template with the following command.\n$ $PATH_TO_CDS/engine config new \u0026gt; my_conf_file.toml Edit this file.\nCheck your configuration file with\n$ $PATH_TO_CDS/engine config check my_conf_file.toml Reading configuration file my_new_file.toml Configuration file OK Create your database relations\n$ $PATH_TO_CDS/engine database upgrade --db-host \u0026lt;host\u0026gt; --db-port \u0026lt;port\u0026gt; --db-user \u0026lt;user\u0026gt; --db-password \u0026lt;password\u0026gt; --db-name \u0026lt;database\u0026gt; --db-schema=public --migrate-dir $PATH_TO_CDS/engine/sql/api --limit 0 $ PGPASSWORD=\u0026lt;password\u0026gt; psql -h \u0026lt;host\u0026gt; -p \u0026lt;port\u0026gt; -U \u0026lt;user\u0026gt; -d \u0026lt;database\u0026gt; -c \u0026#34;CREATE SCHEMA IF NOT EXISTS cdn AUTHORIZATION \u0026lt;user\u0026gt;;\u0026#34; $ $PATH_TO_CDS/engine database upgrade --db-host \u0026lt;host\u0026gt; --db-port \u0026lt;port\u0026gt; --db-user \u0026lt;user\u0026gt; --db-password \u0026lt;password\u0026gt; --db-name \u0026lt;database\u0026gt; --db-schema=cdn --migrate-dir $PATH_TO_CDS/engine/sql/cdn --limit 0 Download workers binaries\n$ $PATH_TO_CDS/engine download workers --config my_conf_file.toml Reading configuration file my_conf_file.toml Downloading worker for os windows and arch amd64 into /tmp/cds/download... Downloading worker for os windows and arch 386 into /tmp/cds/download... ... Run CDS\n$ $PATH_TO_CDS/engine start api --config my_conf_file.toml Reading configuration file my_new_file.toml 2017/04/04 16:33:17 [NOTICE] Starting CDS server... ... Start CDS with Consul Upload your toml configuration to consul\n$ consul kv put cds/config.api.toml - \u0026lt;PASTE YOUR CONFIGURATION\u0026gt; \u0026lt;ENDS WITH CTRL-D\u0026gt; Success! Data written to: cds/config.api.toml Run CDS\n$ $PATH_TO_CDS/engine start api --remote-config localhost:8500 --remote-config-key cds/config.api.toml Reading configuration from localhost:8500 2017/04/04 16:11:25 [NOTICE] Starting CDS server... ... Start CDS with Vault You have to put your configuration in a TOML format like above with good values into a secret named /secret/cds/conf in your vault. For example if you use the vault CLI:\n$ myConfig=`cat conf.toml` $ vault write secret/cds/conf data=$myConfig $ $PATH_TO_CDS/engine start api --vault-addr=http://myvault.com --vault-token=XXXX Reading configuration from vault @http://myvault.com 2017/04/04 16:33:17 [NOTICE] Starting CDS server... "
},
{
	"uri": "/docs/concepts/cds_as_code/contexts/",
	"title": "Contexts",
	"tags": [],
	"description": "",
	"content": "Contexts Contexts are a way to access information inside a workflow run. Data can be access like this inside a job\n${{ \u0026lt;contextName\u0026gt;.data }} Contexts available:\n cds: contains all the information about the workflow run git: contains the git information vars: contains the project variableset used by the current job env: contains environment variables jobs: contains all parent jobs results and outputs needs: contains all direct parents ( job.needs ) results and outputs inputs: contains all job inputs steps: contains all previous step status matrix: contains the curent value for each matrix variable integrations: contains data of integration linked to the current job gate: contains all gate inputs  Context CDS It contains all cds data related to the workflow execution\n event_name: the event name that trigger the workflow event: the event payload received by CDS project_key: the project identifier of the workflow run_id: The identifier of the workflow run run_number: The current run number run_attempt: The current run attempt workflow: The name of the workflow workflow_ref: The git refs of the worklow definition used in the current workflow run workflow_sha: The git commit of the workflow definition used in the current workflow run workflow_vcs_server: The vcs server name of the workflow definition workflow_repository: The name of the workflow definition repository triggering_actor: Username that trigger the workflow run job: The current job stage: The current stage workspace: Path of the current workspace integrations: a map containing integration data linked to the current job. The key of the map is the integration name  Context Git It contains all git information related to the workflow execution\n server: The vcs server name linked to the workflow repository: The repository linked to the workflow repositoryUrl: Url of the linked repositoryy ref: Current git refs sha: Current commit connection: Type of connection used: https/ssh ssh_key: SSH Key name used ssh_private: Private SSH Key used for git authentication username: Username used to connect to the repository token: User token used for git authentication semver_current: Current semantic version computed by CDS semver_next: Next semantic version computed by CDS  Context Jobs It contains the status and outputs of all recursive parent jobs\n jobs.\u0026lt;job_id\u0026gt;.result: status of the given parent job. jobs.\u0026lt;job_id\u0026gt;.outputs: map of all job run result of type variable  jobs.\u0026lt;job_id\u0026gt;.outputs.\u0026lt;run_result_name\u0026gt;    Context Needs It contains the status and outputs of all direct parent jobs\n needs.\u0026lt;job_id\u0026gt;.result: status of the given parent job. needs.\u0026lt;job_id\u0026gt;.outputs: map of all job run results of type variable  needs.\u0026lt;job_id\u0026gt;.outputs.\u0026lt;run_result_name\u0026gt;    Context Steps It contains the status and outputs of all previous steps in the current jobs\n steps.\u0026lt;step_id\u0026gt;.outcome: result of the given state before \u0026lsquo;continue-on-error\u0026rsquo; steps.\u0026lt;step_id\u0026gt;.conclusion: result of the given state after \u0026lsquo;continue-on-error\u0026rsquo; steps.\u0026lt;step_id\u0026gt;.outputs: map of all job run results of type variable by step  steps.\u0026lt;step_id\u0026gt;.outputs.\u0026lt;run_result_name\u0026gt;    Context vars  vars.\u0026lt;varset_name\u0026gt;.\u0026lt;item_name\u0026gt;: value of the given item. If the value is a JSON item, you can select any element like this vars.\u0026lt;varset_name\u0026gt;.\u0026lt;item_name\u0026gt;.\u0026lt;key\u0026gt;.\u0026lt;subkey\u0026gt;  "
},
{
	"uri": "/development/contribute/plugin/",
	"title": "Develop a plugin",
	"tags": [],
	"description": "",
	"content": "A CDS worker executes job, and job is composed of steps.\nA step is an action\nA Plugin is simply an executable which expose a GRPC server corresponding to the right proto file. You can use the programming language of your choice. The CDS worker will simply query the GRPC server of the plugin.\nIn order to communicate with a CDS worker, a plugin MUST fill the following requirements:\n Expose a GRPC server Implement methods and messages coming from this proto file Display this message at the launch of your plugin XXX is ready to accept new connection where XXX is your ip address with port or your Unix socket (example: 127.0.0.1:55939 is ready to accept new connection or for a Unix socket XXX.sock is ready to accept new connection). Note that your plugin can use any Unix socket or tcp port as long as it informs the worker using the log line above.  More resources that may help you in developing a CDS plugin are available: SDK in this directory with some examples here.\nContribute on https://github.com/ovh/cds/tree/v0.54.1/contrib/grpcplugins/action\n"
},
{
	"uri": "/docs/integrations/",
	"title": "Integrations",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/docs/concepts/workflow/join/",
	"title": "Join",
	"tags": [],
	"description": "",
	"content": "A join lets workflow to await the end of two or more parent pipelines.\nYou can trigger one or many pipelines after a join.\n"
},
{
	"uri": "/docs/concepts/workflow/hooks/kafka-hook/",
	"title": "Kafka hook",
	"tags": [],
	"description": "",
	"content": "Do you want to run a workflow from a Kafka message? This kind of hook is for you.\nThis kind of hook will connect to a Kafka topic and consume messages. For each message, it will trigger your workflow.\nThe Kafka message have to be in JSON format. It will be used as a payload for your workflow. See payload documentation.\nNotice that Kafka communication is done using SASL and TLS enable only.\nLink your project to a Kafka platform On your CDS Project, select the platforms section then add a Kafka platform.\nAdd a Kafka hook on the root pipeline of your workflow Click on the pipeline root of a workflow, then choose \u0026lsquo;Add a Hook\u0026rsquo; on the sidebar\nSelect the Kafka Hook and complete the information:\n The Consumer group Select the Kafka platform The Kafka topic to read  Add run condition The workflow will be triggered for all messages received in Kafka queue.\nIf you don\u0026rsquo;t want to launch the root pipeline for each message, you can add a run condition.\n"
},
{
	"uri": "/docs/concepts/cds_as_code/project/notification/",
	"title": "Notification",
	"tags": [],
	"description": "",
	"content": "Description Each action on CDS triggers an event. It\u0026rsquo;s possible at the project level to setup notification through a webhook, filtering by event.\nPermission To be able to manage notification you will need the permission manage on your project\nAdd a notification using CLI cdsctl experimental project notification import \u0026lt;PROJECT-KEY\u0026gt; \u0026lt;notification.yaml\u0026gt;  PROJECT-KEY: The project key notification.yaml: The path to a yaml file name containing the webhook configuration.  Example of webhook configuration name: my-notif webhook_url: https://myserver/notif filters: workflowRun: events: [Run.*] analysis: events: [AnalysisStart, AnalysisDone] auth: headers: Authorization: Bearer ey......  name: The name of your notification webhook_url: URL that CDS will call to POST the notification filters: A map of named filters  filters.\u0026lt;filter_name\u0026gt;.events: a list of event which you want to have a notification. You can use regular expression   auth.headers: a map of headers to send  "
},
{
	"uri": "/docs/concepts/organization/",
	"title": "Organization",
	"tags": [],
	"description": "",
	"content": "Organization represents an organizational group that contains a set of people.\n a project belongs to only one organization, its value is computed based on the groups that have R/W/E permissions on the project.  you\u0026rsquo;ll be able to add a group from another organization only with R permission.   a group belongs to only one organization. You cannot have users from different organizations in the same group.  Configuration  You must defined a list of allowed organization in your CDS configuration file  ############################## # CDS Authentication Settings# ############################## [api.auth] allowedOrganizations = [\u0026#34;default\u0026#34;]  For each authentication method, you must defined an organization that will be attached to the users that use it  github   [api.auth.github] organization = \u0026quot;default\u0026quot;  gitlob   [api.auth.gitlab] organization = \u0026quot;default\u0026quot;  local  [api.auth.local] organization = \u0026quot;default\u0026quot;  openID connect   [api.auth.oidc] organization = \u0026quot;default\u0026quot;  ldap: map to company field    "
},
{
	"uri": "/docs/concepts/requirement/requirement_service/",
	"title": "Service Link",
	"tags": [],
	"description": "",
	"content": "The Service Link prerequisite allow you to use any Docker image as a dependency of a job.\nThis is useful when you want to make some tests with a real database, or put your built application as a job prerequisite for doing some tests.\nHow to use service requirement When editing a pipeline job, choose your model as usual, then add a new service requirement (the name you set will be the service\u0026rsquo;s hostname) and set the Docker image for the service as the value.\nWhen the pipeline is triggered, a worker defined by the model will be spawned with a docker link to the service you defined as requirement.\nEnvironment variables You can define environment variables of the service by setting requirement value as:\npostgres:9.5.3 POSTGRES_USER=myuser POSTGRES_PASSWORD=mypassword To define your job\u0026rsquo;s requirements in the UI, you just have to go to the job\u0026rsquo;s edition page and click on requirements:\nThen a modal will appear in order to select your requirements:\nTutorials  Tutorial - Service Link Requirement NGINX Tutorial - Service Link Requirement PostgreSQL  "
},
{
	"uri": "/docs/tutorials/worker_model-docker/",
	"title": "Worker Model Docker",
	"tags": [],
	"description": "",
	"content": "A worker model of type docker can be spawned by a Hatchery Docker Swarm or a Hatchery Kubernetes.\nRegister a worker Model from an existing Docker Image Docker Image golang:1.10 have a \u0026ldquo;curl\u0026rdquo; in $PATH, so it can be used as it is.\n In the UI, click on the wheel on the hand right top corner and select *workers\u0026quot; (or go the the route #/worker) At the bottom of the page, fill the form  Name of your worker go-official-1.10 type docker image golang:1.10 pattern: if you aren\u0026rsquo;t an administrator select a configuration pattern that an administrator have already created for this type of worker model. shell command: if you are an administrator you can directly edit the main shell command (main shell command is the command which accept a command to execute, for example sh -c \u0026quot;echo CDS\u0026quot;, here sh -c is the main shell command) the command: represent the command to launch the CDS worker cf: worker CLI in order to launch your worker CDS allow you to use a specific list of variables which is interpolate when your worker will be spawned by your hatchery.   Click on Add button and that\u0026rsquo;s it   If you want to specify an image using a private registry or a private image. You need to check the private checkbox and fill credentials in username and password to access to your image. And if your image is not on docker hub but from a private registry you need to fill the registry info (the registry api url, for example for docker hub it\u0026rsquo;s https://index.docker.io/v1/ but we fill it by default).  Worker Model Docker on Hatchery Swarm This hatchery offers some features on job pre-requisites, usable only on user\u0026rsquo;s hatchery (ie. not a shared.infra hatchery).\n Service Link options on worker model prerequisite  Port mapping: --port=8080:8081/tcp --port=9080:9081/tcp Privileged flag: --privileged Add host flag: --add-host=aaa:1.2.3.4 --add-host=bbb:5.6.7.8 Use all: --port=8080:8081/tcp --privileged --port=9080:9081/tcp --add-host=aaa:1.2.3.4 --add-host=bbb:5.6.7.8    "
},
{
	"uri": "/hosting/database/",
	"title": "Database Management",
	"tags": [],
	"description": "",
	"content": "CDS provides all needed tools scripts to perform Schema creation and auto-migration. Those tools are embedded inside the engine binary.\nThe migration files are available to download on GitHub Releases and the archive is named sql.tar.gz. You have to download it and untar (tar xvzf sql.tar.gz).\nCreation On a brand new database run the following command:\n$ $PATH_TO_CDS/engine database upgrade --db-host \u0026lt;host\u0026gt; --db-port \u0026lt;port\u0026gt; --db-user \u0026lt;user\u0026gt; --db-password \u0026lt;password\u0026gt; --db-name \u0026lt;database\u0026gt; --db-schema=public --migrate-dir $PATH_TO_CDS/engine/sql/api --limit 0 $ PGPASSWORD=\u0026lt;password\u0026gt; psql -h \u0026lt;host\u0026gt; -p \u0026lt;port\u0026gt; -U \u0026lt;user\u0026gt; -d \u0026lt;database\u0026gt; -c \u0026#34;CREATE SCHEMA IF NOT EXISTS cdn AUTHORIZATION \u0026lt;user\u0026gt;;\u0026#34; $ $PATH_TO_CDS/engine database upgrade --db-host \u0026lt;host\u0026gt; --db-port \u0026lt;port\u0026gt; --db-user \u0026lt;user\u0026gt; --db-password \u0026lt;password\u0026gt; --db-name \u0026lt;database\u0026gt; --db-schema=cdn --migrate-dir $PATH_TO_CDS/engine/sql/cdn --limit 0 Upgrade On an existing database, run the following command on each CDS update:\n$ $PATH_TO_CDS/engine database upgrade --db-host \u0026lt;host\u0026gt; --db-port \u0026lt;port\u0026gt; --db-user \u0026lt;user\u0026gt; --db-password \u0026lt;password\u0026gt; --db-name \u0026lt;database\u0026gt; --db-schema=public --migrate-dir $PATH_TO_CDS/engine/sql/api $ $PATH_TO_CDS/engine database upgrade --db-host \u0026lt;host\u0026gt; --db-port \u0026lt;port\u0026gt; --db-user \u0026lt;user\u0026gt; --db-password \u0026lt;password\u0026gt; --db-name \u0026lt;database\u0026gt; --db-schema=cdn --migrate-dir $PATH_TO_CDS/engine/sql/cdn More details Read more about CDS Database Management\n"
},
{
	"uri": "/development/contribute/error_management/",
	"title": "Error management",
	"tags": [],
	"description": "",
	"content": "This page explains how to deal with errors in CDS code. Error returned from CDS contains a message, an HTTP status code, a stack trace and a unique id.\nErrors can be forwarded to a Graylog instance then retrieved directly from the ctl (see api.graylog and log.graylog sections in cds configuration file to setup).\ncdsctl admin errors get \u0026lt;error_uuid\u0026gt; Usage in code All errors from lib should be wrapped like sdk.WithStack(err) or sdk.WrapError(err, format, values\u0026hellip;) directly when created.\nif err := sdk.JSONUnmarshal(...); err != nil { return sdk.WithStack(err) // or return sdk.WrapError(err, \u0026#34;Cannot unmarshal given data\u0026#34;) } WrapError can be used to add more details about an error when returned.\nfunc one() error { return sdk.WithStack(sdk.JSONUnmarshal(...)) } func two() error { return sdk.WrapError(one(), \u0026#34;Error calling one\u0026#34;) } func three() error { return sdk.WrapError(two(), \u0026#34;Error calling two\u0026#34;) } If the error was already wrapped an not more info is needed you should run it directly.\nfunc four() error { if err := three(); err != nil { return err } ... } To create an error that will generate a specific HTTP status code you should use the sdk.NewError func or returned an existing sdk.Error.\nif err := sdk.JSONUnmarshal(...); err != nil { return sdk.NewError(sdk.ErrWrongRequest, err) // returns a 400 http code with default translated message and from value that contains err cause. } if err := sdk.JSONUnmarshal(...); err != nil { return sdk.NewErrorFrom(sdk.ErrWrongRequest, \u0026#34;A text that will be in from message\u0026#34;) // returns a 400 http code with default translated message and test as from. } if err := sdk.JSONUnmarshal(...); err != nil { return sdk.WrapError(sdk.ErrWrongRequest, \u0026#34;Cannot unmarshal given data\u0026#34;) // or return sdk.WithStack(sdk.ErrWrongRequest) returns a 400 http code with default translated message. } To compare if an error match a existing sdk.Err use the sdk.ErrorIs func, using equality operator will not work if the error was wrapped. A not wrapped lib error will match sdk.ErrUnknownError (to check if error is unknown you can use sdk.ErrorIsunknown).\nif err := one(); err != nil { if sdk.ErrorIs(err, sdk.ErrNotFound) { // do something specific for not found error  } } err := sdk.JSONUnmarshal(...) sdk.ErrorIs(err, sdk.ErrUnknownError) =\u0026gt; true sdk.ErrorIsUnknown(err) =\u0026gt; true To check if an error root cause is equal to a known library error you could use the sdk.Cause func.\nerr := sdk.WrapError(sdk.WrapError(sql.ErrNoRows, \u0026#34;The error is now wrapped\u0026#34;), \u0026#34;Add more info on the error\u0026#34;) err == sql.ErrNoRows =\u0026gt; false sdk.Cause(err) == sql.ErrNoRows =\u0026gt; true "
},
{
	"uri": "/docs/concepts/cds_as_code/events/",
	"title": "Events",
	"tags": [],
	"description": "",
	"content": "Description Each action on CDS triggers an event.\nAnalysis events  AnalysisStart AnalysisDone  AsCode entity events  EntityCreated EntityUpdated EntityDeleted  Hachery events  HatcheryCreated HatcheryUpdated HatcheryDeleted  Integration model events  IntegrationModelCreated IntegrationModelUpdated IntegrationModelDeleted  Integration events  IntegrationCreated IntegrationUpdated IntegrationDeleted  Notification events  NotificationCreated NotificationUpdated NotificationDeleted  Organization events  OrganizationCreated OrganizationDeleted  Permission events  PermissionCreated PermissionUpdated PermissionDeleted  Plugin events  PluginCreated PluginUpdated PluginDeleted  Project events  ProjectCreated ProjectUpdated ProjectDeleted  Region events  RegionCreated RegionDeleted  Repository events  RepositoryCreated RepositoryDeleted  User events  UserCreated UserUpdated UserDeleted  User gpg events  UserGPGKeyCreated UserGPGKeyDeleted  VariableSet events  VariableSetCreated VariableSetDeleted  VariableSet item events  VariableSetItemCreated VariableSetItemUpdated VariableSetItemDeleted  Workflow Run events  RunCrafted RunBuilding RunEnded RunRestartFailedJob  Workflow Run Job events  RunJobEnqueued RunJobScheduled RunJobBuilding RunJobManualTriggered RunJobRunResultAdded RunJobRunResultUpdated RunJobEnded  "
},
{
	"uri": "/hosting/",
	"title": "Hosting your own instance",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/docs/concepts/requirement/requirement_memory/",
	"title": "Memory",
	"tags": [],
	"description": "",
	"content": "The Memory requirement allows you to require a worker to have a specific number of MiB of RAM.\nFor example if you need 2 GiB of RAM for your worker you can put 2048 in your memory requirement.\n"
},
{
	"uri": "/docs/concepts/workflow/mutex/",
	"title": "Mutex",
	"tags": [],
	"description": "",
	"content": "By default, the same pipeline can be run multiple times at once.\nIn a CDS Workflow, you can limit running a pipeline to one at a time.\nClick on the pipeline → Edit the pipeline context → enable \u0026ldquo;Limit one run at run time\u0026rdquo;\nExamplary use case: run an integration test once on a particular environment.\nTo configure a Mutex with the configuration as code, use the boolean property one_at_a_time in the workflow definition file, in a pipeline context section: Mutex configuration as code example.\n"
},
{
	"uri": "/docs/concepts/workflow/hooks/rabbitmq-hook/",
	"title": "RabbitMQ hook",
	"tags": [],
	"description": "",
	"content": "Do you want to run a workflow from a RabbitMQ message? This kind of hook is for you.\nThis kind of hook will connect to a RabbitMQ queue and consume messages. For each message, it will trigger your workflow.\nThe RabbitMQ message have to be in JSON format. It will be used as a payload for your workflow. See payload documentation.\nLink your project to a RabbitMQ platform On your CDS Project, select the platforms section then add a RabbitMQ platform.\nAdd a RabbitMQ hook on the root pipeline of your workflow Click on the pipeline root of a workflow, then choose \u0026lsquo;Add a Hook\u0026rsquo; on the sidebar\nSelect the RabbitMQ Hook and complete the information:\n The binding key (AMQP binding key) The consumer tag (AMQP consumer tag (should not be blank)) The exchange name (Durable, non-auto-deleted AMQP exchange name) The exchange type (Exchange type - direct|fanout|topic|x-custom) The RabbitMQ platform previously configured The queue to listen  Add run condition The workflow will be triggered for all messages received in RabbitMQ queue.\nIf you don\u0026rsquo;t want to launch the root pipeline for each message, you can add a run condition.\n"
},
{
	"uri": "/development/rest/",
	"title": "REST API",
	"tags": [],
	"description": "",
	"content": "How to request CDS API? You need two HTTP Headers to request CDS API:\n Authorization: Bearer cds-session-token  # List CDS Project curl -H \u0026#34;Authorization: Bearer cds-session-token\u0026#34; https://your-cds-api/project   To generate the CDS token please check here  CDS HTTP Routes  action actionBuiltin admin auth bookmarks config download feature group hook import integration link mon notification parameter project queue requirement services suggest template ui user variable worker workflow ws  "
},
{
	"uri": "/docs/tutorials/",
	"title": "Tutorials",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/docs/components/hatchery/update/",
	"title": "Update your hatchery",
	"tags": [],
	"description": "",
	"content": "If you run manually a Hatchery, you probably want to update it when CDS Engine is updated with a new release.\nUpdate your hatchery from CDS API:\n./engine update --api https://your.cds.instance Update your hatchery from latest Release from GitHub:\n./engine update --from-github "
},
{
	"uri": "/docs/concepts/variables/",
	"title": "Variables",
	"tags": ["variable", "variables", "helper", "helpers", "interpolate", "parameters", "parameters"],
	"description": "",
	"content": "In CDS, it is possible to define variables at different levels:\n Project Environment Application  Variable types Existing variable types:\n String Text Boolean Number Password Key  Placeholder format All variables in CDS can be invoked using the simple {{.VAR}} format. To simplify the use between all the variable sources, we have defined the following prefixes:\n Action variable: {{.VAR}} Builtin CDS: {{.cds.VAR}} Git: {{.git.VAR}} Pipeline: {{.cds.pip.VAR}} Application: {{.cds.app.VAR}} Environment: {{.cds.env.VAR}} Project: {{.cds.proj.VAR}} Exported variable at build time: {{.cds.build.VAR}}  Builtin variables Here is the list of builtin variables, generated for every build:\n {{.cds.environment}} The name of the current environment {{.cds.application}} The name of the current application {{.cds.job}} The name of the current job {{.cds.manual}} true if current pipeline is manually run, false otherwise {{.cds.pipeline}} The name of the current pipeline {{.cds.project}} The key of the current project {{.cds.run}} Run Number of current workflow, example: 3.0 {{.cds.run.number}} Number of current workflow, example: 3 if {{.cds.run}} = 3.0 {{.cds.run.subnumber}} Sub Number of current workflow, example: 4 if {{.cds.run}} = 3.4 {{.cds.stage}} The name of the current stage {{.cds.status}} Status or previous pipeline: Success or Failed {{.cds.triggered_by.email}} Email of the user who launched the current build {{.cds.triggered_by.fullname}} Full name of the user who launched the current build {{.cds.triggered_by.username}} Username of the user who launched the current build {{.cds.version}} The current version number, it\u0026rsquo;s an alias to {{.cds.run.number}} {{.cds.workflow}} The name of the current workflow {{.cds.workspace}} Current job\u0026rsquo;s workspace. It\u0026rsquo;s a directory. In a step script, {{.cds.workspace}} == $HOME {{.payload}} The current payload in JSON format  The cds.version variable {{.cds.version}}\nCDS version is a builtin variable, it is transmitted through pipelines of a workflow run.\nExport a variable inside a step In a step of type script, you can export a variable as the following:\n$ worker export varname thevalue You can use the build variable in:\n the current job with {{.cds.build.varname}} the next stages in same pipeline {{.cds.build.varname}} the next pipelines {{.workflow.pipelineName.build.varname}} with pipelineName the name of the pipeline in your workflow  See worker export documentation\nShell Environment Variable All CDS variables, except password type, can be used as plain environment variables.\nTheses lines will have the same output\necho \u0026#39;{{.cds.parent.application}}\u0026#39; echo $CDS_PARENT_APPLICATION Git variables Here is the list of git variables:\n {{.git.hash.before}}: SHA of the most recent commit before the push {{.git.hash}}: SHA of the most recent commit after the push {{.git.hash.short}}: Short version of git.hash {{.git.hook}}: Name of the event that trigger the run {{.git.url}}: Git ssh URL used to clone {{.git.http_url}}: Git http url used to clone {{.git.branch}}:  Push event: Name of the branch where the push occurred PullRequest event: Name of the source branch   {{.git.tag}}: Name of the tag that triggered the run {{.git.author}}: Name of the most recent commit author {{.git.author.email}}: Email of the most recent commit author {{.git.message}}: Git message of the most recent commit {{.git.server}}: Name of the repository manager {{.git.repository}}:  Push event: Name of the repository PullRequest event: Name of the source repository    Here is the list of git variables available only for Bitbucket server\n {{.git.hash.dest}}: SHA of the most rcent commit on destination branch ( PullRequest event ) {{.git.branch.dest}}: Name of the destination branch on a pull request event {{.git.repository.dest}}: Name of the target repository on a pull request event {{.git.pr.id}}: Identifier of the pullrequest {{.git.pr.title}}: Title of the pullrequest {{.git.pr.state}}: Status of the pullrequest {{.git.pr.previous.title}}: Previous title of the pullrequest {{.git.pr.previous.branch}}: Previous target branch of the pullrequest {{.git.pr.previous.hash}}: Previous target hash of the pullrequest {{.git.pr.previous.state}}: Previous status of the pullrequest {{.git.pr.reviewer}}: Name of the reviewer {{.git.pr.reviewer.email}}: Email of the reviewer {{.git.pr.reviewer.status}}: Status of the review {{.git.pr.reviewer.role}}: Role of the reviewer {{.git.pr.comment}}: Comment written by the reviewer {{.git.pr.comment.before}}: Previous comment {{.git.pr.comment.author}}: Author name of the comment {{.git.pr.comment.author.email}} Author email of the comment  Pipeline parameters On a pipeline, you can add some parameters, this will let you to use {{.cds.pip.param_name}} in your pipeline.\nversion: v1.0 name: build parameters: param_name: type: string default: default_value stages: ... This will let you to use {{.cds.pip.param_name}} in your pipeline. Then, in the workflow, you can set the value for pipeline parameter in the pipeline context.\nname: test-workflow version: v2.0 workflow: the-pipeline: pipeline: build parameters: varname: the-value ... You can use a Git or Builtin variable. example:\nname: test-workflow version: v2.0 workflow: the-pipeline: pipeline: build parameters: varname: {{.cds.version}} varname2: {{.cds.pip.param_name}} ... Notice that you can\u0026rsquo;t create a pipeline parameter of type password. If you want to use a variable of type password, you have to create it in your project / application or environment. Then, in your workflow, use this variable to set the value of the pipeline parameter - the pipeline parameter can be of type string.\nYou can also access a pipeline parameter myparam of the pipeline mypipeline from another pipeline in the same workflow using {{.workflow.mypipeline.pip.myparam}}.\nHelpers Some helpers are available to transform the value of a CDS Variable.\nExample: run a pipeline, with an application named my_app. A step script:\necho \u0026quot;{{.cds.application | upper}}\u0026quot; will display\nMY_APP Helpers available and some examples:\n abbrev abbrevboth trunc trim upper: {{.cds.application | upper}} lower: {{.cds.application | lower}} title untitle substr repeat trimall trimAll trimSuffix trimPrefix nospace initials randAlphaNum randAlpha randASCII randNumeric swapcase shuffle snakecase camelcase quote squote indent nindent replace: {{.cds.application | replace \u0026quot;_\u0026quot; \u0026quot;.\u0026quot;}} plural toString default: {{.cds.application | default \u0026quot;\u0026quot;}}, {{.cds.application | default \u0026quot;defaultValue\u0026quot;}}, {{.cds.app.foo | default .cds.app.bar .cds.app.biz }} empty coalesce toJSON toPrettyJSON b64enc b64dec escape: replace \u0026lsquo;_\u0026rsquo;, \u0026lsquo;/\u0026rsquo;, \u0026lsquo;.\u0026rsquo; by \u0026lsquo;-\u0026rsquo;  Advanced usage You can use CDS Variables with default helpers:\n{{.cds.app.foo | default .cds.app.bar }} You can use many helpers:\n{{.cds.app.foo | upper | lower}} {{.cds.app.foo | default .cds.app.bar | default .cds.app.biz | upper }} Deep in code Are you a Go developer? See all helpers on https://github.com/ovh/cds/blob/v0.54.1/sdk/interpolate/interpolate_helper.go#L23 and some unit tests on https://github.com/ovh/cds/blob/v0.54.1/sdk/interpolate/interpolate_test.go#L72\n"
},
{
	"uri": "/docs/tutorials/worker_model-openstack/",
	"title": "Worker Model OpenStack",
	"tags": [],
	"description": "",
	"content": "CDS build using OVH.com OpenStack infrastructure\nCreate OpenStack user In OVH manager, in cloud section, click on the menu on the Servers\u0026gt;OpenStack item.\nYou will be able to create a worker model OpenStack user, enter description (name and password will be generated).\nAdd OpenStack worker model We need to define an OpenStack worker model to have OpenStack hatchery booting workers.\nWe will create a model called testopenstack:\n With low hardware capacity (vps-ssd-1) On Debian 8 With Docker ready to use Git installed  You need to configure:\n The image is your image on which you want to spawn your OpenStack VM The flavor of your OpenStack VM Pattern: if you aren\u0026rsquo;t an administrator you have to choose a configuration pattern in order to fill pre command, worker command and post command with a pattern that an administrator have already fill for you. If you are an administrator:  pre worker command: all scripts that need to be run before execute the worker binary (for example: set the right environment variables, install curl and other tools you need like Docker, \u0026hellip;) main worker command: the command launched to run the worker with right flags thanks to the interpolate variables that CDS fill for you (more information click here). post worker command: the command launched after the execution of your worker. If you need to clean something and then shutdown the VM.    Via UI (inside settings section \u0026ndash;\u0026gt; worker models):\nFor example:\nOr via CLI with a yaml file:\n$ cds worker model import my_worker_model.yml name: testopenstack type: openstack description: \u0026#34;my worker model\u0026#34; group: shared.infra image: \u0026#34;Debian 7\u0026#34; flavor: vps-ssd-1 pre_cmd: |#!/bin/bash set +e # Basic build binaries cd $HOME apt-get -y --force-yes update \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 apt-get -y --force-yes install curl git \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 apt-get -y --force-yes install binutils \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 # Docker installation (FOR DEBIAN) if [[ \u0026#34;x{{.FromWorkerImage}}\u0026#34; = \u0026#34;xtrue\u0026#34; ]]; then echo \u0026#34;$(date) - CDS_FROM_WORKER_IMAGE == true - no install docker required \u0026#34; else # Install Docker apt-get install -y --force-yes apt-transport-https ca-certificates \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D mkdir -p /etc/apt/sources.list.d sh -c \u0026#34;echo deb https://apt.dockerproject.org/repo debian-jessie main \u0026gt; /etc/apt/sources.list.d/docker.list\u0026#34; apt-get -y --force-yes update \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 apt-cache policy docker-engine \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 apt-get install -y --force-yes docker-engine \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 service docker start \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 # Non-root access groupadd docker \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 gpasswd -a ${USER} docker \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 service docker restart \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 fi; curl -L \u0026#34;{{.API}}/download/worker/linux/$(uname -m)\u0026#34; -o worker --retry 10 --retry-max-time 120 -C - \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 chmod +x worker cmd: \u0026#34;./worker --api={{.API}} --token={{.Token}} --basedir={{.BaseDir}} --model={{.Model}} --name={{.Name}} --hatchery={{.Hatchery}} --hatchery-name={{.HatcheryName}} --insecure={{.HTTPInsecure}} --single-use --force-exit\u0026#34; post_cmd: sudo shutdown -h now "
},
{
	"uri": "/docs/concepts/workflow/hooks/gerrit/",
	"title": "Gerrit Hook",
	"tags": [],
	"description": "",
	"content": "Do you want to trigger a workflow from a gerrit event? This kind of hook is for you.\nYou have to:\n link your project to a Gerrit Server, on Advanced Section link an application to a Gerrit repository add a Gerrit Hook on the root pipeline, this pipeline have the application linked in the context  With this hook, you will have access to specific variables:\n gerrit.change.id: ID of the change gerrit.change.url: URL of the change gerrit.change.status: Status of the change gerrit.change.branch: Destination branch of the change gerrit.ref.name: Full reference name within project gerrit.change.ref: Git reference of the change  "
},
{
	"uri": "/docs/concepts/requirement/requirement_os_arch/",
	"title": "OS &amp; Architecture",
	"tags": [],
	"description": "",
	"content": "The OS-Architecture prerequisite allow you to require a worker with a specific OS \u0026amp; Architecture.\nBeware about default value: there is a default value for OS \u0026amp; Architecture, it\u0026rsquo;s specified in CDS API Configuration.\nIf user does not specify a prerequisite os-architecture, the default value is applied when the job is in CDS Queue.\nThen, a hatchery will spawn a worker compiled with the specified os-architecture prerequisite.\nBeware about launching job: if you put a prerequisite os-architecture with value linux/386, the job won\u0026rsquo;t be launched by a worker linux/amd64 even if technically speaking, the worker could launch this job without issue.\nHow to set OS \u0026amp; Architecture Setup default OS \u0026amp; Architecture on a CDS API Configuration ##################### # API Configuration ##################### [api] # if no model and no os/arch is specified in your job\u0026#39;s requirements then spawn worker on this architecture (example: amd64, arm, 386) defaultArch = \u0026#34;amd64\u0026#34; # if no model and os/arch is specified in your job\u0026#39;s requirements then spawn worker on this operating system (example: darwin, freebsd, linux, windows) defaultOS = \u0026#34;linux\u0026#34; "
},
{
	"uri": "/development/sdk/",
	"title": "SDK",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/docs/concepts/workflow/sidebar/",
	"title": "Sidebar",
	"tags": [],
	"description": "",
	"content": "On the left sidebar, there is only one select box for filter on CDS Tags.\nSo, what\u0026rsquo;s a tag? A tag is a CDS Variable, exported as a tag. There are default tags as git.branch, git.hash, triggered_by and environment. For example, if you want to know on which branch the build was launched, you just have to filter on a specific CDS tag (in this case git.branch)\nInside a job, a user can add a Tag with the worker command\nworker tag tagKey=tagValue See worker tag documentation\nTags are useful to add information and context for a run.\nIf you want to filter all runs in sidebar, you can select the tags displayed: go to Workflow → Advanced → \u0026ldquo;Tags to display in the sidebar\u0026rdquo;.\n"
},
{
	"uri": "/docs/tutorials/worker_model-vsphere/",
	"title": "Worker Model vSphere",
	"tags": [],
	"description": "",
	"content": "CDS build using vSphere infrastructure\nAdd vSphere worker model We need to define a vSphere worker model to have vSphere hatchery booting workers.\nWe will create a worker model called debian8-docker:\n On Debian 8 With Docker ready to use Git installed  You need to configure:\n The image is the name of your virtual machine that you have created before on your host to clone (See Advanced) Pattern If you aren\u0026rsquo;t an administrator you have to choose a configuration pattern in order to fill pre command, worker command and post command with a pattern that an administrator have already fill for you. If you are an administrator:  pre worker command: all scripts that need to be run before execute the worker binary (for example: set the right environment variables, install curl and other tools you need like Docker, \u0026hellip;) main worker command: the command launched to run the worker with right flags thanks to the interpolate variables that CDS fill for you (more information click here). post worker command: the command launched after the execution of your worker. If you need to clean something and then shutdown the VM.    Via UI (inside settings section \u0026ndash;\u0026gt; worker models):\nFor example:\nOr via CLI with a yaml file:\n$ cds worker model import my_worker_model.yml name: testvsphere type: vsphere description: \u0026#34;my worker model\u0026#34; group: shared.infra image: debian8 pre_cmd: |#!/bin/bash set +e export CDS_FROM_WORKER_IMAGE={{.FromWorkerImage}} export CDS_API={{.API}} export CDS_TOKEN={{.Token}} export CDS_NAME={{.Name}} export CDS_MODEL={{.Model}} export CDS_HATCHERY={{.Hatchery}} export CDS_HATCHERY_NAME={{.HatcheryName}} export CDS_BOOKED_WORKFLOW_JOB_ID={{.WorkflowJobID}} export CDS_INSECURE={{.HTTPInsecure}} # Basic build binaries cd $HOME apt-get -y --force-yes update \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 apt-get -y --force-yes install curl git \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 apt-get -y --force-yes install binutils \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 # Docker installation (FOR DEBIAN) if [[ \u0026#34;x{{.FromWorkerImage}}\u0026#34; = \u0026#34;xtrue\u0026#34; ]]; then echo \u0026#34;$(date) - CDS_FROM_WORKER_IMAGE == true - no install docker required \u0026#34; else # Install Docker apt-get install -y --force-yes apt-transport-https ca-certificates \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D mkdir -p /etc/apt/sources.list.d sh -c \u0026#34;echo deb https://apt.dockerproject.org/repo debian-jessie main \u0026gt; /etc/apt/sources.list.d/docker.list\u0026#34; apt-get -y --force-yes update \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 apt-cache policy docker-engine \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 apt-get install -y --force-yes docker-engine \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 service docker start \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 # Non-root access groupadd docker \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 gpasswd -a ${USER} docker \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 service docker restart \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 fi; curl -L \u0026#34;{{.API}}/download/worker/linux/$(uname -m)\u0026#34; -o worker --retry 10 --retry-max-time 120 -C - \u0026gt;\u0026gt; /tmp/user_data 2\u0026gt;\u0026amp;1 chmod +x worker cmd: \u0026#34;PATH=$PATH ./worker\u0026#34; post_cmd: sudo shutdown -h now "
},
{
	"uri": "/docs/concepts/workflow/",
	"title": "Workflow",
	"tags": [],
	"description": "",
	"content": "The workflow concept is a key feature, and widely considered a native, manageable and feature-rich entity in CDS. A CDS Workflow allows you to chain pipelines with manual or automatic gates, using conditional branching. A workflow can be stored as code, designed on CDS UI, or both, depending on what best suits you.\nLet’s take an example. One workflow for building and deploying three micro-services:\n Build each micro-service Deploy them in preproduction Run integration tests on preproduction environment Deploy them in production, then re-run integration tests in production  For the building part, there is only one pipeline to manage, which is used three times in the workflow with a different application/environment context each time. This is called the pipeline context.\nAny conditional branching against the workflow (e.g.“automatic deployment on the staging environment, only if the current Git branch is master”) can be executed through a run conditional set on the pipeline.\nLet’s look at a a real use case. This is the workflow that builds, tests and deploys CDS in production at OVH (yes, CDS builds and deploys itself!):\n For each Git commit, the workflow is triggered The UI is packaged, all binaries are prepared, and the docker images are built. The “UT” job launches the unit tests. The “IT” job installs CDS in an ephemeral environment and launches the integration tests on it. Part 2 is automatically triggered on all Git commits. Part 3 deploys CDS on our preproduction environment, then launches the integration tests on it. It is started automatically when the current branch is the master branch. Last but not least, part 4 deploys CDS on our production environment.  If there is a failure on a pipeline, it may look like this:\nBut of course, you’re not limited to the most complex tasks with CDS Workflows! These two examples demonstrate the fact that workflows allow to build and deploy a coherent set of micro-services. If you have simpler needs, your workflows are, of course, simpler.\n"
},
{
	"uri": "/hosting/monitoring/",
	"title": "Monitoring",
	"tags": [],
	"description": "",
	"content": "Status Handler on API https://your.cds.instance/mon/status returns the status of CDS Engine.\nIf status != OK, something is wrong on your CDS Instance.\nExample:\n{ \u0026#34;now\u0026#34;: \u0026#34;2018-01-09T20:24:20.481193492Z\u0026#34;, \u0026#34;lines\u0026#34;: [ { \u0026#34;status\u0026#34;: \u0026#34;OK\u0026#34;, \u0026#34;component\u0026#34;: \u0026#34;Version\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;0.25.1-snapshot+1455.cds\u0026#34; }, ... { \u0026#34;status\u0026#34;: \u0026#34;OK\u0026#34;, \u0026#34;component\u0026#34;: \u0026#34;Database\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;20 conns\u0026#34; }, { \u0026#34;status\u0026#34;: \u0026#34;OK\u0026#34;, \u0026#34;component\u0026#34;: \u0026#34;LastUpdate Connected\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;14\u0026#34; }, { \u0026#34;status\u0026#34;: \u0026#34;OK\u0026#34;, \u0026#34;component\u0026#34;: \u0026#34;Worker Model Errors\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;0\u0026#34; } ... } Monitoring with Command Line # display the current job\u0026#39;s queue ./cdsctl queue # display the status of all service, except the status OK ./cdsctl -c prod health status --filter STATUS=\u0026#34;[^O].*\u0026#34; "
},
{
	"uri": "/docs/concepts/requirement/",
	"title": "Requirement",
	"tags": [],
	"description": "",
	"content": "Requirement types:\n Binary Model Hostname Service Memory OS \u0026amp; Architecture Region Secret  A Job will be executed by a worker.\nCDS will choose a worker dependending on the requirements you define for your job.\nYou can set as many requirements as you want, following these rules:\n Only one model can be set as requirement Only one hostname can be set as requirement Only one OS \u0026amp; Architecture requirement can be set at a time Memory and Services requirements are available only on Docker models Only one region can be set as requirement  "
},
{
	"uri": "/docs/concepts/workflow/run-number/",
	"title": "Run Number",
	"tags": [],
	"description": "",
	"content": "workflow -\u0026gt; advanced section. You can edit the run number to set you old cds.version value.\n{{cds.version}} is always usable, and equals to {{.cds.run.number}}\n"
},
{
	"uri": "/development/sdk/token/",
	"title": "Token creation",
	"tags": [],
	"description": "",
	"content": "There are two types of token in CDS:\n  signin token: can also be named \u0026ldquo;token\u0026rdquo; when using CDS command line. This token is like a scoped \u0026ldquo;password\u0026rdquo; and can be used to sign-in to CDS. You can generate a sign-in token with the web ui or with CDS command line.\n  session token: you should not manipulate it directly as its life is limited. This token is used to authenticate an API call and will be created when you successfully sign-in to CDS.\n  Generate a sign-in token You will be able to generate a new sign-in token for a builtin consumer with the web UI or the command line.\nWith the WEB UI  Go in Settings \u0026gt; Profile \u0026gt; Authentication   Then click on + at the right of My consumers to open modal, then click create to obtain a sign-in token.  With CDS command line  To create a builtin consumer you should first be signed into CDS using local authentication for example.  $ cdsctl consumer new ? Name my-bot ? Description A bot consumer to import my templates ? Select groups availables for the new consumer my-group ? Select scopes availables for the new consumer Template Builtin consumer successfully created, use the following token to sign in: \u0026lt;signin-token-value\u0026gt; Generate a session token Sometimes if you want to call CDS through its APIs you will have to sign-in to obtain a session token like the following:\ncurl -X POST -d \u0026#39;{\u0026#34;token\u0026#34;:\u0026#34;\u0026lt;signin-token-value\u0026gt;\u0026#34;}\u0026#39; http://my-cds/auth/consumer/builtin/signin You will get a response that contains a session token, the session token is also set as a cookie in the response.\n{ \u0026#34;api_url\u0026#34;:\u0026#34;http://my-cds\u0026#34;, \u0026#34;token\u0026#34;:\u0026#34;\u0026lt;session-token-value\u0026gt;\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;:\u0026#34;my-user-uuid\u0026#34;, \u0026#34;created\u0026#34;:\u0026#34;...\u0026#34;, \u0026#34;username\u0026#34;:\u0026#34;my-username\u0026#34;, \u0026#34;fullname\u0026#34;:\u0026#34;My Fullname\u0026#34;, \u0026#34;ring\u0026#34;:\u0026#34;USER\u0026#34; } } "
},
{
	"uri": "/docs/concepts/files/",
	"title": "Configuration files",
	"tags": [],
	"description": "",
	"content": "Using CDS Workflow Configuration Files, checked into source control, provides several benefits:\n Code reviews on the workflow configuration Ability to update workflow configuration from particular branch Gain efficiency while editing the workflow configuration  This usage of CDS Workflow Configuration Files is particularly suitable for single repository CI/CD workflows.\nCDS Workflow Configuration Files relies on several text files with YAML syntax in a .cds directory at the root of your repository. Several files may be used to describe each component, such as applications, environments and pipelines in your CDS workflow.\nBasic example This basic example represents a simple Java application which will be built and deployed from CDS.\n➜ cdsdemo git:(master) ls -la total 8 drwxr-xr-x 6 fsamin staff 192 Mar 27 11:01 . drwxr-xr-x 3 fsamin staff 96 Mar 27 11:01 .. drwxr-xr-x 6 fsamin staff 192 Mar 27 11:01 .cds drwxr-xr-x 12 fsamin staff 384 Mar 27 11:07 .git -rw-r--r-- 1 fsamin staff 23 Mar 27 11:01 .gitignore drwxr-xr-x 4 fsamin staff 128 Mar 27 11:01 api At the root of the repository a .cds directory contains all the CDS Configuration Files.\n➜ cdsdemo git:(master) cd .cds ➜ .cds git:(master) ls -la total 32 drwxr-xr-x 6 fsamin staff 192 Mar 27 11:01 . drwxr-xr-x 6 fsamin staff 192 Mar 27 11:01 .. -rw-r--r-- 1 fsamin staff 201 Mar 27 11:01 build.pip.yml -rw-r--r-- 1 fsamin staff 104 Mar 27 11:01 deploy.pip.yml -rw-r--r-- 1 fsamin staff 28 Mar 27 11:01 demo.app.yml -rw-r--r-- 1 fsamin staff 178 Mar 27 11:01 democds.yml Here we have 4 yaml files, two pipelines: build.pip.yml and deploy.pip.yml, one application demo.app.yml and the overall workflow description file democds.yml.\nWorkflow syntax First of all, here is the workflow file:\nname: democds workflow: build: pipeline: build-jar application: demo deploy: depends_on: - build pipeline: deploy-jar application: demo This is the representation of the whole workflow, starting from build then deploy. As shown, the workflow file contains the description of pipelines orchestration only.\nRead more about CDS workflow syntax\nPipeline syntax The pipelines files represents the most important part of your workflow. The pipeline file represents the jobs triggered within parallel stages.\nRead more about CDS pipeline syntax\nApplication syntax The application file describe the application and the way to checkout it. It can also set number of variables.\nRead more about CDS application syntax\nEnvironment syntax You can attach an environment to a pipeline in a workflow. An environment is basically a set of variables.\nRead more about CDS environment syntax\n"
},
{
	"uri": "/docs/concepts/workflow/notifications/",
	"title": "Notifications",
	"tags": [],
	"description": "",
	"content": "On a workflow you can have 2 kinds of notifications:\n User notifications: they are useful to notify users by email or with a message of an event on your workflow (success, fail, change, etc\u0026hellip;). Events: linked to event integrations to let you write microservices which can interact with these events plugged on your event integrations.  User notifications You can configure user notifications to send email with different parameters. Inside the body of the notification you can customise the message thanks to the CDS variable templating with syntax like {{.cds.myvar}}. You can also use HTML to customise the message, then in order to let CDS interpret your message as an HTML one you just need to wrap all your message inside html tag like this \u0026lt;html\u0026gt;MyContentHere\u0026lt;/html\u0026gt;.\nVCS Notifications You can configure for which node in your workflow CDS have to send a status on your repository service provider (Github, Bitbucket, \u0026hellip;). You can configure if you want to have a comment on your pull-request when your workflow fails or you can just disable pull-request comment to only have status of your pipelines. By default you already have a default template for your pull-request comment but you can customize it with different kinds of templating. To have access about the node run data and write some loops and conditions you can use the standard syntax as the go templating but with [[ ]] delimitters. You can also use the CDS interpolation engine with the same syntax you already know and use inside pipelines, for example: {{.cds.workflow}} to get the name of the workflow.\nFor the go templating you have few variables you can use/iterate over.\n .Stages: an array of stages with .RunJobsinside which are the array of runned jobs with their .Name  .RunJobs: Inside a stage object which are the array of runned jobs  .Job.Action.Name: The name of the runned job .Job.Status: The status of runned job     .Tests: array of tests results  .Total: total number of tests .TotalOK: total number of OK tests .TotalKO: total number of KO tests .TotalSkipped: total number of skipped tests    If you need to know about other variable you can check WorkflowNodeRun data structure here.\nFor example by default the template of pull-request comment is:\n[[- if .Stages ]] CDS Report [[.WorkflowNodeName]]#[[.Number]].[[.SubNumber]] [[ if eq .Status \u0026quot;Success\u0026quot; -]] ✔ [[ else ]][[ if eq .Status \u0026quot;Fail\u0026quot; -]] ✘ [[ else ]][[ if eq .Status \u0026quot;Stopped\u0026quot; -]] ■ [[ else ]]- [[ end ]] [[ end ]] [[ end ]] [[- range $s := .Stages]] [[- if $s.RunJobs ]] * [[$s.Name]] [[- range $j := $s.RunJobs]] * [[$j.Job.Action.Name]] [[ if eq $j.Status \u0026quot;Success\u0026quot; -]] ✔ [[ else ]][[ if eq $j.Status \u0026quot;Fail\u0026quot; -]] ✘ [[ else ]][[ if eq $j.Status \u0026quot;Stopped\u0026quot; -]] ■ [[ else ]]- [[ end ]] [[ end ]] [[ end ]] [[- end]] [[- end]] [[- end]] [[- end]] [[- if .Tests ]] [[- if gt .Tests.TotalKO 0]] Unit Tests Report [[- range $ts := .Tests.TestSuites]] * [[ $ts.Name ]] [[range $tc := $ts.TestCases]] [[- if or ($tc.Errors) ($tc.Failures) ]] * [[ $tc.Name ]] ✘ [[- end]] [[end]] [[- end]] [[- end]] [[- end]] Which, for a pipeline with 1 stage and a job in failure, is displayed like this:\nCDS Report build#11.0 ✘ * Stage 1 * my job ✘ And displayed on GitHub:\nEvents If you need to trigger some specific actions on the technical side, like for example use a microservice which listens to all events in your workflow (updates, launch, stop, etc.), you can add an event integration like, for example, Kafka and listen to the kafka topic to trigger some actions on your side. Events are more like sending notifications to machines instead of user notifications which are made for users. The see structure of sent events, you can look here and here.\n"
},
{
	"uri": "/hosting/upgrade/",
	"title": "Upgrade your CDS Instance",
	"tags": [],
	"description": "",
	"content": "Upgrade Binary Update your CDS Engine binary from latest Release from GitHub:\n./engine update --from-github Database Migration # get the file sql.tar.gz from latest release from https://github.com/ovh/cds/releases # unzip sql.tar.gz inside a sql/ directory, then run this command: ./engine database upgrade --db-password=cds --db-sslmode=disable --db-name=cds --db-schema=public --migrate-dir=sql/api --db-connect-timeout=20 ./engine database upgrade --db-password=cds --db-sslmode=disable --db-name=cds --db-schema=cdn --migrate-dir=sql/cdn --db-connect-timeout=20 Restart your CDS API ./engine start api ... "
},
{
	"uri": "/docs/concepts/worker-model/",
	"title": "Worker Model",
	"tags": [],
	"description": "",
	"content": "Purpose The goal of CDS is to start a worker when you need it, which should match all your requirements exactly. In order to scale automatically on demand, it is possible to register a worker model.\nThe goal of a worker model is to describe the capabilities of a given Docker/ISO image in terms of architecture, pre-installed binaries or libraries.\nTypes There are 4 types of worker models:\n Docker images, see how to create a worker model Docker OpenStack images, see how to create a worker model OpenStack vSphere images, see how to create a worker model vSphere Host worker model, which means workers launched on the same host as the hatchery. The security implication of such setup is lack of isolation between worker processes. They will share host resources like CPU, RAM, file system etc. For this reason, we don\u0026rsquo;t recommend using this model in production.  Behavior All registered CDS hatcheries start/kill workers as needed.\nAdd a worker model A user can add a worker model by setting an owner group if user is administrator of group.\nA CDS administrator can add a worker model, a worker model pattern and attach it to \u0026lsquo;shared.infra\u0026rsquo; group.\nWhat\u0026rsquo;s a worker model pattern? A pattern of scripts configuration of CDS workers that CDS administrator create to let users use this pattern when they want to create a worker model. For more information click here.\nWhat\u0026rsquo;s a restricted worker model? A shared.infra hatchery can launch all worker models, except \u0026lsquo;restricted\u0026rsquo; worker models.\nUse case: users can launch their own hatchery. To use their worker models only with their hatchery, they have to set worker model as \u0026lsquo;restricted\u0026rsquo;.\n"
},
{
	"uri": "/docs/concepts/template/",
	"title": "Workflow Template",
	"tags": [],
	"description": "",
	"content": "What is a workflow template? A workflow template is useful to easily create a new workflow for a project. Also if you need to manage multiple workflows, you can use a template to create one unique and generic workflow then apply it on each workflow.\nTemplates are versioned, so you can easily improve your template then re-apply it on a workflow.\nA template contains a workflow, pipelines, applications, environments in yaml format. Each yaml file of a template is evaluated as a Golang template (with [[ and ]] delimiters) so loop or condition can be used in templates.\nTemplate parameters There are six types of custom parameters available in a template (boolean, string, repository, json, ssh-key, pgp-key).\nCustom parameters are available with the .params. prefix. For instance, the value of the custom deployWhen parameter can be used with [[ .params.deployWhen ]] like in the image below.\nThere are some other parameters that are automatically added by CDS:\n name: the name of the generated workflow given when template is applied (could be used to set the workflow name but also application names for example). It can be used with [[ .name ]]. id: the id of the template instance, this is unique for each generated workflow and reused when a template is re-applied (you can append this value to pipeline names to prevent override of existing pipeline). It can be used with [[ .id ]].  Apply a template To generate a new workflow from a template you should use the cdsctl. Then use the same command to update a generated workflow:\ncdsctl template apply   You can also create a workflow from a template with the web UI.\nBulk apply a template To generate or update multiple workflows from a same template in one time you can use the bulk feature. This works both in cdsctl and cds ui:\ncdsctl template bulk You can also use a file to list all test instances that you want to generate and the values for all the required parameters.\ntemplate_path: shared.infra/example-simple  instances: - workflow_path: DEMO/demo1  parameters: - withDeploy=true  - deployWhen=success  - workflow_path: DEMO/demo2  parameters: - withDeploy=false  - data=[\u0026#34;one\u0026#34;, \u0026#34;two\u0026#34;]  cdsctl template bulk -f instances.yml   Import/Create/Export With cdsctl you can import/export a template from/to yaml files, you can also create a template in the UI from the settings menu:\ncdsctl template push ./my-template/*.yml #from local files cdsctl template push https://raw.githubusercontent.com/ovh/cds/v0.54.1/tests/fixtures/template/simple/example-simple.yml #from remote files cdsctl template pull shared.infra/my-template --output-dir ./my-template   Delete/Change template group When removing a template, all info about the template and its instances are removed but all generated stuff will not be deleted. With the CDS UI you can change the template name or group, this will not affect template instances or generated workflow but no group members will be able to re-apply the template anymore.\nTemplate and workflow ascode You can both use a template and a workflow ascode. When using a template your repository will only contains one yaml file with the name of the template that you want to use and the values for all the required template parameters. You can create this file manually or directly with the CDS command line.\nname: demo from: shared.infra/example-with-repository@1 parameters: deployWhen: manual repo: gitlab/richardlt/demo ssh_key_name: proj-ssh-key withDeploy: \u0026#34;true\u0026#34;   You can ask for a specific revision of the template or remove the version number to always get the its latest version. This means that you can use different template versions for different branches of your repository. Also you can change the template reference to use another template on a specific branch.\n"
},
{
	"uri": "/docs/concepts/workflow/retention/",
	"title": "Retention",
	"tags": [],
	"description": "",
	"content": "You can configure two options in Workflow advanced section on the CDS UI:\n Workflow run retention policy. A lua rule to check if a run should be kept or not. Maximum number of Workflow Runs. The maximum number of run to keep for the Workflow.  The dry run button allows you to test your lua expression. The result is a table filled with all runs that would be kept\nWorkflow run retention policy This feature is not currently enabled by default. However, you can try this feature on a CDS project using the feature flipping. To activate the feature you can create a file like the following:\ncat \u0026lt;\u0026lt;EOF \u0026gt; workflow-retention-policy.yml name: workflow-retention-policy rule: return project_key == \u0026#34;KEY_FOR_PROJECT_THAT_YOU_WANT_TO_ACTIVATE\u0026#34; EOF cdsctl admin feature import workflow-retention-policy.yml  Retention policy is defined through a lua condition. This condition should be evaluated as true to keep a Workflow Run.\nYou will be able to use these variables in conditions:\n run_days_before (number): count of days between Workflow creation date and now. has_git_branch (string: true|false): True if a git.branch variable is set (added in 0.48.1). git_branch_exist (string: true|false): True if a git.branch variable is set and branch still exists on the git repository. run_status (string: Success|Fail|\u0026hellip;): the Workflow Run status. gerrit_change_merged (string: true|false): to identify if the gerrit change has been merged. gerrit_change_abandoned (string: true|false): to identify if the gerrit change has been abandoned. gerrit_change_days_before (number): to identify gerrit change older than x days. All other variables from the Workflow Run payload (ex: cds_triggered_by_username, git_branch\u0026hellip;).  Examples:\n-- Keep Run for 365 days return run_days_before \u0026lt; 365 -- Keep Run for 365 days if git_branch is set and exists in VCS or only 2 days for removed branches -- Else keep Run for 365 days if no git_branch info is set if(has_git_branch == \u0026#34;true\u0026#34;) then if(git_branch_exist == \u0026#34;true\u0026#34;) then return run_days_before \u0026lt; 365 else return run_days_before \u0026lt; 2 end else return run_days_before \u0026lt; 365 end -- Keep Run for ever return true Maximum number of Workflow Runs This feature is not currently enabled by default. However, you can try this feature on a CDS project using the feature flipping. To activate the feature you can create a file like the following:\ncat \u0026lt;\u0026lt;EOF \u0026gt; workflow-retention-maxruns.yml name: workflow-retention-maxruns rule: return project_key == \u0026#34;KEY_FOR_PROJECT_THAT_YOU_WANT_TO_ACTIVATE\u0026#34; EOF cdsctl admin feature import workflow-retention-maxruns.yml  This value can be set only by a CDS administrator. In some case it prevent a Workflow to keep a lot of runs. When this feature is active, you\u0026rsquo;ll not be able to start new Runs on a Workflow if the maximum count was reached.\n"
},
{
	"uri": "/hosting/user_authentication/",
	"title": "User Authentication",
	"tags": [],
	"description": "",
	"content": "CDS can use several authentication backends:\n local LDAP GitHub GitLab  All backends can be enabled at the same time, ie. a user can authenticate both with GitHub, GitLab, Ldap or with local authentication at the same time.\nLocal Authentication Edit the toml configuration file:\n section [api.auth.local]  enable the signin with enabled = true if you want to disable signup, set signupDisabled = true you can authorize only some domains with the key signupAllowedDomains    [api.auth.local] enabled = true # Allow signup from selected domains only - comma separated. Example: your-domain.com,another-domain.com # signupAllowedDomains = \u0026#34;\u0026#34; signupDisabled = false User Token See Token Documentation\n"
},
{
	"uri": "/about/",
	"title": "About",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/development/rest/action/",
	"title": "action",
	"tags": [],
	"description": "",
	"content": "DELETE /action/\u0026lt;group-name\u0026gt;/\u0026lt;action-name\u0026gt;    URL /action/\u0026lt;group-name\u0026gt;/\u0026lt;action-name\u0026gt;     Method DELETE   Permissions Auth: true   Scopes Action   Code deleteActionHandler    GET /action/\u0026lt;group-name\u0026gt;/\u0026lt;action-name\u0026gt;/audit    URL /action/\u0026lt;group-name\u0026gt;/\u0026lt;action-name\u0026gt;/audit     Method GET   Permissions Auth: true   Scopes Action   Code getActionAuditHandler    GET /action/\u0026lt;group-name\u0026gt;/\u0026lt;action-name\u0026gt;/export    URL /action/\u0026lt;group-name\u0026gt;/\u0026lt;action-name\u0026gt;/export     Method GET   Permissions Auth: true   Scopes Action   Code getActionExportHandler    GET /action/\u0026lt;group-name\u0026gt;/\u0026lt;action-name\u0026gt;/usage    URL /action/\u0026lt;group-name\u0026gt;/\u0026lt;action-name\u0026gt;/usage     Method GET   Permissions Auth: true   Scopes Action   Code getActionUsageHandler    GET /action/\u0026lt;group-name\u0026gt;/\u0026lt;action-name\u0026gt;    URL /action/\u0026lt;group-name\u0026gt;/\u0026lt;action-name\u0026gt;     Method GET   Permissions Auth: true   Scopes Action   Code getActionHandler    GET /action    URL /action     Method GET   Permissions Auth: true   Scopes Action   Code getActionsHandler    POST /action/\u0026lt;group-name\u0026gt;/\u0026lt;action-name\u0026gt;/audit/\u0026lt;audit-id\u0026gt;/rollback    URL /action/\u0026lt;group-name\u0026gt;/\u0026lt;action-name\u0026gt;/audit/\u0026lt;audit-id\u0026gt;/rollback     Method POST   Permissions Auth: true   Scopes Action   Code postActionAuditRollbackHandler    POST /action/import    URL /action/import     Method POST   Permissions Auth: true   Scopes Action   Code importActionHandler    POST /action    URL /action     Method POST   Permissions Auth: true   Scopes Action   Code postActionHandler    PUT /action/\u0026lt;group-name\u0026gt;/\u0026lt;action-name\u0026gt;    URL /action/\u0026lt;group-name\u0026gt;/\u0026lt;action-name\u0026gt;     Method PUT   Permissions Auth: true   Scopes Action   Code putActionHandler    "
},
{
	"uri": "/docs/components/cdsctl/action/",
	"title": "action",
	"tags": [],
	"description": "",
	"content": "cdsctl action Manage CDS action\nSynopsis Manage CDS action\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl\t- CDS Command line utility cdsctl action builtin\t- Manage CDS builtin action cdsctl action delete\t- Delete a CDS action cdsctl action doc\t- Generate action documentation: cdsctl action doc \u0026lt;path-to-file\u0026gt; cdsctl action export\t- Export a CDS action cdsctl action import\t- Import a CDS action cdsctl action list\t- List CDS actions cdsctl action show\t- Show a CDS action cdsctl action usage\t- CDS action usage  "
},
{
	"uri": "/development/rest/actionbuiltin/",
	"title": "actionBuiltin",
	"tags": [],
	"description": "",
	"content": "GET /actionBuiltin/\u0026lt;action-name\u0026gt;/usage    URL /actionBuiltin/\u0026lt;action-name\u0026gt;/usage     Method GET   Permissions Auth: true   Scopes Admin   Code getActionBuiltinUsageHandler    GET /actionBuiltin/\u0026lt;action-name\u0026gt;    URL /actionBuiltin/\u0026lt;action-name\u0026gt;     Method GET   Permissions Auth: true   Code getActionBuiltinHandler    GET /actionBuiltin    URL /actionBuiltin     Method GET   Permissions Auth: true   Code getActionsBuiltinHandler    "
},
{
	"uri": "/docs/components/cdsctl/admin/organization/add/",
	"title": "add",
	"tags": [],
	"description": "",
	"content": "cdsctl admin organization add Add a new Organization on CDS\nSynopsis Add a new Organization on CDS\ncdsctl admin organization add ORGANIZATION-NAME Examples cdsctl admin organization add \u0026lt;organization-name\u0026gt; Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin organization\t- Manage CDS Organization  "
},
{
	"uri": "/docs/components/cdsctl/application/keys/add/",
	"title": "add",
	"tags": [],
	"description": "",
	"content": "cdsctl application keys add Add a new key on application. key type can be ssh or pgp\nSynopsis Add a new key on application. key type can be ssh or pgp\ncdsctl application keys add [ PROJECT-KEY APPLICATION-NAME ] KEY-NAME KEY-TYPE Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl application keys\t- Manage CDS application keys  "
},
{
	"uri": "/docs/components/cdsctl/application/variable/add/",
	"title": "add",
	"tags": [],
	"description": "",
	"content": "cdsctl application variable add Add a new variable on application. variable type can be one of password, text, string, key, boolean, number, repository\nSynopsis Add a new variable on application. variable type can be one of password, text, string, key, boolean, number, repository\ncdsctl application variable add [ PROJECT-KEY APPLICATION-NAME ] VARIABLE-NAME VARIABLE-TYPE VARIABLE-VALUE Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl application variable\t- Manage CDS application variables  "
},
{
	"uri": "/docs/components/cdsctl/environment/keys/add/",
	"title": "add",
	"tags": [],
	"description": "",
	"content": "cdsctl environment keys add Add a new key on environment. key-type can be ssh or pgp\nSynopsis Add a new key on environment. key-type can be ssh or pgp\ncdsctl environment keys add [ PROJECT-KEY ] ENV-NAME KEY-NAME KEY-TYPE Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl environment keys\t- Manage CDS environment keys  "
},
{
	"uri": "/docs/components/cdsctl/environment/variable/add/",
	"title": "add",
	"tags": [],
	"description": "",
	"content": "cdsctl environment variable add Add a new variable on environment. variable type can be one of password, text, string, key, boolean, number, repository\nSynopsis Add a new variable on environment. variable type can be one of password, text, string, key, boolean, number, repository\ncdsctl environment variable add [ PROJECT-KEY ] ENV-NAME VARIABLE-NAME VARIABLE-TYPE VARIABLE-VALUE Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl environment variable\t- Manage CDS environment variables  "
},
{
	"uri": "/docs/components/cdsctl/experimental/hatchery/add/",
	"title": "add",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental hatchery add Create a new hatchery\nSynopsis Create a new hatchery\ncdsctl experimental hatchery add HATCHERYIDENTIFIER [flags] Examples cdsctl hatchery add \u0026lt;hatchery_name\u0026gt; Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl experimental hatchery\t- CDS Experimental hatchery commands  "
},
{
	"uri": "/docs/components/cdsctl/experimental/organization/add/",
	"title": "add",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental organization add Create a new organization\nSynopsis Create a new organization\ncdsctl experimental organization add ORGANIZATIONIDENTIFIER Examples cdsctl organization add \u0026lt;organization_name\u0026gt; Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental organization\t- CDS Experimental organization commands  "
},
{
	"uri": "/docs/components/cdsctl/experimental/project/repository/add/",
	"title": "add",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental project repository add Add a repository on the project\nSynopsis Add a repository on the project\ncdsctl experimental project repository add [ PROJECT-KEY ] VCS-NAME REPOSITORY-NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental project repository\t- Manage repositories on a CDS project  "
},
{
	"uri": "/docs/components/cdsctl/experimental/project/variableset/add/",
	"title": "add",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental project variableset add Create a new variableset inside the given project\nSynopsis Create a new variableset inside the given project\ncdsctl experimental project variableset add [ PROJECT-KEY ] NAME Examples cdsctl exp project variableset add MY-PROJECT MY-VARIABLESET-NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental project variableset\t- Manage Variable Set on a CDS project  "
},
{
	"uri": "/docs/components/cdsctl/experimental/project/variableset/item/add/",
	"title": "add",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental project variableset item add Create a new item inside a variable set\nSynopsis Create a new item inside a variable set\ncdsctl experimental project variableset item add [ PROJECT-KEY ] VARIABLESET-NAME ITEM-NAME ITEM-VALUE ITEM-TYPE [flags] Examples cdsctl exp project variableset item add MY-PROJECT MY-VARIABLESET-NAME ITEM-NAME ITEM-VALUE ITEM-TYPE(secret|string) Options  --force create the variable set if it not exists Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental project variableset item\t- Manage item on a CDS project Variable Set  "
},
{
	"uri": "/docs/components/cdsctl/experimental/region/add/",
	"title": "add",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental region add Create a new region\nSynopsis Create a new region\ncdsctl experimental region add REGIONIDENTIFIER Examples cdsctl region add \u0026lt;region_name\u0026gt; Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental region\t- CDS Experimental region commands  "
},
{
	"uri": "/docs/components/cdsctl/group/member/add/",
	"title": "add",
	"tags": [],
	"description": "",
	"content": "cdsctl group member add Add or edit a member for a group\nSynopsis Add or edit a member for a group\ncdsctl group member add GROUP-NAME USERNAME ADMIN Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl group member\t- Manage group's member  "
},
{
	"uri": "/docs/components/cdsctl/project/keys/add/",
	"title": "add",
	"tags": [],
	"description": "",
	"content": "cdsctl project keys add Add a new key on project. key-type can be ssh or pgp\nSynopsis Add a new key on project. key-type can be ssh or pgp\ncdsctl project keys add [ PROJECT-KEY ] KEY-NAME KEY-TYPE Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl project keys\t- Manage CDS project keys  "
},
{
	"uri": "/docs/components/cdsctl/project/variable/add/",
	"title": "add",
	"tags": [],
	"description": "",
	"content": "cdsctl project variable add Add a new variable on project. Variable type can be one of password, text, string, key, boolean, number, repository\nSynopsis Add a new variable on project. Variable type can be one of password, text, string, key, boolean, number, repository\ncdsctl project variable add [ PROJECT-KEY ] VARIABLE-NAME VARIABLE-TYPE [VARIABLE-VALUE] [flags] Options  --stdin read the variable value from stdin Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl project variable\t- Manage CDS project variables  "
},
{
	"uri": "/docs/components/cdsctl/workflow/label/add/",
	"title": "add",
	"tags": [],
	"description": "",
	"content": "cdsctl workflow label add Add label on one workflow\nSynopsis Add label on one workflow\ncdsctl workflow label add [ PROJECT-KEY WORKFLOW-NAME ] LABEL Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl workflow label\t- Manage Workflow Label  "
},
{
	"uri": "/docs/components/worker/run-result/add/",
	"title": "add",
	"tags": [],
	"description": "",
	"content": "worker run-result add worker run-result add\nSynopsis Inside a job, add a run result\nSEE ALSO  worker run-result\t- worker run-result worker run-result add artifact-manager\t- worker run-result add artifact-manager \u0026lt;artifact_name\u0026gt; \u0026lt;repository_name\u0026gt; \u0026lt;path_inside_repository\u0026gt; worker run-result add static-file\t- worker run-result add static-file \u0026lt;name\u0026gt; \u0026lt;remote_url\u0026gt;  "
},
{
	"uri": "/development/rest/admin/",
	"title": "admin",
	"tags": [],
	"description": "",
	"content": "GET /admin/services/call    URL /admin/services/call     Method GET   Permissions Auth: true   Scopes Admin   Code authMaintainerMiddleware    "
},
{
	"uri": "/docs/components/cdsctl/admin/",
	"title": "admin",
	"tags": [],
	"description": "",
	"content": "cdsctl admin Manage CDS (admin only)\nSynopsis Manage CDS (admin only)\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl\t- CDS Command line utility cdsctl admin cdn\t- Manage CDS CDN uService cdsctl admin curl\t- Execute request to CDS api cdsctl admin database\t- Manage CDS Database cdsctl admin features\t- Manage CDS feature flipping rules cdsctl admin hooks\t- Manage CDS Hooks tasks cdsctl admin integration-model\t- Manage CDS Integration models cdsctl admin maintenance\t- Manage CDS maintenance cdsctl admin metadata\t- Manage CDS Metadata cdsctl admin migration\t- Manage CDS Migrations cdsctl admin organization\t- Manage CDS Organization cdsctl admin plugins\t- Manage CDS Plugins cdsctl admin repositories\t- Manage CDS repositories uService cdsctl admin services\t- Manage CDS services cdsctl admin users\t- Manage CDS users cdsctl admin workflows\t- Manage CDS workflows  "
},
{
	"uri": "/docs/components/cdsctl/workflow/advanced/",
	"title": "advanced",
	"tags": [],
	"description": "",
	"content": "cdsctl workflow advanced Manage Workflow Advanced\nSynopsis Manage Workflow Advanced\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl workflow\t- Manage CDS workflow cdsctl workflow advanced delete\t- Delete a CDS workflow cdsctl workflow advanced number\t- Manage Workflow Run Number  "
},
{
	"uri": "/docs/components/cdsctl/experimental/project/analysis/",
	"title": "analysis",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental project analysis Manage repository analysis\nSynopsis Manage repository analysis\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental project\t- CDS Experimental project commands cdsctl experimental project analysis list\t- List all repository analysis cdsctl experimental project analysis show\t- Get the given analysis cdsctl experimental project analysis trigger\t- Trigger an analysis on the given branch  "
},
{
	"uri": "/docs/components/cdsctl/admin/metadata/application/",
	"title": "application",
	"tags": [],
	"description": "",
	"content": "cdsctl admin metadata application Manage CDS Application Metadata\nSynopsis Manage CDS Application Metadata\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin metadata\t- Manage CDS Metadata cdsctl admin metadata application export\t- export CDS Application Metadata cdsctl admin metadata application import\t- import CDS Application Metadata  "
},
{
	"uri": "/docs/components/cdsctl/application/",
	"title": "application",
	"tags": [],
	"description": "",
	"content": "cdsctl application Manage CDS application\nSynopsis Manage CDS application\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl\t- CDS Command line utility cdsctl application create\t- Create a CDS application cdsctl application delete\t- Delete a CDS application cdsctl application export\t- Export an application cdsctl application import\t- Import an application with a local filepath or an URL cdsctl application keys\t- Manage CDS application keys cdsctl application list\t- List CDS applications cdsctl application show\t- Show a CDS application cdsctl application usage\t- CDS application usage cdsctl application variable\t- Manage CDS application variables  "
},
{
	"uri": "/docs/components/cdsctl/template/apply/",
	"title": "apply",
	"tags": [],
	"description": "",
	"content": "cdsctl template apply Apply CDS workflow template\nSynopsis Apply CDS workflow template\ncdsctl template apply [ PROJECT-KEY WORKFLOW-NAME ] [TEMPLATE-PATH] [flags] Examples cdsctl template apply project-key workflow-name group-name/template-slug Options  --detach Set to generate a workflow detached from the template --force Force, may override files --import-as-code If true, will import the generated workflow as code on given project --import-push If true, will push the generated workflow on given project -d, --output-dir string Output directory (default \u0026quot;.cds\u0026quot;) -p, --params stringArray Specify params for template like --params paramKey=paramValue --quiet If true, do not output filename created Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl template\t- Manage CDS workflow template  "
},
{
	"uri": "/docs/components/cdsctl/workflow/applytemplate/",
	"title": "applyTemplate",
	"tags": [],
	"description": "",
	"content": "cdsctl workflow applyTemplate Apply CDS workflow template\nSynopsis Apply CDS workflow template\ncdsctl workflow applyTemplate [ PROJECT-KEY WORKFLOW-NAME ] [TEMPLATE-PATH] [flags] Examples cdsctl template apply project-key workflow-name group-name/template-slug Options  --detach Set to generate a workflow detached from the template --force Force, may override files --import-as-code If true, will import the generated workflow as code on given project --import-push If true, will push the generated workflow on given project -d, --output-dir string Output directory (default \u0026quot;.cds\u0026quot;) -p, --params stringArray Specify params for template like --params paramKey=paramValue --quiet If true, do not output filename created Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl workflow\t- Manage CDS workflow  "
},
{
	"uri": "/docs/components/cdsctl/workflow/artifact/",
	"title": "artifact",
	"tags": [],
	"description": "",
	"content": "cdsctl workflow artifact Manage Workflow Artifact\nSynopsis Manage Workflow Artifact\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl workflow\t- Manage CDS workflow cdsctl workflow artifact download\t- Download artifacts of one Workflow Run  "
},
{
	"uri": "/docs/actions/builtin-artifact-download/",
	"title": "Artifact Download",
	"tags": [],
	"description": "",
	"content": "Artifact Download is a builtin action, you can\u0026rsquo;t modify it.\nThis action can be used to retrieve an artifact previously uploaded by an Artifact Upload.\nParameters  path: Path where artifacts will be downloaded. pattern: (optional) Empty: download all files. Otherwise, enter regexp pattern to choose file: (fileA|fileB). tag: Artifact are uploaded with a tag, generally {{.cds.version}}.  Requirements No Requirement\nYAML example Example of a pipeline using Artifact Download action:\nversion: v1.0 name: Pipeline1 stages: - Stage1 jobs: - job: Job1 stage: Stage1 steps: - artifactDownload: path: \u0026#39;{{.cds.workspace}}\u0026#39; pattern: \u0026#39;*.tag.gz\u0026#39; tag: \u0026#39;{{.cds.version}}\u0026#39; Example  Workflow Configuration: a pipeline doing an upload artifact and another doing a download artifact.   Run pipeline, check logs  Worker Download Command You can download an artifact with the built-in action - or use the worker command.\nExample of a step script using worker download command\n"
},
{
	"uri": "/docs/actions/builtin-artifact-upload/",
	"title": "Artifact Upload",
	"tags": [],
	"description": "",
	"content": "Artifact Upload is a builtin action, you can\u0026rsquo;t modify it.\nThis action can be used to upload artifacts in CDS. This is the recommended way to share files between pipelines or stages.\nParameters  destination: (optional) Destination of this artifact. Use the name of integration attached on your project. path: Path of file to upload, example: ./src/yourFile.json. tag: Artifact will be uploaded with a tag, generally {{.cds.version}}.  Requirements No Requirement\nYAML example Example of a pipeline using Artifact Upload action:\nversion: v1.0 name: Pipeline1 stages: - Stage1 jobs: - job: Job1 stage: Stage1 steps: - artifactUpload: path: \u0026#39;{{.cds.workspace}}/myFile\u0026#39; tag: \u0026#39;{{.cds.version}}\u0026#39; Example  Create a file myfile and upload it.   Launch pipeline, check logs   View artifact  Worker Upload Command You can upload an artifact with the built-in action - or use the worker command.\nExample of a step script using worker upload command\n"
},
{
	"uri": "/docs/components/worker/run-result/add/artifact-manager/",
	"title": "artifact-manager",
	"tags": [],
	"description": "",
	"content": "worker run-result add artifact-manager worker run-result add artifact-manager \u0026lt;artifact_name\u0026gt; \u0026lt;repository_name\u0026gt; \u0026lt;path_inside_repository\u0026gt;\nSynopsis Inside a job, add a run result of type artifact manager: Worker Command:\nworker run-result add artifact-manager \u0026lt;artifact_name\u0026gt; \u0026lt;repository_name\u0026gt; \u0026lt;path_inside_repository\u0026gt;  Example:\nworker run-result add artifact-manager custom/debian:10 my-docker-repository-name custom/debian/10  worker run-result add artifact-manager SEE ALSO  worker run-result add\t- worker run-result add  "
},
{
	"uri": "/docs/integrations/artifact-manager/",
	"title": "Artifactory",
	"tags": [],
	"description": "",
	"content": "The Artifactory integration uses the builtin integration model \u0026ldquo;Artifact Manager\u0026rdquo; and can be configured on every project by users\nThis integration allows you:\n to upload/download artifact into artifactory to create a new artifactory build from your workflow run results to create a release bundle using artifacts previously uploaded in artifactory  Recommendations To take full advantage of this integration, we recommend a few things:\n Naming your local repositories like this: [team]-[technology]-[maturity] Having virtual repositories named like this: [team]-[technology]  For example, you need a generic repository for CDS artifacts. You can create something like:\n Virtual repository: myteam-docker Snapshot repository: myteam-docker-snapshot Release repository: myteam-docker-release  By using this convention, the CDS release action will be able to promote your artifacts from snapshot to release repositories\nHow to configure Artifactory integration on your project Link Artifactory to your project On the integration project view, add a new \u0026ldquo;Artifact Manager\u0026rdquo; integration and fill the following parameters:\n name: The name of the integration. platform: Must be \u0026lsquo;artifactory\u0026rsquo; url: URL of artifactory api (https//myinstance.ofartifactory/artifactory/) project.key: The name of the artifactory project (https://www.jfrog.com/confluence/display/JFROG/Projects) cds.repository: The name of the repository used by CDS to upload/download artifacts (must be a virtual repository) token.name: The name of the access token used by CDS to access the artifactory API token: The value of the access token used by CDS to access the artifactory API release.token: The value of the access token used by CDS to access the distribution API (https://www.jfrog.com/confluence/display/JFROG/JFrog+Distribution) promotion.maturity.low: suffix used on your local repositories to identify your snapshots  Enable Artifactory integration on your workflow On the workflow advanced view, you can link your workflow to project integration.\nIntegration actions The artifactory integration comes with 5 actions: https://github.com/ovh/cds/tree/master/contrib/integrations/artifactory\nArtifactory-Upload-Artifact This plugin is used by CDS Upload Artifact action to send artifact into artifactory.\nThe artifacts will be stored in the cds repository provided during the integration configuration (cds.repository)\nArtifactory-Download-Artifact This plugin is used by CDS Download Artifact action to retrieve artifact from artifactory.\nThe artifacts will be downloaded from the cds repository provided during the integration configuration (cds.repository)\nArtifactory-Push-Build-Info This plugin is used by CDS Push Build Info action to create inside artifactory a build-info. JFrog documentation: https://www.jfrog.com/confluence/display/JFROG/Build+Integration\nThis action must be run after all the artifacts have been uploaded.\nThe build name computed by CDS will be: [build.info.path]/[cds.projectkey]/[cds.workflow.name]\nArtifactory-Promote This plugin is used by CDS Promote action to move artifacts from 1 repository to another. The two repositories must share the name but having a different suffix.\nFor example:\n my-docker-repo-snapshot my-docker-repo-release  Artifactory-Release This plugin is used by CDS Release action.\nIt promotes the provided artifacts, creates a release bundle and distributes it to all edges.\nThis action uses both the artifactory and distribution APIs.\n"
},
{
	"uri": "/docs/actions/artifactorypromote/",
	"title": "artifactoryPromote",
	"tags": [],
	"description": "",
	"content": "Promote artifactory package from a repository to another\nParameters  artifacts: Artifact name or wilcard pattern. maturity: The maturity you want to promote in. properties: Properties to add on the promoted artifacts  "
},
{
	"uri": "/docs/actions/artifactoryrelease/",
	"title": "artifactoryRelease",
	"tags": [],
	"description": "",
	"content": "Release artifactory package from a repository to another\nParameters  artifacts: Artifact name or wildcard pattern. maturity: The maturity you want to promote in. properties: Properties to add on the promoted artifacts releaseNotes: Notes associated to your Release.  "
},
{
	"uri": "/docs/components/worker/artifacts/",
	"title": "artifacts",
	"tags": [],
	"description": "",
	"content": "worker artifacts worker artifacts [--workflow=\u0026lt;workflow-name\u0026gt;] [--number=\u0026lt;run-number\u0026gt;] [--tag=\u0026lt;tag\u0026gt;] [--pattern=\u0026lt;pattern\u0026gt;]\nSynopsis Inside a job, you can list artifacts of a workflow:\nworker artifacts --pattern=\u0026quot;files.*.yml\u0026quot; #theses two commands have the same result: worker artifacts worker artifacts --workflow={{.cds.workflow}} --number={{.cds.run.number}}  worker artifacts [flags] Options  --number string Workflow Number. Optional, default: current workflow run --pattern string Pattern matching files to list. Optional, default: * --tag string Tag matching files to list. Optional --workflow string Workflow name. Optional, default: current workflow SEE ALSO  worker\t- CDS Worker  "
},
{
	"uri": "/docs/components/cdsctl/workflow/ascode/",
	"title": "ascode",
	"tags": [],
	"description": "",
	"content": "cdsctl workflow ascode Transform an existing workflow to an as code workflow\nSynopsis Transform an existing workflow to an as code workflow\ncdsctl workflow ascode [ PROJECT-KEY WORKFLOW-NAME ] [flags] Options  --branch string --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) --message string -q, --quiet Only display object's key --silent --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl workflow\t- Manage CDS workflow  "
},
{
	"uri": "/development/rest/auth/",
	"title": "auth",
	"tags": [],
	"description": "",
	"content": "GET /auth/me    URL /auth/me     Method GET   Permissions Auth: true   Scopes User   Code getAuthMe    GET /auth/session/\u0026lt;session-id\u0026gt;    URL /auth/session/\u0026lt;session-id\u0026gt;     Method GET   Permissions Auth: true   Scopes Service   Code getAuthSession    POST /auth/consumer/\u0026lt;consumer-type\u0026gt;/detach    URL /auth/consumer/\u0026lt;consumer-type\u0026gt;/detach     Method POST   Permissions Auth: true   Scopes AccessToken   Code postAuthDetachHandler    POST /auth/consumer/signout    URL /auth/consumer/signout     Method POST   Permissions Auth: true   Code postAuthSignoutHandler    POST /auth/consumer/worker/signout    URL /auth/consumer/worker/signout     Method POST   Permissions Auth: true   Code postUnregisterWorkerHandler    "
},
{
	"uri": "/docs/integrations/aws/",
	"title": "AWS",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/docs/integrations/aws/aws_s3/",
	"title": "AWS S3",
	"tags": [],
	"description": "",
	"content": "The AWS S3 Integration is a Self-Service integration that can be configured on a CDS Project.\nWith this integration, you can use a dedicated AWS S3 Bucket Storage on :\n action Artifact Upload action Artifact Download worker cache command  Notice: by default, the storage is configured in CDS Configuration. This integration allows user to use their own AWS S3 Storage and not use the shared storage.\nConfigure with WebUI You can add a AWS S3 on your CDS Project.\nConfigure with cdsctl Import a AWS S3 on your CDS Project Create a file project-configuration.yml:\nname: MyAWS model: name: AWS config: region: value: your-region type: string bucket_name: value: your-bucket-name type: string prefix: value: cds-prefix- type: string access_key_id: value: your-access-key type: string secret_access_key: value: \u0026#39;your-secret-access-key\u0026#39; type: password Import the integration on your CDS Project with:\ncdsctl project integration import PROJECT_KEY project-configuration.yml Create a Public AWS S3 for whole CDS Projects You can also add a AWS S3 with cdsctl. As a CDS Administrator, this allows you to propose a Public AWS S3, available on all CDS Projects.\nCreate a file public-configuration.yml:\nname: AWS storage: true public: true public_configurations: your-public-aws-s3-integration: \u0026#34;region\u0026#34;: value: your-region type: string \u0026#34;bucket_name\u0026#34;: value: your-bucket-name type: string \u0026#34;prefix\u0026#34;: value: cds-prefix- type: string \u0026#34;access_key_id\u0026#34;: value: your-access-key type: string \u0026#34;secret_access_key\u0026#34;: value: \u0026#39;your-secret-access-key\u0026#39; type: password Import the integration with :\ncdsctl admin integration-model import public-configuration.yml Using min.io as an alternative Minio is a Open Source, Enterprise-Grade, Amazon S3 Compatible Object Storage.\nAccording to https://docs.min.io/docs/how-to-use-aws-sdk-for-go-with-minio-server.html, you can define endpoint, disable_ssl, force_path_style to link CDS to a Minio server.\nFor example, you can run a minio local server with the following docker command.\ndocker run -p 9000:9000 --name minio1 \\  -e \u0026#34;MINIO_ACCESS_KEY=AKIAIOSFODNN7EXAMPLE\u0026#34; \\  -e \u0026#34;MINIO_SECRET_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\u0026#34; \\  -v /mnt/data:/data \\  minio/minio server /data Then you can import the following content to you project with the cdsctl project integration import command.\nname: local min.io model: name: AWS storage: true config: region: value: us-east-1 type: string bucket_name: value: cds-storage type: string prefix: value: cds-prefix- type: string access_key_id: value: \u0026#39;AKIAIOSFODNN7EXAMPLE\u0026#39; type: string secret_access_key: value: \u0026#39;wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\u0026#39; type: password endpoint: value: \u0026#39;http://localhost:9000\u0026#39; type: string disable_ssl: value: \u0026#39;true\u0026#39; type: boolean force_path_style: value: \u0026#39;true\u0026#39; type: boolean "
},
{
	"uri": "/docs/components/cdsctl/completion/bash/",
	"title": "bash",
	"tags": [],
	"description": "",
	"content": "cdsctl completion bash Generate the autocompletion script for bash\nSynopsis Generate the autocompletion script for the bash shell.\nThis script depends on the \u0026lsquo;bash-completion\u0026rsquo; package. If it is not installed already, you can install it via your OS\u0026rsquo;s package manager.\nTo load completions in your current shell session:\nsource \u0026lt;(cdsctl completion bash)  To load completions for every new session, execute once:\nLinux: cdsctl completion bash \u0026gt; /etc/bash_completion.d/cdsctl  macOS: cdsctl completion bash \u0026gt; $(brew --prefix)/etc/bash_completion.d/cdsctl  You will need to start a new shell for this setup to take effect.\ncdsctl completion bash Options  --no-descriptions disable completion descriptions Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl completion\t- Generate the autocompletion script for the specified shell  "
},
{
	"uri": "/docs/components/engine/completion/bash/",
	"title": "bash",
	"tags": [],
	"description": "",
	"content": "engine completion bash Generate the autocompletion script for bash\nSynopsis Generate the autocompletion script for the bash shell.\nThis script depends on the \u0026lsquo;bash-completion\u0026rsquo; package. If it is not installed already, you can install it via your OS\u0026rsquo;s package manager.\nTo load completions in your current shell session:\nsource \u0026lt;(engine completion bash)  To load completions for every new session, execute once:\nLinux: engine completion bash \u0026gt; /etc/bash_completion.d/engine  macOS: engine completion bash \u0026gt; $(brew --prefix)/etc/bash_completion.d/engine  You will need to start a new shell for this setup to take effect.\nengine completion bash Options  --no-descriptions disable completion descriptions SEE ALSO  engine completion\t- Generate the autocompletion script for the specified shell  "
},
{
	"uri": "/docs/components/worker/completion/bash/",
	"title": "bash",
	"tags": [],
	"description": "",
	"content": "worker completion bash Generate the autocompletion script for bash\nSynopsis Generate the autocompletion script for the bash shell.\nThis script depends on the \u0026lsquo;bash-completion\u0026rsquo; package. If it is not installed already, you can install it via your OS\u0026rsquo;s package manager.\nTo load completions in your current shell session:\nsource \u0026lt;(worker completion bash)  To load completions for every new session, execute once:\nLinux: worker completion bash \u0026gt; /etc/bash_completion.d/worker  macOS: worker completion bash \u0026gt; $(brew --prefix)/etc/bash_completion.d/worker  You will need to start a new shell for this setup to take effect.\nworker completion bash Options  --no-descriptions disable completion descriptions SEE ALSO  worker completion\t- Generate the autocompletion script for the specified shell  "
},
{
	"uri": "/docs/components/cdsctl/admin/plugins/binary-add/",
	"title": "binary-add",
	"tags": [],
	"description": "",
	"content": "cdsctl admin plugins binary-add Add a binary\nSynopsis Add a binary\ncdsctl admin plugins binary-add NAME DESCRIPTOR FILENAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin plugins\t- Manage CDS Plugins  "
},
{
	"uri": "/docs/integrations/bitbucketcloud/",
	"title": "Bitbucket Cloud",
	"tags": [],
	"description": "",
	"content": "The Bitbucket Cloud Integration have to be configured on your CDS by a CDS Administrator.\nThis integration allows you to link a Git Repository hosted by your Bitbucket Cloud to a CDS Application.\nThis integration enables some features:\n Git Repository Webhook Easy to use action CheckoutApplication and GitClone for advanced usage Send build notifications on your Pull-Requests and Commits on Bitbucket Cloud. More informations  How to configure Bitbucket Cloud integration  Follow the section Create a consumer on documentation https://support.atlassian.com/bitbucket-cloud/docs/use-oauth-on-bitbucket-cloud/ Bitbucket requests some informations: name you can simply write CDS description is optional callback url must be the URL of your CDS -\u0026gt; {CDS_UI_URL}/cdsapi/repositories_manager/oauth2/callback (if you are in development mode you have to omit /cdsapi and replace {CDS_UI_URL} with your API URL) URL is optional. Permissions : select Account Read, Workspace membership Read, Repositories Read, Pull requests Read, Webhooks Read and Write Click on Save and toggle the consumer name to see the generated Key and Secret. It correspond to clientId and clientSecret in the CDS config.toml file.  Create the Personal Access Token on Bitbucket Datacenter On https://bitbucket.org/account/settings/app-passwords/ create a new app password with the following scopes:\n Account Email and Read Workspace membership Read Projects Read Repositories Read and Write Pull requests Read and Write Webhooks Read and write  Import configuration Create a yml file:\nversion: v1.0 name: bitbucket-cloud type: bitbucketcloud description: \u0026#34;My Bitbucket Cloud\u0026#34; auth: user: my-user-on-bitbucket-cloud token: the-long-token-here options: disableStatus: false # Set to true if you don\u0026#39;t want CDS to push statuses on the VCS server - optional disableStatusDetails: false # Set to true if you don\u0026#39;t want CDS to push CDS URL in statuses on the VCS server - optional disablePolling: false # Does polling is supported by VCS Server - optional disableWebHooks: false # Does webhooks are supported by VCS Server - optional cdsctl project vcs import YOUR_CDS_PROJECT_KEY vcs-bitbucketcloud.yml Vcs events For now, CDS supports push events. CDS uses this push event to remove existing runs for deleted branches (24h after branch deletion).\n"
},
{
	"uri": "/docs/integrations/bitbucket/",
	"title": "Bitbucket Server",
	"tags": [],
	"description": "",
	"content": "The Bitbucket Server Integration have to be configured on your CDS by a CDS Administrator.\nThis integration allows you to link a Git Repository hosted by your Bitbucket Server to a CDS Application.\nThis integration enables some features:\n Git Repository Webhook Easy to use action CheckoutApplication and GitClone for advanced usage Send build notifications on your Pull-Requests and Commits on Bitbucket. More informations Send comments on your Pull-Requests when a workflow is failed  Create the Personal Access Token on Bitbucket Datacenter Generate a new token on https://your-bitbucket-datacenter/plugins/servlet/access-tokens/manage with the following scopes:\n PROJECT READ REPOSITORY READ  Import configuration Create a yml file:\nversion: v1.0 name: bitbucket type: bitbucketserver description: \u0026#34;My Bitbucket Datacenter\u0026#34; url: \u0026#34;http://localhost:7990/bitbucket\u0026#34; auth: user: username-on-bitbucket token: the-long-token-here options: disableStatus: false # Set to true if you don\u0026#39;t want CDS to push statuses on the VCS server - optional disableStatusDetails: false # Set to true if you don\u0026#39;t want CDS to push CDS URL in statuses on the VCS server - optional disablePolling: false # Does polling is supported by VCS Server - optional disableWebHooks: false # Does webhooks are supported by VCS Server - optional cdsctl project vcs import YOUR_CDS_PROJECT_KEY vcs-bitbucket.yml Vcs events For now, CDS supports push events. CDS uses this push event to remove existing runs for deleted branches (24h after branch deletion).\n"
},
{
	"uri": "/about/articles/",
	"title": "Blog Posts, Podcasts and Talks",
	"tags": [],
	"description": "",
	"content": "Blog Posts February 14, 2019 - How does OVH manage the CI/CD at scale?\nMarch 1, 2019 - Continuous Delivery and Deployment Workflows with CDS\nPodcasts February 14, 2019 - DataBuzzWord podcast - French - Understanding CI/CD for Big Data and Machine Learning \nTalks March 22, 2019 - Talk at conference Breizhcamp to introduce CDS (French): CI/CD FIVE MILLION WORKERS\n"
},
{
	"uri": "/development/rest/bookmarks/",
	"title": "bookmarks",
	"tags": [],
	"description": "",
	"content": "GET /bookmarks    URL /bookmarks     Method GET   Permissions Auth: true   Scopes User   Code getBookmarksHandler    "
},
{
	"uri": "/docs/components/cdsctl/action/builtin/",
	"title": "builtin",
	"tags": [],
	"description": "",
	"content": "cdsctl action builtin Manage CDS builtin action\nSynopsis Manage CDS builtin action\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl action\t- Manage CDS action cdsctl action builtin doc\t- Generate Builtin action documentation: cdsctl action builtin doc \u0026lt;name\u0026gt; cdsctl action builtin list\t- List CDS builtin actions cdsctl action builtin show\t- Show a CDS builtin action  "
},
{
	"uri": "/docs/components/cdsctl/template/bulk/",
	"title": "bulk",
	"tags": [],
	"description": "",
	"content": "cdsctl template bulk Bulk apply CDS workflow template and push all given workflows\nSynopsis Bulk apply CDS workflow template and push all given workflows\ncdsctl template bulk [TEMPLATE-PATH] [flags] Examples cdsctl template bulk group-name/template-slug -i PROJ1/workflow1 -i PROJ1/workflow2 -p PROJ1/workflow1:repo=github.com/ovh/cds Options  --detach stringArray Set to generate a workflow detached from the template like --detach PROJ1/workflow1 -i, --instances stringArray Specify instances path --instances-file string Specify path|url of a json|yaml file that contains instances with params --parallel Apply template on workflow in parallel -p, --params stringArray Specify parameters for template like --params PROJ1/workflow1:paramKey=paramValue --track Wait the bulk to be over Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl template\t- Manage CDS workflow template  "
},
{
	"uri": "/docs/components/cdsctl/admin/cdn/cache/",
	"title": "cache",
	"tags": [],
	"description": "",
	"content": "cdsctl admin cdn cache Manage CDS CDN Cache\nSynopsis Manage CDS CDN Cache\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin cdn\t- Manage CDS CDN uService cdsctl admin cdn cache clear\t- clear the cache log cdsctl admin cdn cache status\t- display the status of the cache log  "
},
{
	"uri": "/docs/components/worker/cache/",
	"title": "cache",
	"tags": [],
	"description": "",
	"content": "worker cache Synopsis Inside a project, you can create or retrieve a cache from your worker with a tag (useful for vendors for example).\nYou can access to this cache from any workflow inside a project. You just have to choose a tag that fits with your needs.\nFor example if you need a different cache for each workflow so choose a tag scoped with your workflow name and workflow version (example of tag value: {{.cds.workflow}}-{{.cds.version}})\nUse Case Java Developers often use maven to manage dependencies. The mvn install command could be long because all the maven dependencies have to be downloaded on a fresh CDS Job workspace. With the worker cache feature, you don\u0026rsquo;t have to download the dependencies if they haven\u0026rsquo;t been updated since the last run of the job.\n cache push: take the current .m2/ directory and set it as a cache cache pull: download a cache of .m2 directory  Here, an example of a script inside a CDS Job using the cache feature:\n#!/bin/bash tag=($(md5sum pom.xml)) # download the cache of .m2/ if worker cache pull $tag; then echo \u0026quot;.m2/ getted from cache\u0026quot;; fi # update the directory .m2/ # as there is a cache, mvn does not need to download all dependencies # if they are not updated on upstream mvn install # put in cache the updated .m2/ directory worker cache push $tag .m2/  SEE ALSO  worker\t- CDS Worker worker cache pull\t- worker cache pull tagValue worker cache push\t- worker cache push tagValue {{.cds.workspace}}/pathToUpload  "
},
{
	"uri": "/docs/components/cdsctl/admin/migration/cancel/",
	"title": "cancel",
	"tags": [],
	"description": "",
	"content": "cdsctl admin migration cancel Cancel a CDS migration (USE WITH CAUTION)\nSynopsis Cancel a CDS migration (USE WITH CAUTION)\ncdsctl admin migration cancel ID Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin migration\t- Manage CDS Migrations  "
},
{
	"uri": "/docs/components/cdsctl/admin/cdn/",
	"title": "cdn",
	"tags": [],
	"description": "",
	"content": "cdsctl admin cdn Manage CDS CDN uService\nSynopsis Manage CDS CDN uService\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin\t- Manage CDS (admin only) cdsctl admin cdn cache\t- Manage CDS CDN Cache cdsctl admin cdn item\t- Manage CDS CDN Items cdsctl admin cdn migrate\t- run migration from cds to cdn cdsctl admin cdn status\t- display the status of cdn cdsctl admin cdn sync-buffer\t- run synchronization of cdn buffer cdsctl admin cdn unit\t- Manage CDS CDN unit  "
},
{
	"uri": "/docs/components/cdsctl/",
	"title": "cdsctl",
	"tags": [],
	"description": "",
	"content": "cdsctl CDS Command line utility\nSynopsis Download You can find the cdsctl version corresponding to your CDS version on the UI: Menu -\u0026gt; Settings -\u0026gt; Command line cdsctl. You\u0026rsquo;ll also find the instructions to configure your cdsctl according to your CDS instance.\nThe latest release is available on GitHub Releases.\nAuthentication Per default, the command line cdsctl uses your keychain on your os:\n OSX: Keychain Access Linux System: Secret-tool (libsecret)  You can use a \u0026ldquo;sign in\u0026rdquo; token attached to a consumer:\nCDS_API_URL=\u0026quot;https://instance.cds.api\u0026quot; CDS_TOKEN=\u0026quot;token-consumer\u0026quot; cdsctl [command]  Want to debug something? You can use CDS_VERBOSE environment variable.\nCDS_VERBOSE=true cdsctl [command]  If you\u0026rsquo;re using a self-signed certificate on CDS API, you probably want to use CDS_INSECURE variable.\nCDS_INSECURE=true cdsctl [command]  Advanced usages:\n  you can use a session-token instead of a token:\nCDS_API_URL=\u0026ldquo;https://instance.cds.api\u0026rdquo; CDS_USER=\u0026ldquo;username\u0026rdquo; CDS_SESSION_TOKEN=\u0026ldquo;yourtoken\u0026rdquo; cdsctl [command]\n  you define a maximum number of retries for HTTP calls:\nCDS_API_URL=\u0026ldquo;https://instance.cds.api\u0026rdquo; CDS_SESSION_TOKEN=\u0026ldquo;yourtoken\u0026rdquo; CDS_HTTP_MAX_RETRY=10 cdsctl [command]\n  you can override CDN url if needed using the variable CDS_CDN_URL:\nCDS_API_URL=\u0026ldquo;https://instance.cds.api\u0026rdquo; CDS_TOKEN=\u0026ldquo;yourtoken\u0026rdquo; CDS_CDN_URL=\u0026ldquo;https://instance.cds.cdn\u0026rdquo; cdsctl [command]\n  cdsctl [flags] Options  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl action\t- Manage CDS action cdsctl admin\t- Manage CDS (admin only) cdsctl application\t- Manage CDS application cdsctl completion\t- Generate the autocompletion script for the specified shell cdsctl consumer\t- Manage CDS auth consumers cdsctl context\t- Manage cdsctl config file cdsctl encrypt\t- Encrypt variable into your CDS project cdsctl environment\t- Manage CDS environment cdsctl events\t- Listen CDS Events cdsctl experimental\t- CDS Experimental commands cdsctl group\t- Manage CDS group cdsctl health\t- Check CDS health cdsctl login\t- Login to CDS cdsctl pipeline\t- Manage CDS pipeline cdsctl preview\t- CDS feature preview cdsctl project\t- Manage CDS project cdsctl queue\t- CDS Queue cdsctl reset-password\t- Reset CDS user password cdsctl session\t- Manage CDS auth sessions cdsctl shell\t- cdsctl interactive shell cdsctl signup\t- Signup on CDS cdsctl template\t- Manage CDS workflow template cdsctl tools\t- Some tooling for CDS cdsctl update\t- Update cdsctl from CDS API or from CDS Release cdsctl user\t- Manage CDS user cdsctl version\t- show cdsctl version cdsctl worker\t- Manage CDS worker cdsctl workflow\t- Manage CDS workflow  "
},
{
	"uri": "/docs/components/engine/config/check/",
	"title": "check",
	"tags": [],
	"description": "",
	"content": "engine config check Check CDS configuration file\nSynopsis $ engine config check engine config check SEE ALSO  engine config\t- Manage CDS Configuration  "
},
{
	"uri": "/docs/components/worker/check-secret/",
	"title": "check-secret",
	"tags": [],
	"description": "",
	"content": "worker check-secret worker check-secret fileA fileB\nSynopsis Inside a step script (https://ovh.github.io/cds/docs/actions/builtin-script/), you can add check if a file contains a CDS variable of type password or private key:\n#!/bin/bash  set -ex # create a file cat \u0026lt;\u0026lt; EOF \u0026gt; myFile this a a line in the file, with a CDS variable of type password {{.cds.app.password}} EOF # worker check-secret myFile worker check-secret {{.cds.workspace}}/myFile This command will exit 1 and a log is displayed, as:\nvariable cds.app.password is used in file myFile  The command will exit 0 if no variable of type password or key is found.\nworker check-secret SEE ALSO  worker\t- CDS Worker  "
},
{
	"uri": "/docs/actions/checkout/",
	"title": "checkout",
	"tags": [],
	"description": "",
	"content": "This action execute a git checkout\nParameters  git-url: The repository url to clone path: Relative path under $CD_WORKSPACE to place the repository ref: The branch, tag to checkout sha: The commit sha to checkout ssh-key: The ssh-key used to fetch the repository submodules: Whether to checkout submodules: true to checkout submodules or recursive to recursively checkout submodules token: Token use for https authentication username: Username use for https authentication  "
},
{
	"uri": "/docs/actions/builtin-checkoutapplication/",
	"title": "CheckoutApplication",
	"tags": [],
	"description": "",
	"content": "CheckoutApplication is a builtin action, you can\u0026rsquo;t modify it.\nCDS Builtin Action. Checkout a repository into a new directory.\nThis action use the configuration from application vcs strategy to git clone the repository. The clone will be done with a depth of 50 and with submodules. If you want to modify theses options, you have to use gitClone action.\nParameters  directory: The name of a directory to clone into.  Requirements  git: type: binary Value: git  YAML example Example of a pipeline using CheckoutApplication action:\nversion: v1.0 name: Pipeline1 stages: - Stage1 jobs: - job: Job1 stage: Stage1 steps: - checkout: \u0026#39;{{.cds.workspace}}\u0026#39; Example  Add repository manager on your application.   Job Configuration.   Launch workflow, you can select the git branch.   View logs on job  Notes This action clones a repository into a directory. If you want to clone a tag from your repository in this way, in your workflow payload you can add a key in your JSON like \u0026quot;git.tag\u0026quot;: \u0026quot;0.2\u0026quot;.\n"
},
{
	"uri": "/docs/components/cdsctl/admin/cdn/cache/clear/",
	"title": "clear",
	"tags": [],
	"description": "",
	"content": "cdsctl admin cdn cache clear clear the cache log\nSynopsis clear the cache log\ncdsctl admin cdn cache clear Examples cdsctl admin cdn cache clear Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin cdn cache\t- Manage CDS CDN Cache  "
},
{
	"uri": "/docs/components/cdsctl/completion/",
	"title": "completion",
	"tags": [],
	"description": "",
	"content": "cdsctl completion Generate the autocompletion script for the specified shell\nSynopsis Generate the autocompletion script for cdsctl for the specified shell. See each sub-command\u0026rsquo;s help for details on how to use the generated script.\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl\t- CDS Command line utility cdsctl completion bash\t- Generate the autocompletion script for bash cdsctl completion fish\t- Generate the autocompletion script for fish cdsctl completion powershell\t- Generate the autocompletion script for powershell cdsctl completion zsh\t- Generate the autocompletion script for zsh  "
},
{
	"uri": "/docs/components/engine/completion/",
	"title": "completion",
	"tags": [],
	"description": "",
	"content": "engine completion Generate the autocompletion script for the specified shell\nSynopsis Generate the autocompletion script for engine for the specified shell. See each sub-command\u0026rsquo;s help for details on how to use the generated script.\nSEE ALSO  engine\t- CDS Engine engine completion bash\t- Generate the autocompletion script for bash engine completion fish\t- Generate the autocompletion script for fish engine completion powershell\t- Generate the autocompletion script for powershell engine completion zsh\t- Generate the autocompletion script for zsh  "
},
{
	"uri": "/docs/components/worker/completion/",
	"title": "completion",
	"tags": [],
	"description": "",
	"content": "worker completion Generate the autocompletion script for the specified shell\nSynopsis Generate the autocompletion script for worker for the specified shell. See each sub-command\u0026rsquo;s help for details on how to use the generated script.\nSEE ALSO  worker\t- CDS Worker worker completion bash\t- Generate the autocompletion script for bash worker completion fish\t- Generate the autocompletion script for fish worker completion powershell\t- Generate the autocompletion script for powershell worker completion zsh\t- Generate the autocompletion script for zsh  "
},
{
	"uri": "/development/rest/config/",
	"title": "config",
	"tags": [],
	"description": "",
	"content": "GET /config/api    URL /config/api     Method GET   Permissions Auth: true   Code configAPIHandler    GET /config/cdn    URL /config/cdn     Method GET   Permissions Auth: true   Code configCDNHandler    GET /config/vcsgerrit    URL /config/vcsgerrit     Method GET   Permissions Auth: true   Code configVCSGerritHandler    "
},
{
	"uri": "/docs/components/engine/config/",
	"title": "config",
	"tags": [],
	"description": "",
	"content": "engine config Manage CDS Configuration\nSynopsis Manage CDS Configuration\nSEE ALSO  engine\t- CDS Engine engine config check\t- Check CDS configuration file engine config edit\t- Edit a CDS configuration file engine config init-token\t- Generate/Regenerate an init token for a given CDS configuration file engine config new\t- CDS configuration file assistant engine config regen\t- Regen tokens and keys for given CDS configuration file  "
},
{
	"uri": "/docs/components/cdsctl/reset-password/confirm/",
	"title": "confirm",
	"tags": [],
	"description": "",
	"content": "cdsctl reset-password confirm Synopsis cdsctl reset-password confirm TOKEN [flags] Options  -H, --api-url string Url to your CDS api. --env Display the commands to set up the environment for the cds client. -p, --password string Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl reset-password\t- Reset CDS user password  "
},
{
	"uri": "/docs/components/cdsctl/consumer/",
	"title": "consumer",
	"tags": [],
	"description": "",
	"content": "cdsctl consumer Manage CDS auth consumers\nSynopsis Manage CDS auth consumers\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl\t- CDS Command line utility cdsctl consumer delete\t- Delete an auth consumer cdsctl consumer list\t- List your auth consumers for given user cdsctl consumer new\t- Create a new auth consumer for current user cdsctl consumer regen\t- Regenerate an existing auth consumer  "
},
{
	"uri": "/about/contact/",
	"title": "Contact us",
	"tags": [],
	"description": "",
	"content": " François SAMIN - @francoissamin Steven GUIHEUX - @sguiheux Richard LE TERRIER - @richardlte Yvonnick ESNAULT - @yesnault  A remark / question / suggestion, feel free to join us on https://github.com/ovh/cds/discussions\nAll CDS Contributors: https://github.com/ovh/cds/graphs/contributors\n"
},
{
	"uri": "/docs/components/cdsctl/context/",
	"title": "context",
	"tags": [],
	"description": "",
	"content": "cdsctl context Manage cdsctl config file\nSynopsis Manage cdsctl config file\ncdsctl context Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl\t- CDS Command line utility cdsctl context current\t- Show the current context cdsctl context list\t- List cdsctl contexts cdsctl context set-current\t- Set the current context  "
},
{
	"uri": "/development/contribute/",
	"title": "Contributing",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/docs/actions/builtin-coverage/",
	"title": "Coverage",
	"tags": [],
	"description": "",
	"content": "Coverage is a builtin action, you can\u0026rsquo;t modify it.\nCDS Builtin Action. Upload you coverage file to CDS as a coverage run result.\nParameters  path: Path of the coverage report file.  Requirements No Requirement\nYAML example Example of a pipeline using Coverage action:\nversion: v1.0 name: Pipeline1 stages: - Stage1 jobs: - job: Job1 stage: Stage1 steps: - coverage: path: ./coverage.xml "
},
{
	"uri": "/docs/components/cdsctl/application/create/",
	"title": "create",
	"tags": [],
	"description": "",
	"content": "cdsctl application create Create a CDS application\nSynopsis Create a CDS application\ncdsctl application create [ PROJECT-KEY ] APPLICATION-NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl application\t- Manage CDS application  "
},
{
	"uri": "/docs/components/cdsctl/environment/create/",
	"title": "create",
	"tags": [],
	"description": "",
	"content": "cdsctl environment create Create a CDS environment\nSynopsis Create a CDS environment\ncdsctl environment create [ PROJECT-KEY ] ENVIRONMENT-NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl environment\t- Manage CDS environment  "
},
{
	"uri": "/docs/components/cdsctl/group/create/",
	"title": "create",
	"tags": [],
	"description": "",
	"content": "cdsctl group create Create a CDS group\nSynopsis Create a CDS group\ncdsctl group create GROUP-NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl group\t- Manage CDS group  "
},
{
	"uri": "/docs/components/cdsctl/project/create/",
	"title": "create",
	"tags": [],
	"description": "",
	"content": "cdsctl project create Create a CDS project\nSynopsis Create a CDS project\ncdsctl project create [ PROJECT-KEY PROJECT-NAME ] [GROUP-NAME] Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl project\t- Manage CDS project  "
},
{
	"uri": "/docs/components/cdsctl/admin/curl/",
	"title": "curl",
	"tags": [],
	"description": "",
	"content": "cdsctl admin curl Execute request to CDS api\nSynopsis Execute request to CDS api\ncdsctl admin curl PATH [flags] Options  -d, --data string -X, --request string (default \u0026quot;GET\u0026quot;) Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin\t- Manage CDS (admin only)  "
},
{
	"uri": "/docs/components/cdsctl/context/current/",
	"title": "current",
	"tags": [],
	"description": "",
	"content": "cdsctl context current Show the current context\nSynopsis Show the current context\ncdsctl context current Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl context\t- Manage cdsctl config file  "
},
{
	"uri": "/docs/components/cdsctl/admin/database/",
	"title": "database",
	"tags": [],
	"description": "",
	"content": "cdsctl admin database Manage CDS Database\nSynopsis Manage CDS Database\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin\t- Manage CDS (admin only) cdsctl admin database delete\t- Delete a database migration from table gorp_migration (use with caution) cdsctl admin database list\t- List all CDS DB migrations cdsctl admin database list-encrypted-data\t- List all encrypted data in database cdsctl admin database list-signed-data\t- List all signed data in database cdsctl admin database roll-encrypted-data\t- Roll a encrypted data in database cdsctl admin database roll-signed-data\t- Roll a signed data in database cdsctl admin database unlock\t- Unlock a pending migration (Use with caution)  "
},
{
	"uri": "/docs/components/engine/database/",
	"title": "database",
	"tags": [],
	"description": "",
	"content": "engine database Manage CDS database\nSynopsis Manage CDS database\nSEE ALSO  engine\t- CDS Engine engine database downgrade\t- Downgrade schema engine database status\t- Show current migration status engine database upgrade\t- Upgrade schema  "
},
{
	"uri": "/docs/components/cdsctl/health/dbmigrate/",
	"title": "dbmigrate",
	"tags": [],
	"description": "",
	"content": "cdsctl health dbmigrate Show DB Migrate status\nSynopsis Show DB Migrate status\ncdsctl health dbmigrate [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl health\t- Check CDS health  "
},
{
	"uri": "/docs/actions/debianpush/",
	"title": "debianPush",
	"tags": [],
	"description": "",
	"content": "This pushes Debian package on an artifactory debian repository.\nParameters  architectures: List of debian architectures (space separated) components: List of debian components (space separated) distributions: List of debian distributions (space separated) files: List of files (space separated) label: Fill the deb.release.label parameter origin: Fill the deb.release.origin parameter  "
},
{
	"uri": "/docs/components/cdsctl/action/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl action delete Delete a CDS action\nSynopsis Useful to delete a CDS action\ncdsctl action delete myAction # this will not fail if action does not exist cdsctl action delete myActionNotExist --force  cdsctl action delete ACTION-PATH [flags] Options  --force if true, do not fail if action does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl action\t- Manage CDS action  "
},
{
	"uri": "/docs/components/cdsctl/admin/cdn/unit/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl admin cdn unit delete delete the given unit\nSynopsis delete the given unit\ncdsctl admin cdn unit delete UNIT_ID Examples cdsctl admin cdn unit delete \u0026lt;unit_id\u0026gt; Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin cdn unit\t- Manage CDS CDN unit  "
},
{
	"uri": "/docs/components/cdsctl/admin/database/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl admin database delete Delete a database migration from table gorp_migration (use with caution)\nSynopsis Delete a database migration from table gorp_migration (use with caution)\ncdsctl admin database delete SERVICE ID Examples  $ cdsctl admin database delete api id-migration-to-delete $ cdsctl admin database delete cdn id-migration-to-delete Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin database\t- Manage CDS Database  "
},
{
	"uri": "/docs/components/cdsctl/admin/features/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl admin features delete Delete\nSynopsis Delete\ncdsctl admin features delete NAME [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin features\t- Manage CDS feature flipping rules  "
},
{
	"uri": "/docs/components/cdsctl/admin/hooks/repository/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl admin hooks repository delete Remove repository\nSynopsis Remove repository\ncdsctl admin hooks repository delete VCS-SERVER REPOSITORY [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin hooks repository\t- Manage repositories where there were events  "
},
{
	"uri": "/docs/components/cdsctl/admin/integration-model/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl admin integration-model delete Delete a CDS Integration model\nSynopsis Delete a CDS Integration model\ncdsctl admin integration-model delete NAME [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin integration-model\t- Manage CDS Integration models  "
},
{
	"uri": "/docs/components/cdsctl/admin/organization/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl admin organization delete Delete an organization\nSynopsis Delete an organization\ncdsctl admin organization delete ORGANIZATION-NAME [flags] Examples cdsctl admin organization delete \u0026lt;organization-name\u0026gt; Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin organization\t- Manage CDS Organization  "
},
{
	"uri": "/docs/components/cdsctl/admin/plugins/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl admin plugins delete Delete a CDS Plugin\nSynopsis Delete a CDS Plugin\ncdsctl admin plugins delete NAME [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin plugins\t- Manage CDS Plugins  "
},
{
	"uri": "/docs/components/cdsctl/admin/services/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl admin services delete Delete a CDS service from registered service\nSynopsis Delete a CDS service from registered service\ncdsctl admin services delete NAME ... [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin services\t- Manage CDS services  "
},
{
	"uri": "/docs/components/cdsctl/application/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl application delete Delete a CDS application\nSynopsis Delete a CDS application\ncdsctl application delete [ PROJECT-KEY APPLICATION-NAME ] [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl application\t- Manage CDS application  "
},
{
	"uri": "/docs/components/cdsctl/application/keys/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl application keys delete Delete CDS an application key\nSynopsis Delete CDS an application key\ncdsctl application keys delete [ PROJECT-KEY APPLICATION-NAME ] KEY-NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl application keys\t- Manage CDS application keys  "
},
{
	"uri": "/docs/components/cdsctl/application/variable/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl application variable delete Delete CDS application variable\nSynopsis Delete CDS application variable\ncdsctl application variable delete [ PROJECT-KEY APPLICATION-NAME ] VARIABLE-NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl application variable\t- Manage CDS application variables  "
},
{
	"uri": "/docs/components/cdsctl/consumer/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl consumer delete Delete an auth consumer\nSynopsis Delete an auth consumer\ncdsctl consumer delete CONSUMER-ID [USERNAME] Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl consumer\t- Manage CDS auth consumers  "
},
{
	"uri": "/docs/components/cdsctl/encrypt/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl encrypt delete Delete the given encrypted variable of your CDS project\nSynopsis Delete the given encrypted variable of your CDS project\ncdsctl encrypt delete [ PROJECT-KEY ] NAME [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl encrypt\t- Encrypt variable into your CDS project  "
},
{
	"uri": "/docs/components/cdsctl/environment/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl environment delete Delete a CDS environment\nSynopsis Delete a CDS environment\ncdsctl environment delete [ PROJECT-KEY ] ENVIRONMENT-NAME [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl environment\t- Manage CDS environment  "
},
{
	"uri": "/docs/components/cdsctl/environment/keys/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl environment keys delete Delete CDS environment key\nSynopsis Delete CDS environment key\ncdsctl environment keys delete [ PROJECT-KEY ] ENV-NAME KEY-NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl environment keys\t- Manage CDS environment keys  "
},
{
	"uri": "/docs/components/cdsctl/environment/variable/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl environment variable delete Delete CDS environment variable\nSynopsis Delete CDS environment variable\ncdsctl environment variable delete [ PROJECT-KEY ] ENV-NAME VARIABLE-NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl environment variable\t- Manage CDS environment variables  "
},
{
	"uri": "/docs/components/cdsctl/experimental/hatchery/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental hatchery delete Remove hatchery\nSynopsis Remove hatchery\ncdsctl experimental hatchery delete HATCHERYIDENTIFIER [flags] Examples cdsctl hatchery delete Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental hatchery\t- CDS Experimental hatchery commands  "
},
{
	"uri": "/docs/components/cdsctl/experimental/organization/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental organization delete Remove organization\nSynopsis Remove organization\ncdsctl experimental organization delete ORGANIZATIONIDENTIFIER [flags] Examples cdsctl organization delete Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental organization\t- CDS Experimental organization commands  "
},
{
	"uri": "/docs/components/cdsctl/experimental/project/notification/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental project notification delete Delete a notification on a project\nSynopsis Delete a notification on a project\ncdsctl experimental project notification delete [ PROJECT-KEY ] NAME [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental project notification\t- Manage Notification on a CDS project  "
},
{
	"uri": "/docs/components/cdsctl/experimental/project/repository/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental project repository delete Remove a repository from on a project\nSynopsis Remove a repository from on a project\ncdsctl experimental project repository delete [ PROJECT-KEY ] VCS-NAME REPOSITORY-NAME [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental project repository\t- Manage repositories on a CDS project  "
},
{
	"uri": "/docs/components/cdsctl/experimental/project/variableset/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental project variableset delete Delete a variable set on a project\nSynopsis Delete a variable set on a project\ncdsctl experimental project variableset delete [ PROJECT-KEY ] NAME [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist --with-items Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental project variableset\t- Manage Variable Set on a CDS project  "
},
{
	"uri": "/docs/components/cdsctl/experimental/project/variableset/item/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental project variableset item delete Delete an item from a variable set\nSynopsis Delete an item from a variable set\ncdsctl experimental project variableset item delete [ PROJECT-KEY ] VARIABLESET-NAME ITEM-NAME [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental project variableset item\t- Manage item on a CDS project Variable Set  "
},
{
	"uri": "/docs/components/cdsctl/experimental/rbac/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental rbac delete Delete a permission\nSynopsis Delete a permission\ncdsctl experimental rbac delete PERMISSION_IDENTIFIER [flags] Examples cdsctl rbac delete \u0026lt;permission_identifier\u0026gt; Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental rbac\t- CDS Experimental rbac commands  "
},
{
	"uri": "/docs/components/cdsctl/experimental/region/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental region delete Remove region\nSynopsis Remove region\ncdsctl experimental region delete REGIONIDENTIFIER [flags] Examples cdsctl region delete Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental region\t- CDS Experimental region commands  "
},
{
	"uri": "/docs/components/cdsctl/group/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl group delete Delete a CDS group\nSynopsis Delete a CDS group\ncdsctl group delete GROUP-NAME [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl group\t- Manage CDS group  "
},
{
	"uri": "/docs/components/cdsctl/group/member/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl group member delete Delete a member of a group\nSynopsis Delete a member of a group\ncdsctl group member delete GROUP-NAME USERNAME [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl group member\t- Manage group's member  "
},
{
	"uri": "/docs/components/cdsctl/pipeline/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl pipeline delete Delete a CDS pipeline\nSynopsis Delete a CDS pipeline\ncdsctl pipeline delete [ PROJECT-KEY ] PIPELINE-NAME [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl pipeline\t- Manage CDS pipeline  "
},
{
	"uri": "/docs/components/cdsctl/project/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl project delete Delete a CDS project\nSynopsis Delete a CDS project\ncdsctl project delete [ PROJECT-KEY ] [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl project\t- Manage CDS project  "
},
{
	"uri": "/docs/components/cdsctl/project/integration/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl project integration delete Delete a integration configuration on a project\nSynopsis Delete a integration configuration on a project\ncdsctl project integration delete [ PROJECT-KEY ] NAME [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl project integration\t- Manage CDS integrations  "
},
{
	"uri": "/docs/components/cdsctl/project/keys/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl project keys delete Delete CDS project key\nSynopsis Delete CDS project key\ncdsctl project keys delete [ PROJECT-KEY ] KEY-NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl project keys\t- Manage CDS project keys  "
},
{
	"uri": "/docs/components/cdsctl/project/variable/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl project variable delete Delete CDS project variable\nSynopsis Delete CDS project variable\ncdsctl project variable delete [ PROJECT-KEY ] VARIABLE-NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl project variable\t- Manage CDS project variables  "
},
{
	"uri": "/docs/components/cdsctl/project/vcs/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl project vcs delete Delete a VCS configuration on a project\nSynopsis Delete a VCS configuration on a project\ncdsctl project vcs delete [ PROJECT-KEY ] NAME [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl project vcs\t- Manage VCS on a CDS project  "
},
{
	"uri": "/docs/components/cdsctl/session/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl session delete Delete an auth session\nSynopsis Delete an auth session\ncdsctl session delete SESSION-ID [USERNAME] Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl session\t- Manage CDS auth sessions  "
},
{
	"uri": "/docs/components/cdsctl/template/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl template delete Delete a workflow template\nSynopsis Delete a workflow template\ncdsctl template delete [TEMPLATE-PATH] [flags] Examples cdsctl template delete group-name/template-slug Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl template\t- Manage CDS workflow template  "
},
{
	"uri": "/docs/components/cdsctl/user/gpg/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl user gpg delete Delete CDS user gpg key\nSynopsis Delete CDS user gpg key\ncdsctl user gpg delete KEYID [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl user gpg\t- Manage CDS user gpg keys  "
},
{
	"uri": "/docs/components/cdsctl/worker/model/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl worker model delete Delete a CDS worker model\nSynopsis Delete a CDS worker model\ncdsctl worker model delete WORKER-MODEL-PATH [flags] Examples cdsctl worker model delete shared.infra/myModel Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl worker model\t- Manage Worker Model  "
},
{
	"uri": "/docs/components/cdsctl/workflow/advanced/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl workflow advanced delete Delete a CDS workflow\nSynopsis Delete a CDS workflow\ncdsctl workflow advanced delete [ PROJECT-KEY WORKFLOW-NAME ] [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist -d, --with-dependencies delete and clean workflow dependencies Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl workflow advanced\t- Manage Workflow Advanced  "
},
{
	"uri": "/docs/components/cdsctl/workflow/label/delete/",
	"title": "delete",
	"tags": [],
	"description": "",
	"content": "cdsctl workflow label delete Delete label from one workflow\nSynopsis Delete label from one workflow\ncdsctl workflow label delete [ PROJECT-KEY WORKFLOW-NAME ] LABEL Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl workflow label\t- Manage Workflow Label  "
},
{
	"uri": "/docs/components/cdsctl/admin/cdn/unit/delete-items/",
	"title": "delete-items",
	"tags": [],
	"description": "",
	"content": "cdsctl admin cdn unit delete-items mark item as delete for given unit\nSynopsis mark item as delete for given unit\ncdsctl admin cdn unit delete-items UNIT_ID Examples cdsctl admin cdn unit delete-items \u0026lt;unit_id\u0026gt; Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin cdn unit\t- Manage CDS CDN unit  "
},
{
	"uri": "/docs/actions/builtin-deployapplication/",
	"title": "DeployApplication",
	"tags": [],
	"description": "",
	"content": "DeployApplication is a builtin action, you can\u0026rsquo;t modify it.\nDeploy an application, useful only if you have a Deployment Plaftorm associated to your current application.\nParameters No Parameter\nRequirements No Requirement\nYAML example Example of a pipeline using DeployApplication action:\nversion: v1.0 name: Pipeline1 stages: - Stage1 jobs: - job: Job1 stage: Stage1 steps: - deploy: \u0026#39;{{.cds.application}}\u0026#39; Example  Add a deployment platform on your application.   Create a workflow, add a pipeline and an application linked to a platform.   Or edit the pipeline context from your workflow view.   In the job, use action DeployApplication  "
},
{
	"uri": "/docs/actions/deployarsenal/",
	"title": "deployArsenal",
	"tags": [],
	"description": "",
	"content": "This action trigger an arsenal deployment and retrieve the final status of it.\nParameters  alternative-config: Alternative configuration to push with the deployment retry-delay: Time between try of getting the deployment final status retry-max: Maximum number of retry to get the deployment status token: Deployment token version: The version to deploy  "
},
{
	"uri": "/docs/components/cdsctl/template/detach/",
	"title": "detach",
	"tags": [],
	"description": "",
	"content": "cdsctl template detach Detach a workflow from template\nSynopsis Detach a workflow from template\ncdsctl template detach [ PROJECT-KEY WORKFLOW-NAME ] Examples cdsctl template detach project-key workflow-name Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl template\t- Manage CDS workflow template  "
},
{
	"uri": "/docs/components/cdsctl/admin/maintenance/disable/",
	"title": "disable",
	"tags": [],
	"description": "",
	"content": "cdsctl admin maintenance disable Disable CDS maintenance\nSynopsis Disable CDS maintenance\ncdsctl admin maintenance disable [flags] Options  --hooks provided to propagate to the hooks services Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin maintenance\t- Manage CDS maintenance  "
},
{
	"uri": "/docs/components/cdsctl/project/keys/disable/",
	"title": "disable",
	"tags": [],
	"description": "",
	"content": "cdsctl project keys disable Disable CDS project key\nSynopsis Disable CDS project key\ncdsctl project keys disable [ PROJECT-KEY ] KEY-NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl project keys\t- Manage CDS project keys  "
},
{
	"uri": "/docs/components/cdsctl/worker/disable/",
	"title": "disable",
	"tags": [],
	"description": "",
	"content": "cdsctl worker disable Disable CDS workers\nSynopsis Disable one on more CDS worker by their names.\nFor example if your want to disable all CDS workers you can run:\n$ cdsctl worker disable $(cdsctl worker list)\ncdsctl worker disable NAME ... Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl worker\t- Manage CDS worker  "
},
{
	"uri": "/docs/components/cdsctl/action/builtin/doc/",
	"title": "doc",
	"tags": [],
	"description": "",
	"content": "cdsctl action builtin doc Generate Builtin action documentation: cdsctl action builtin doc \u0026lt;name\u0026gt;\nSynopsis Generate Builtin action documentation: cdsctl action builtin doc \u0026lt;name\u0026gt;\ncdsctl action builtin doc NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl action builtin\t- Manage CDS builtin action  "
},
{
	"uri": "/docs/components/cdsctl/action/doc/",
	"title": "doc",
	"tags": [],
	"description": "",
	"content": "cdsctl action doc Generate action documentation: cdsctl action doc \u0026lt;path-to-file\u0026gt;\nSynopsis Generate action documentation: cdsctl action doc \u0026lt;path-to-file\u0026gt;\ncdsctl action doc PATH Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl action\t- Manage CDS action  "
},
{
	"uri": "/docs/components/cdsctl/admin/plugins/doc/",
	"title": "doc",
	"tags": [],
	"description": "",
	"content": "cdsctl admin plugins doc Generate documentation in markdown for a plugin\nSynopsis Generate documentation in markdown for a plugin\ncdsctl admin plugins doc PATH Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin plugins\t- Manage CDS Plugins  "
},
{
	"uri": "/docs/integrations/swarm/",
	"title": "Docker Swarm",
	"tags": [],
	"description": "",
	"content": "The Docker Swarm integration have to be configured by CDS administrator.\nThis integration allows you to run the Swarm Hatchery to start CDS Workers.\nAs an end-users, this integration allows:\n to use Worker Models of type \u0026ldquo;Docker\u0026rdquo; to use Service Prerequisite on your CDS Jobs.  Start Swarm hatchery Generate a token:\n$ cdsctl consumer new me \\ --scopes=Hatchery,RunExecution,Service,WorkerModel \\ --name=\u0026#34;hatchery.swarm\u0026#34; \\ --description=\u0026#34;Consumer token for swarm hatchery\u0026#34; \\ --groups=\u0026#34;\u0026#34; \\ --no-interactive Builtin consumer successfully created, use the following token to sign in: xxxxxxxx.xxxxxxx.4Bd9XJMIWrfe8Lwb-Au68TKUqflPorY2Fmcuw5vIoUs5gQyCLuxxxxxxxxxxxxxx Edit the section hatchery.swarm in the CDS Configuration file. The token have to be set on the key hatchery.swarm.commonConfiguration.api.http.token.\nThis hatchery use the standard Docker environment variables to connect to a Docker host.\nThen start hatchery:\nexport DOCKER_HOST=tcp://xx.xx.xx.xx:2375 engine start hatchery:swarm --config config.toml This hatchery will now start worker of model \u0026lsquo;docker\u0026rsquo; on you Docker installation.\nSetup a worker model See Tutorial\n"
},
{
	"uri": "/docs/actions/dockerpush/",
	"title": "dockerPush",
	"tags": [],
	"description": "",
	"content": "This pushes Docker image\nParameters  image: Image name registry: Docker registry to push on.  This parameter can be empty when an Artifactory integration is set up.\n registryAuth: Docker base64url-encoded auth configuration.  See docker authentication section for more details: https://docs.docker.com/engine/api/v1.41/#section/Authentication.\nThis parameter can be empty when an Artifactory integration is set up.\n tags: The tags to associate with the image on the registry.  This parameter can be empty if you want to keep the same tag.\n"
},
{
	"uri": "/docs/components/engine/database/downgrade/",
	"title": "downgrade",
	"tags": [],
	"description": "",
	"content": "engine database downgrade Downgrade schema\nSynopsis Undo a database migration.\nengine database downgrade [flags] Options  --db-connect-timeout int Maximum wait for connection, in seconds (default 10) --db-host string DB Host (default \u0026quot;localhost\u0026quot;) --db-maxconn int DB Max connection (default 20) --db-name string DB Name (default \u0026quot;cds\u0026quot;) --db-password string DB Password --db-port int DB Port (default 5432) --db-role string DB Role --db-schema string DB Schema (default \u0026quot;public\u0026quot;) --db-sslmode string DB SSL Mode: require (default), verify-full, or disable (default \u0026quot;require\u0026quot;) --db-timeout int Statement timeout value in milliseconds (default 3000) --db-user string DB User (default \u0026quot;cds\u0026quot;) --dry-run Dry run downgrade --limit int Max number of migrations to apply (0 = unlimited) (default 1) --migrate-dir string CDS SQL Migration directory (default \u0026quot;./engine/sql/api\u0026quot;) SEE ALSO  engine database\t- Manage CDS database  "
},
{
	"uri": "/development/rest/download/",
	"title": "download",
	"tags": [],
	"description": "",
	"content": "GET /download/plugin/\u0026lt;name\u0026gt;/binary/\u0026lt;os\u0026gt;/\u0026lt;arch\u0026gt;/infos    URL /download/plugin/\u0026lt;name\u0026gt;/binary/\u0026lt;os\u0026gt;/\u0026lt;arch\u0026gt;/infos     Method GET   Permissions Auth: true   Code getGRPCluginBinaryInfosHandler    GET /download    URL /download     Method GET   Permissions Auth: true   Code downloadsHandler    "
},
{
	"uri": "/docs/components/cdsctl/experimental/workflow/logs/download/",
	"title": "download",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental workflow logs download Get the workflow run job status\nSynopsis Get the workflow run job status\ncdsctl experimental workflow logs download PROJ_KEY RUN_IDENTIFIER [flags] Examples cdsctl experimental workflow logs download \u0026lt;proj_key\u0026gt; \u0026lt;run_identifier\u0026gt; Options  --pattern string Filter on job name Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental workflow logs\t- CDS Experimental workflow run jobs logs commands  "
},
{
	"uri": "/docs/components/cdsctl/workflow/artifact/download/",
	"title": "download",
	"tags": [],
	"description": "",
	"content": "cdsctl workflow artifact download Download artifacts of one Workflow Run\nSynopsis Download artifacts of one Workflow Run\ncdsctl workflow artifact download [ PROJECT-KEY WORKFLOW-NAME ] NUMBER [ARTIFACT-NAME] [flags] Options  --cdn-url string overwrite cdn url (deprecated) --exclude string exclude files from download - could be a regex: *.log Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl workflow artifact\t- Manage Workflow Artifact  "
},
{
	"uri": "/docs/components/cdsctl/workflow/logs/download/",
	"title": "download",
	"tags": [],
	"description": "",
	"content": "cdsctl workflow logs download Download logs from a workflow run.\nSynopsis Download logs from a workflow run. You can download all logs files or just one log if you want.\n# download all logs files on latest run $ cdsctl workflow logs download KEY WF # download all logs files on run number 1 $ cdsctl workflow logs download KEY WF 1 # download only one file: $ cdsctl workflow logs download KEY WF 1 --pattern=\u0026quot;MyStage\u0026quot; # this will download WF-1.0-pipeline.myPipeline-stage.MyStage-job.MyJob-status.Success-step.0.log for example  cdsctl workflow logs download [ PROJECT-KEY WORKFLOW-NAME ] [RUN-NUMBER] [flags] Options  --pattern string Filter on log filename Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl workflow logs\t- Manage CDS Workflow Run Logs  "
},
{
	"uri": "/docs/components/cdsctl/workflow/result/download/",
	"title": "download",
	"tags": [],
	"description": "",
	"content": "cdsctl workflow result download download workflow run result\nSynopsis download workflow run result\ncdsctl workflow result download [ PROJECT-KEY WORKFLOW-NAME ] RUN-NUMBER RESULT-ID Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl workflow result\t- Manage Workflow Run Result  "
},
{
	"uri": "/docs/components/engine/download/",
	"title": "download",
	"tags": [],
	"description": "",
	"content": "engine download Download binaries\nSynopsis Download binaries\nSEE ALSO  engine\t- CDS Engine engine download sql\t- Download sql files from the latest release on GitHub engine download ui\t- Download ui files from the latest release on GitHub engine download workers\t- Download workers binaries from the latest release on GitHub  "
},
{
	"uri": "/docs/components/worker/download/",
	"title": "download",
	"tags": [],
	"description": "",
	"content": "worker download worker download [--workflow=\u0026lt;workflow-name\u0026gt;] [--number=\u0026lt;run-number\u0026gt;] [--tag=\u0026lt;tag\u0026gt;] [--pattern=\u0026lt;pattern\u0026gt;]\nSynopsis Inside a job, there are two ways to download an artifact:\n with a step using action Download Artifacts with a step script (https://ovh.github.io/cds/docs/actions/builtin-script/), using the worker command.  Worker Command:\nworker download --tag=\u0026lt;tag\u0026gt; \u0026lt;path\u0026gt;  Example:\nworker download --pattern=\u0026quot;files.*.yml\u0026quot;  Theses two commands have the same result:\nworker download worker download --workflow={{.cds.workflow}} --number={{.cds.run.number}}  worker download [flags] Options  --number string Workflow Number to download from. Optional, default: current workflow run --pattern string Pattern matching files to download. Optional, default: * --tag string Tag matching files to download. Optional --workflow string Workflow name to download from. Optional, default: current workflow SEE ALSO  worker\t- CDS Worker  "
},
{
	"uri": "/docs/actions/downloadartifact/",
	"title": "downloadArtifact",
	"tags": [],
	"description": "",
	"content": "Download a build artifact that was previously uploaded in the workflow by the upload-artifact action.\nParameters   name: Artifact name or wilcard pattern. If empty, all the artifacts identifed as \u0026ldquo;generic\u0026rdquo; result previously uploaded in the workflow will be downloaded.\n  path: Destination path If empty, all the artifacts will be downloadded in the job workspace.\n  "
},
{
	"uri": "/docs/components/engine/config/edit/",
	"title": "edit",
	"tags": [],
	"description": "",
	"content": "engine config edit Edit a CDS configuration file\nSynopsis $ engine config edit key=value key=value\nengine config edit [flags] Examples $ engine config edit conf.toml log.level=debug hatchery.swarm.commonConfiguration.name=hatchery-swarm-name Options  --env Print configuration as environment variable --output string output file SEE ALSO  engine config\t- Manage CDS Configuration  "
},
{
	"uri": "/docs/components/cdsctl/admin/maintenance/enable/",
	"title": "enable",
	"tags": [],
	"description": "",
	"content": "cdsctl admin maintenance enable Enable CDS maintenance\nSynopsis Enable CDS maintenance\ncdsctl admin maintenance enable [flags] Options  --hooks provided to propagate to the hooks services Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin maintenance\t- Manage CDS maintenance  "
},
{
	"uri": "/docs/components/cdsctl/project/keys/enable/",
	"title": "enable",
	"tags": [],
	"description": "",
	"content": "cdsctl project keys enable Enable CDS project key\nSynopsis Enable CDS project key\ncdsctl project keys enable [ PROJECT-KEY ] KEY-NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl project keys\t- Manage CDS project keys  "
},
{
	"uri": "/docs/components/cdsctl/encrypt/",
	"title": "encrypt",
	"tags": [],
	"description": "",
	"content": "cdsctl encrypt Encrypt variable into your CDS project\nSynopsis To be able to write secret in the CDS yaml files, you have to encrypt data with the project GPG key.\nCreate a secret variable:\n$ cdsctl encrypt MYPROJECT my-data my-super-secret-value my-data: 01234567890987654321  The command returns the value: 01234567890987654321. You can use this value in a configuration file.\nExample of use case: Import an environment with a secret.\nCreate an environment file to import :\n$ cat \u0026lt;\u0026lt; EOF \u0026gt; your-environment.yml name: your-environment values: a-readable-variable: type: string value: value my-data: type: password value: 01234567890987654321 EOF  Then, import then environment:\ncdsctl environment import MYPROJECT your-environment.yml  Or push your workflow\ncdsctl workflow push MYPROJECT *.yml  cdsctl encrypt [ PROJECT-KEY ] VARIABLE-NAME [SECRET-VALUE] Examples cdsctl encrypt MYPROJECT my-data my-super-secret-value my-data: 01234567890987654321 Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl\t- CDS Command line utility cdsctl encrypt delete\t- Delete the given encrypted variable of your CDS project cdsctl encrypt list\t- List all the encrypted variable of your CDS project  "
},
{
	"uri": "/docs/components/engine/",
	"title": "engine",
	"tags": [],
	"description": "",
	"content": "engine CDS Engine\nSynopsis CDS\nContinuous Delivery Service\nEnterprise-Grade Continuous Delivery \u0026amp; DevOps Automation Open Source Platform\nhttps://ovh.github.io/cds/\nDownload You will find latest release of CDS engine on Github Releases.\nSEE ALSO  engine completion\t- Generate the autocompletion script for the specified shell engine config\t- Manage CDS Configuration engine database\t- Manage CDS database engine download\t- Download binaries engine start\t- Start CDS engine update\t- Update engine binary engine uptodate\t- check if engine is uptodate engine version\t- Display CDS version  "
},
{
	"uri": "/",
	"title": "Enterprise-Grade Continuous Delivery &amp; DevOps Automation Open Source Platform",
	"tags": [],
	"description": "",
	"content": "   Elastic CDS resources/workers are launched on demand, to guarantee low waiting times for users, with no over-consumption of idle resources\n    Extensible In CDS, any kind of action (Kubernetes and OpenStack deployments, pushing to Kafka, testing for CVEs…) can be captured in high-level plugins, to be used as building blocks by users. These plugins are straightforward to write and use, so it’s easy to meet the most exotic needs in an effective and stress-free way.\n    Flexible, but easy CDS can run complex workflows, with all sorts of intermediary steps, including build, test, deploy 1/10/100, manual or automatic gates, rollback, conditional branches… These workflows can be stored as code in the git repository. CDS provides basic workflow templates for the Core team’s most common scenarios, in order to ease the adoption process. This way, building a functional CI/CD chain from nothing can be quick and easy.\n    Self-service Finally, a key aspect is the idea of self-service. Once a CDS project is created by users, they are completely autonomous within that space, with the freedom to manage pipelines, delegate access rights etc. All users are free to customise their space as they see fit, and build on what is provided out-of-the-box. Personalising workflow templates, plugins, running build and tests on custom VM flavors or custom hardware… all this can be done without any intervention from the CDS administrators.\n    Clearly visualize your workflow CDS provides an intuitive UI that allows you to build complex workflows, run them and dig into the logs when needed.    The most powerful Command Line for a CI/CD Platform cdsctl is the CDS Command Line - you can script everything with it, cdsctl also provide some cool commands such as cdsctl shell to browse your projects and workflows without the need to open a browser.          We welcome all contributions Fork the repo and work on an issue    CDS is open-source and completely free.\n   More ways to contribute Help improve the docs     "
},
{
	"uri": "/docs/components/cdsctl/environment/",
	"title": "environment",
	"tags": [],
	"description": "",
	"content": "cdsctl environment Manage CDS environment\nSynopsis Manage CDS environment\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl\t- CDS Command line utility cdsctl environment create\t- Create a CDS environment cdsctl environment delete\t- Delete a CDS environment cdsctl environment export\t- Export an environment cdsctl environment import\t- Import an environment with local filepath or URL cdsctl environment keys\t- Manage CDS environment keys cdsctl environment list\t- List CDS environments cdsctl environment variable\t- Manage CDS environment variables  "
},
{
	"uri": "/docs/components/cdsctl/admin/hooks/repository/event/",
	"title": "event",
	"tags": [],
	"description": "",
	"content": "cdsctl admin hooks repository event Manage repositories events\nSynopsis Manage repositories events\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin hooks repository\t- Manage repositories where there were events cdsctl admin hooks repository event list\t- List repository events cdsctl admin hooks repository event restart\t- Restart an event cdsctl admin hooks repository event show\t- Get event  "
},
{
	"uri": "/docs/components/cdsctl/events/",
	"title": "events",
	"tags": [],
	"description": "",
	"content": "cdsctl events Listen CDS Events\nSynopsis Listen CDS Events\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl\t- CDS Command line utility cdsctl events listen\t- Listen CDS events  "
},
{
	"uri": "/docs/components/cdsctl/admin/hooks/executions/",
	"title": "executions",
	"tags": [],
	"description": "",
	"content": "cdsctl admin hooks executions List CDS Executions for one task\nSynopsis List CDS Executions for one task\ncdsctl admin hooks executions UUID [flags] Examples cdsctl admin hooks executions 5178ce1f-2f76-45c5-a203-58c10c3e2c73 Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl admin hooks\t- Manage CDS Hooks tasks  "
},
{
	"uri": "/docs/components/worker/exit/",
	"title": "exit",
	"tags": [],
	"description": "",
	"content": "worker exit worker exit\nSynopsis worker exit command lets job finish current step with exit code 0 (success) and disabled all further steps\nworker exit SEE ALSO  worker\t- CDS Worker  "
},
{
	"uri": "/docs/components/cdsctl/experimental/",
	"title": "experimental",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental CDS Experimental commands\nSynopsis CDS Experimental commands\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl\t- CDS Command line utility cdsctl experimental hatchery\t- CDS Experimental hatchery commands cdsctl experimental organization\t- CDS Experimental organization commands cdsctl experimental plugin\t- CDS Experimental plugin commands cdsctl experimental project\t- CDS Experimental project commands cdsctl experimental rbac\t- CDS Experimental rbac commands cdsctl experimental region\t- CDS Experimental region commands cdsctl experimental worker\t- CDS Experimental worker commands cdsctl experimental worker-model\t- CDS Experimental worker model commands cdsctl experimental workflow\t- CDS Experimental workflow commands  "
},
{
	"uri": "/docs/components/cdsctl/action/export/",
	"title": "export",
	"tags": [],
	"description": "",
	"content": "cdsctl action export Export a CDS action\nSynopsis Export a CDS action\ncdsctl action export ACTION-PATH [flags] Options  --format string Specify export format (json or yaml) (default \u0026quot;yaml\u0026quot;) Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl action\t- Manage CDS action  "
},
{
	"uri": "/docs/components/cdsctl/admin/features/export/",
	"title": "export",
	"tags": [],
	"description": "",
	"content": "cdsctl admin features export Export a feature as a yaml file\nSynopsis Export a feature as a yaml file\ncdsctl admin features export NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin features\t- Manage CDS feature flipping rules  "
},
{
	"uri": "/docs/components/cdsctl/admin/integration-model/export/",
	"title": "export",
	"tags": [],
	"description": "",
	"content": "cdsctl admin integration-model export Export a CDS Integration model\nSynopsis Export a CDS Integration model\ncdsctl admin integration-model export NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin integration-model\t- Manage CDS Integration models  "
},
{
	"uri": "/docs/components/cdsctl/admin/metadata/application/export/",
	"title": "export",
	"tags": [],
	"description": "",
	"content": "cdsctl admin metadata application export export CDS Application Metadata\nSynopsis export CDS Application Metadata\ncdsctl admin metadata application export [flags] Options  --export-file string Filename of file created (default \u0026quot;export_metadata_applications.csv\u0026quot;) Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin metadata application\t- Manage CDS Application Metadata  "
},
{
	"uri": "/docs/components/cdsctl/admin/metadata/project/export/",
	"title": "export",
	"tags": [],
	"description": "",
	"content": "cdsctl admin metadata project export export CDS Project Metadata\nSynopsis export CDS Project Metadata\ncdsctl admin metadata project export [flags] Options  --export-file string Filename of file created (default \u0026quot;export_metadata_projects.csv\u0026quot;) Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin metadata project\t- Manage CDS Project Metadata  "
},
{
	"uri": "/docs/components/cdsctl/admin/metadata/workflow/export/",
	"title": "export",
	"tags": [],
	"description": "",
	"content": "cdsctl admin metadata workflow export export CDS Workflow Metadata\nSynopsis export CDS Workflow Metadata\ncdsctl admin metadata workflow export [flags] Options  --export-file string Filename of file created (default \u0026quot;export_metadata_workflows.csv\u0026quot;) Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin metadata workflow\t- Manage CDS Workflow Metadata  "
},
{
	"uri": "/docs/components/cdsctl/admin/plugins/export/",
	"title": "export",
	"tags": [],
	"description": "",
	"content": "cdsctl admin plugins export Export a CDS Plugin\nSynopsis Export a CDS Plugin\ncdsctl admin plugins export NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin plugins\t- Manage CDS Plugins  "
},
{
	"uri": "/docs/components/cdsctl/application/export/",
	"title": "export",
	"tags": [],
	"description": "",
	"content": "cdsctl application export Export an application\nSynopsis Export an application\ncdsctl application export [ PROJECT-KEY APPLICATION-NAME ] [flags] Options  --format string Specify export format (json or yaml) (default \u0026quot;yaml\u0026quot;) Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl application\t- Manage CDS application  "
},
{
	"uri": "/docs/components/cdsctl/environment/export/",
	"title": "export",
	"tags": [],
	"description": "",
	"content": "cdsctl environment export Export an environment\nSynopsis Export an environment\ncdsctl environment export [ PROJECT-KEY ] ENVIRONMENT-NAME [flags] Options  --format string Specify export format (json or yaml) (default \u0026quot;yaml\u0026quot;) Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl environment\t- Manage CDS environment  "
},
{
	"uri": "/docs/components/cdsctl/experimental/project/notification/export/",
	"title": "export",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental project notification export Export notification settings from a project\nSynopsis Export notification settings from a project\ncdsctl experimental project notification export [ PROJECT-KEY ] NAME Examples cdsctl notification export MY-PROJECT Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental project notification\t- Manage Notification on a CDS project  "
},
{
	"uri": "/docs/components/cdsctl/pipeline/export/",
	"title": "export",
	"tags": [],
	"description": "",
	"content": "cdsctl pipeline export Export CDS pipeline\nSynopsis Export CDS pipeline\ncdsctl pipeline export [ PROJECT-KEY ] PIPELINE-NAME [flags] Options  --format string Specify export format (json or yaml) (default \u0026quot;yaml\u0026quot;) Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl pipeline\t- Manage CDS pipeline  "
},
{
	"uri": "/docs/components/cdsctl/project/integration/export/",
	"title": "export",
	"tags": [],
	"description": "",
	"content": "cdsctl project integration export Export a integration configuration from a project to stdout\nSynopsis Export a integration configuration from a project to stdout\ncdsctl project integration export [ PROJECT-KEY ] NAME Examples cdsctl project integration export MY-PROJECT MY-INTEGRATION-NAME \u0026gt; file.yaml Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl project integration\t- Manage CDS integrations  "
},
{
	"uri": "/docs/components/cdsctl/project/vcs/export/",
	"title": "export",
	"tags": [],
	"description": "",
	"content": "cdsctl project vcs export Export a VCS configuration from a project to stdout\nSynopsis Export a VCS configuration from a project to stdout\ncdsctl project vcs export [ PROJECT-KEY ] NAME Examples cdsctl vcs export MY-PROJECT MY-VCS-SERVER-NAME \u0026gt; file.yaml Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl project vcs\t- Manage VCS on a CDS project  "
},
{
	"uri": "/docs/components/cdsctl/template/instances/export/",
	"title": "export",
	"tags": [],
	"description": "",
	"content": "cdsctl template instances export Get instances for a CDS workflow template as yaml file\nSynopsis Get instances for a CDS workflow template as yaml file\ncdsctl template instances export [TEMPLATE-PATH] [flags] Examples cdsctl template instances group-name/template-slug Options  --filter-params stringArray Specify filter on params for template like --filter-params paramKey=paramValue, wil return only instances that have params that match. Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl template instances\t- Get instances for a CDS workflow template  "
},
{
	"uri": "/docs/components/cdsctl/worker/model/export/",
	"title": "export",
	"tags": [],
	"description": "",
	"content": "cdsctl worker model export Export a worker model\nSynopsis Export a worker model\ncdsctl worker model export WORKER-MODEL-PATH [flags] Examples cdsctl worker model export myGroup/myModel Options  --format string Specify export format (json or yaml) (default \u0026quot;yaml\u0026quot;) Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl worker model\t- Manage Worker Model  "
},
{
	"uri": "/docs/components/cdsctl/workflow/export/",
	"title": "export",
	"tags": [],
	"description": "",
	"content": "cdsctl workflow export Export a workflow\nSynopsis Export a workflow\ncdsctl workflow export [ PROJECT-KEY WORKFLOW-NAME ] [flags] Options  --format string Specify export format (json or yaml) (default \u0026quot;yaml\u0026quot;) --with-permissions Export permissions Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl workflow\t- Manage CDS workflow  "
},
{
	"uri": "/docs/components/worker/export/",
	"title": "export",
	"tags": [],
	"description": "",
	"content": "worker export worker export \u0026lt;varname\u0026gt; \u0026lt;value\u0026gt;\nSynopsis Inside a step script (https://ovh.github.io/cds/docs/actions/builtin-script/), you can create a build variable with the worker command:\nworker export foo bar  then, you can use new build variable:\necho \u0026quot;{{.cds.build.foo}}\u0026quot;  Scope You can use the build variable in :\n another step of the current job with {{.cds.build.varname}} the next stages in same pipeline {{.cds.build.varname}} the next pipelines {{.workflow.pipelineName.build.varname}} with pipelineName the name of the pipeline in your workflow  worker export SEE ALSO  worker\t- CDS Worker  "
},
{
	"uri": "/docs/components/cdsctl/project/favorite/",
	"title": "favorite",
	"tags": [],
	"description": "",
	"content": "cdsctl project favorite Add or delete a CDS project to your personal bookmarks\nSynopsis Add or delete a CDS project to your personal bookmarks\ncdsctl project favorite [ PROJECT-KEY ] Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl project\t- Manage CDS project  "
},
{
	"uri": "/docs/components/cdsctl/user/favorite/",
	"title": "favorite",
	"tags": [],
	"description": "",
	"content": "cdsctl user favorite Display all the user favorites\nSynopsis Display all the user favorites\ncdsctl user favorite Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl user\t- Manage CDS user  "
},
{
	"uri": "/docs/components/cdsctl/workflow/favorite/",
	"title": "favorite",
	"tags": [],
	"description": "",
	"content": "cdsctl workflow favorite Add or delete a CDS workflow to your personal bookmarks\nSynopsis Add or delete a CDS workflow to your personal bookmarks\ncdsctl workflow favorite [ PROJECT-KEY WORKFLOW-NAME ] Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl workflow\t- Manage CDS workflow  "
},
{
	"uri": "/development/rest/feature/",
	"title": "feature",
	"tags": [],
	"description": "",
	"content": "POST /feature/enabled/\u0026lt;name\u0026gt;    URL /feature/enabled/\u0026lt;name\u0026gt;     Method POST   Permissions Auth: true   Code isFeatureEnabledHandler    "
},
{
	"uri": "/docs/components/cdsctl/admin/features/",
	"title": "features",
	"tags": [],
	"description": "",
	"content": "cdsctl admin features Manage CDS feature flipping rules\nSynopsis Manage CDS feature flipping rules\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin\t- Manage CDS (admin only) cdsctl admin features delete\t- Delete cdsctl admin features export\t- Export a feature as a yaml file cdsctl admin features import\t- Import a feature as a yaml file cdsctl admin features list\t- List all the features  "
},
{
	"uri": "/docs/components/cdsctl/completion/fish/",
	"title": "fish",
	"tags": [],
	"description": "",
	"content": "cdsctl completion fish Generate the autocompletion script for fish\nSynopsis Generate the autocompletion script for the fish shell.\nTo load completions in your current shell session:\ncdsctl completion fish | source  To load completions for every new session, execute once:\ncdsctl completion fish \u0026gt; ~/.config/fish/completions/cdsctl.fish  You will need to start a new shell for this setup to take effect.\ncdsctl completion fish [flags] Options  --no-descriptions disable completion descriptions Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl completion\t- Generate the autocompletion script for the specified shell  "
},
{
	"uri": "/docs/components/engine/completion/fish/",
	"title": "fish",
	"tags": [],
	"description": "",
	"content": "engine completion fish Generate the autocompletion script for fish\nSynopsis Generate the autocompletion script for the fish shell.\nTo load completions in your current shell session:\nengine completion fish | source  To load completions for every new session, execute once:\nengine completion fish \u0026gt; ~/.config/fish/completions/engine.fish  You will need to start a new shell for this setup to take effect.\nengine completion fish [flags] Options  --no-descriptions disable completion descriptions SEE ALSO  engine completion\t- Generate the autocompletion script for the specified shell  "
},
{
	"uri": "/docs/components/worker/completion/fish/",
	"title": "fish",
	"tags": [],
	"description": "",
	"content": "worker completion fish Generate the autocompletion script for fish\nSynopsis Generate the autocompletion script for the fish shell.\nTo load completions in your current shell session:\nworker completion fish | source  To load completions for every new session, execute once:\nworker completion fish \u0026gt; ~/.config/fish/completions/worker.fish  You will need to start a new shell for this setup to take effect.\nworker completion fish [flags] Options  --no-descriptions disable completion descriptions SEE ALSO  worker completion\t- Generate the autocompletion script for the specified shell  "
},
{
	"uri": "/docs/integrations/gerrit/",
	"title": "Gerrit Repository Manager",
	"tags": [],
	"description": "",
	"content": "The Gerrit Repository Manager integration have to be configured on your CDS by a CDS Administrator.\nThis integration allows you to link a Git Repository hosted by Gerrit to a CDS application.\nThis integration enables some features:\n Gerrit Hooks Easy to use action CheckoutApplication and GitClone for advanced usage Send comments on your Pull-Requests when a workflow is failed Add a vote -1/+1 on a change  How to configure Gerrit integration You will have to create 2 users on gerrit: [How to] An Administrator User ( with SSH KEY ), to get event from Gerrit Server An User on gerrit ( with httpPassword ), to comment changes with workflow result  Import configuration Create a yml file:\nversion: v1.0 name: gerrit type: gerrit description: \u0026#34;gerrit new dev\u0026#34; url: https://your-gerrit-instance:9080 auth: sshUsername: gerrit-username # # User to access to gerrit event stream sshPort: 29418 sshPrivateKey: -----BEGIN OPENSSH PRIVATE KEY-----\\nfoofoofoo\\non\\none\\nline\\nhere\\n-----END OPENSSH PRIVATE KEY-----\u0026#34; # Private key of the user who access to gerrit event stream user: admin # User that review changes token: gerrit-generated-password # Http Password of the user that comment changes cdsctl project vcs import YOUR_CDS_PROJECT_KEY vcs-gerrit.yml See how to generate Configuration File\nStart the vcs µService $ engine start vcs # you can also start CDS api and vcs in the same process: $ engine start api vcs "
},
{
	"uri": "/docs/actions/builtin-gitclone/",
	"title": "GitClone",
	"tags": [],
	"description": "",
	"content": "GitClone is a builtin action, you can\u0026rsquo;t modify it.\nClone a repository into a new directory.\nParameters  branch: (optional) Instead of pointing the newly created HEAD to the branch pointed to by the cloned repository’s HEAD, point to {{.git.branch}} branch instead. commit: (optional) Set the current branch head (HEAD) to the commit. depth: (optional) Clone with a depth of 50 by default. You can remove \u0026ndash;depth with the value \u0026lsquo;false\u0026rsquo;. directory: (optional) The name of a directory to clone into. password: (optional) Set the password to be able to git clone from https with authentication. privateKey: (optional) Set the private key to be able to git clone from ssh. You can create an application key named \u0026lsquo;app-key\u0026rsquo; and use it in this action. The public key have to be granted on your repository. submodules: (optional) Submodules are cloned by default, you can set \u0026lsquo;false\u0026rsquo; to avoid this. tag: (optional) Useful when you want to git clone a specific tag. Empty by default, you can set to {{.git.tag}} to clone a tag from your repository. In this way, in your workflow payload you can add a key in your JSON like \u0026ldquo;git.tag\u0026rdquo;: \u0026ldquo;1.0.2\u0026rdquo;. url: URL must contain information about the transport protocol, the address of the remote server, and the path to the repository. If your application is linked to a repository, you can use {{.git.url}} (clone over ssh) or {{.git.http_url}} (clone over https). user: (optional) Set the user to be able to git clone from https with authentication.  Requirements  git: type: binary Value: git  YAML example Example of a pipeline using GitClone action:\nversion: v1.0 name: Pipeline1 stages: - Stage1 jobs: - job: Job1 stage: Stage1 steps: - gitClone: branch: \u0026#39;{{.git.branch}}\u0026#39; commit: \u0026#39;{{.git.commit}}\u0026#39; directory: \u0026#39;{{.cds.workspace}}\u0026#39; privateKey: proj-mykey url: \u0026#39;{{.git.url}}\u0026#39; Example  Add repository manager on your application.   Job Configuration.   Launch workflow, you can select the git branch.   View logs on job  Notes By default, depth is 50 and git clone with --single-branch automatically. So, if you want to do in a step script git diff anotherBranch, you have to set depth to \u0026lsquo;false\u0026rsquo;.\nIf there is no user \u0026amp;\u0026amp; password \u0026amp;\u0026amp; sshkey set in action GitClone, CDS checks on Application VCS Strategy if some auth parameters can be used.\n"
},
{
	"uri": "/docs/integrations/github/",
	"title": "GitHub",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/docs/integrations/github/github_authentication/",
	"title": "GitHub Authentication",
	"tags": [],
	"description": "",
	"content": "The GitHub Authentication Integration have to be configured on your CDS by a CDS Administrator.\nThis integration allows you to authenticate user with the GitHub Authentication.\nResume on what you have to do before using the GitHub Authentication Integration  As a CDS Administrator: Create a CDS application on GitHub Complete CDS Configuration File  How to configure GitHub Authentication integration Create a CDS application on GitHub As a CDS Administrator\nGo to https://github.com/settings/developers and Register a new OAuth application. Set :\n an application name, example: CDS company name the Homepage URL: http(s)://\u0026lt;your-cds-webui\u0026gt; (with a local webui, it will be: http://localhost:8080) the Authorization callback URL: http(s)://\u0026lt;your-cds-ui\u0026gt;/auth/callback/github#  Example for a local configuration:\n with WebUI default port (8080) Homepage URL will be http://localhost:8080 Callback URL will be http://localhost:8080/auth/callback/github#  Click on Register Application, then on the next page, GitHub give you a Client ID and a Client Secret\nComplete CDS Configuration File Edit the toml file:\n section [api.auth.github]  set a value to clientId and clientSecret enable the signin with enabled = true if you want to disable signup with GitHub, set signupDisabled = true    [api.auth.github] ####### # GitHub API URL apiUrl = \u0026#34;https://api.github.com\u0026#34; ####### # GitHub OAuth Client ID clientId = \u0026#34;xxxx\u0026#34; # GitHub OAuth Client Secret clientSecret = \u0026#34;xxxx\u0026#34; enabled = true signupDisabled = false ####### # GitHub URL url = \u0026#34;https://github.com\u0026#34; "
},
{
	"uri": "/docs/integrations/github/github_repository_manager/",
	"title": "GitHub Repository Manager",
	"tags": [],
	"description": "",
	"content": "The GitHub Repository Manager Integration have to be configured on your CDS by a CDS Administrator.\nThis integration allows you to link a Git Repository hosted by GitHub to a CDS Application.\nThis integration enables some features:\n Git Repository Webhook Git Repository Poller Easy to use action CheckoutApplication and GitClone for advanced usage Send build notifications on your Pull-Requests and Commits on GitHub. More informations Send comments on your Pull-Requests when a workflow is failed. More informations  How to configure GitHub integration Create the Personal Access Token on GitHub Generate a new token on https://github.com/settings/tokens with the following scopes:\n repo:status public_repo  Import configuration Create a yml file:\nversion: v1.0 name: github type: github description: \u0026#34;my github\u0026#34; auth: username: your-username token: ghp_your-token-here options: urlApi: \u0026#34;\u0026#34; # optional, default is https://api.github.com disableStatus: false # Set to true if you don\u0026#39;t want CDS to push statuses on the VCS server - optional disableStatusDetails: false # Set to true if you don\u0026#39;t want CDS to push CDS URL in statuses on the VCS server - optional disablePolling: false # Does polling is supported by VCS Server - optional disableWebHooks: false # Does webhooks are supported by VCS Server - optional cdsctl project vcs import YOUR_CDS_PROJECT_KEY vcs-github.yml Add a repository webhook on a workflow As a user, with writing rights on a CDS project\nSelect the first pipeline, then click on Add a hook.\nSelect the RepositoryWebhook, then click on Save.\nThe webhook is automatically created on GitHub.\nWhat\u0026rsquo;s next?  Use CheckoutApplication in your pipeline git push on your Git Repository on GitHub See the build status on GitHub.  FAQ My CDS is not accessible from GitHub, how can I do? When someone git push on your Git Repository, GitHub have to call your CDS to run your CDS Workflow. This is the behaviour of the RepositoryWebhook. But if your CDS is not reacheable from GitHub, how can you do?\nBy chance, you have two choices :)\n When you add a Hook on your workflow, select the Git Repository Poller. The µService Hooks will call regularly GitHub. With this way, GitHub doesn\u0026rsquo;t need to call your CDS.  Git Repository Poller documentation\nIf you hesitate between the two: the RepositoryWebhook is more reactive than the Git Repository Poller.\nI don\u0026rsquo;t see the type Git Repository Poller nor RepositoryWebhook when I add a Hook Before adding a hook on your Workflow, you have to add the application in the Pipeline Context. Select the first pipeline, then click on Edit the pipeline context from the sidebar.\nPipeline Context Documentation\nVCS events For now, CDS supports push events. CDS uses this push event to remove existing runs for deleted branches (24h after branch deletion).\n"
},
{
	"uri": "/docs/integrations/gitlab/",
	"title": "GitLab",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/docs/integrations/gitlab/gitlab_authentication/",
	"title": "GitLab Authentication",
	"tags": [],
	"description": "",
	"content": "The GitHub Authentication Integration have to be configured on your CDS by a CDS Administrator.\nThis integration allows you to authenticate user with the GitHub Authentication.\nResume on what you have to do before using the GitHub Authentication Integration  As a CDS Administrator: Create a CDS application on GitLab Complete CDS Configuration File  How to configure GitLab integration What you need to perform the following steps:\n GitLab admin privileges  Create a CDS application on GitLab Notice: if you have already a CDS Application in GitLab for Repository Manager, you can\u0026rsquo;t reuse it for Authentication.\nIn GitLab go to Settings / Application section. Create a new application with:\n Name: CDS AUTH Redirect URI: http(s):///auth/callback/gitlab#  Example for a local configuration: Redirect URI will be http://localhost:8080/auth/callback/gitlab\nScopes:\n API read_user read_registry  Complete CDS Configuration File Edit the toml file:\n section [api.auth.gitlab]  set a value to applicationID and secret enable the signin with enabled = true if you want to disable signup with GitLab, set signupDisabled = true    [api.auth.gitlab] ####### # Gitlab OAuth Application ID applicationID = \u0026#34;\u0026#34; enabled = false # Gitlab OAuth Application Secret secret = \u0026#34;\u0026#34; signupDisabled = false ####### # Gitlab URL url = \u0026#34;https://gitlab.com\u0026#34; "
},
{
	"uri": "/docs/integrations/gitlab/gitlab_repository_manager/",
	"title": "GitLab Repository Manager",
	"tags": [],
	"description": "",
	"content": "The GitLab Repository Manager Integration have to be configured on your CDS by a CDS Administrator.\nThis integration allows you to link a Git Repository hosted by GitLab to a CDS Application.\nThis integration enables some features:\n Git Repository Webhook Easy to use action CheckoutApplication and GitClone for advanced usage Send build notifications on your Pull-Requests and Commits on GitLab. More informations  Create the Personal Access Token on GitLab Generate a new token on https://gitlab.com/-/profile/personal_access_tokens with the following scopes:\n api read_api read_user read_repository write_repository  Import configuration Create a yml file:\nversion: v1.0 name: gitlab type: gitlab description: \u0026#34;my gitlab\u0026#34; auth: username: your-username token: glpat_your-token-here options: disableStatus: false # Set to true if you don\u0026#39;t want CDS to push statuses on the VCS server - optional disableStatusDetails: false # Set to true if you don\u0026#39;t want CDS to push CDS URL in statuses on the VCS server - optional disablePolling: false # Does polling is supported by VCS Server - optional disableWebHooks: false # Does webhooks are supported by VCS Server - optional cdsctl project vcs import YOUR_CDS_PROJECT_KEY vcs-gitlab.yml "
},
{
	"uri": "/docs/actions/builtin-gittag/",
	"title": "GitTag",
	"tags": [],
	"description": "",
	"content": "GitTag is a builtin action, you can\u0026rsquo;t modify it.\nTag the current branch and push it. Use vcs config from your application. Semver used if fully compatible with https://semver.org.\nParameters  path: (optional) The path to your git directory. prefix: (optional) Add a prefix for tag name. tagLevel: Set the level of the tag. Must be \u0026lsquo;major\u0026rsquo; or \u0026lsquo;minor\u0026rsquo; or \u0026lsquo;patch\u0026rsquo;. tagMessage: (optional) Set a message for the tag. tagMetadata: (optional) Metadata of the tag. Example: cds.42 on a tag 1.0.0 will return 1.0.0+cds.42. tagPrerelease: (optional) Prerelease version of the tag. Example: alpha on a tag 1.0.0 will return 1.0.0-alpha.  Requirements  git: type: binary Value: git gpg: type: binary Value: gpg  YAML example Example of a pipeline using GitTag action:\nversion: v1.0 name: Pipeline1 parameters: tagLevel: type: list default: major;minor;patch description: major, minor or patch stages: - Stage1 jobs: - job: Job1 stage: Stage1 steps: - checkout: \u0026#39;{{.cds.workspace}}\u0026#39; - gitTag: path: \u0026#39;{{.cds.workspace}}\u0026#39; tagLevel: \u0026#39;{{.cds.pip.tagLevel}}\u0026#39; tagMessage: Release from CDS run {{.cds.version}} Example Tutorial that use this action: Build, tag and release an application.\n"
},
{
	"uri": "/docs/components/cdsctl/user/gpg/",
	"title": "gpg",
	"tags": [],
	"description": "",
	"content": "cdsctl user gpg Manage CDS user gpg keys\nSynopsis Manage CDS user gpg keys\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl user\t- Manage CDS user cdsctl user gpg delete\t- Delete CDS user gpg key cdsctl user gpg import\t- Import a CDS user gpg key cdsctl user gpg list\t- List CDS users gpg keys cdsctl user gpg show\t- Show Current CDS user gpg key  "
},
{
	"uri": "/docs/components/cdsctl/group/grant/",
	"title": "grant",
	"tags": [],
	"description": "",
	"content": "cdsctl group grant Grant a CDS group in a project or workflow\nSynopsis Grant a CDS group in a project or workflow\ncdsctl group grant [ PROJECT-KEY ] GROUP-NAME PERMISSION [flags] Options  -p, --only-project Indicate if the group must be added only on project or also on all workflows in project -w, --workflow string Workflow name Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl group\t- Manage CDS group  "
},
{
	"uri": "/development/rest/group/",
	"title": "group",
	"tags": [],
	"description": "",
	"content": "DELETE /group/\u0026lt;group-name\u0026gt;/user/\u0026lt;username\u0026gt;    URL /group/\u0026lt;group-name\u0026gt;/user/\u0026lt;username\u0026gt;     Method DELETE   Permissions Auth: true   Scopes Group   Code deleteGroupUserHandler    DELETE /group/\u0026lt;group-name\u0026gt;    URL /group/\u0026lt;group-name\u0026gt;     Method DELETE   Permissions Auth: true   Scopes Group   Code deleteGroupHandler    GET /group/\u0026lt;group-name\u0026gt;/action    URL /group/\u0026lt;group-name\u0026gt;/action     Method GET   Permissions Auth: true   Scopes Group   Code getActionsForGroupHandler    GET /group/\u0026lt;group-name\u0026gt;/project    URL /group/\u0026lt;group-name\u0026gt;/project     Method GET   Permissions Auth: true   Scopes Group   Code getProjectGroupHandler    GET /group/\u0026lt;group-name\u0026gt;/worker/model    URL /group/\u0026lt;group-name\u0026gt;/worker/model     Method GET   Permissions Auth: true   Scopes WorkerModel   Code getWorkerModelsForGroupHandler    GET /group/\u0026lt;group-name\u0026gt;    URL /group/\u0026lt;group-name\u0026gt;     Method GET   Permissions Auth: true   Scopes Group   Code getGroupHandler    GET /group    URL /group     Method GET   Permissions Auth: true   Scopes Group   Code getGroupsHandler    POST /group/\u0026lt;group-name\u0026gt;/user    URL /group/\u0026lt;group-name\u0026gt;/user     Method POST   Permissions Auth: true   Scopes Group   Code postGroupUserHandler    POST /group    URL /group     Method POST   Permissions Auth: true   Scopes Group   Code postGroupHandler    PUT /group/\u0026lt;group-name\u0026gt;/user/\u0026lt;username\u0026gt;    URL /group/\u0026lt;group-name\u0026gt;/user/\u0026lt;username\u0026gt;     Method PUT   Permissions Auth: true   Scopes Group   Code putGroupUserHandler    PUT /group/\u0026lt;group-name\u0026gt;    URL /group/\u0026lt;group-name\u0026gt;     Method PUT   Permissions Auth: true   Scopes Group   Code putGroupHandler    "
},
{
	"uri": "/docs/components/cdsctl/group/",
	"title": "group",
	"tags": [],
	"description": "",
	"content": "cdsctl group Manage CDS group\nSynopsis Manage CDS group\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl\t- CDS Command line utility cdsctl group create\t- Create a CDS group cdsctl group delete\t- Delete a CDS group cdsctl group grant\t- Grant a CDS group in a project or workflow cdsctl group list\t- List CDS groups cdsctl group member\t- Manage group's member cdsctl group rename\t- Rename a CDS group cdsctl group revoke\t- Revoke a CDS group in a project or workflow cdsctl group show\t- Show a CDS group  "
},
{
	"uri": "/docs/components/cdsctl/experimental/hatchery/",
	"title": "hatchery",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental hatchery CDS Experimental hatchery commands\nSynopsis CDS Experimental hatchery commands\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental\t- CDS Experimental commands cdsctl experimental hatchery add\t- Create a new hatchery cdsctl experimental hatchery delete\t- Remove hatchery cdsctl experimental hatchery list\t- List all hatcheries cdsctl experimental hatchery regen\t- Regen the hatchery token cdsctl experimental hatchery show\t- Get an hatchery by its identifier  "
},
{
	"uri": "/docs/components/cdsctl/health/",
	"title": "health",
	"tags": [],
	"description": "",
	"content": "cdsctl health Check CDS health\nSynopsis Check CDS health\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl\t- CDS Command line utility cdsctl health dbmigrate\t- Show DB Migrate status cdsctl health status\t- Show CDS Status  "
},
{
	"uri": "/docs/actions/helmpush/",
	"title": "helmPush",
	"tags": [],
	"description": "",
	"content": "This push Helm chart on Chart Museum or Artifactory.\nParameters  appVersion: (Optional) Override the app version before push to registry. chartFolder: Relative path to chart folder to be published chartVersion: (Optional) Override the chart version before push to registry. registryAccessToken: Send token in Authorization header  This parameter can be empty when an Artifactory integration is set up.\n registryAuthHeader: Alternative header to use for token auth  This parameter can be empty when an Artifactory integration is set up.\n registryPassword: Registry Password  This parameter can be empty when an Artifactory integration is set up.\n registryURL: Registry URL  This parameter can be empty when an Artifactory integration is set up.\n registryUsername: Registry Username  This parameter can be empty when an Artifactory integration is set up.\n updateDependencies: Update dependencies from the chart before packaging  "
},
{
	"uri": "/docs/components/cdsctl/experimental/workflow/history/",
	"title": "history",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental workflow history Display the run history for the given workflow\nSynopsis Display the run history for the given workflow\ncdsctl experimental workflow history PROJ_KEY VCS_IDENTIFIER REPO_IDENTIFIER WORKFLOW_NAME [flags] Examples cdsctl experimental workflow history \u0026lt;proj_key\u0026gt; \u0026lt;vcs_identifier\u0026gt; \u0026lt;repo_identifier\u0026gt; \u0026lt;workflow_name\u0026gt; Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl experimental workflow\t- CDS Experimental workflow commands  "
},
{
	"uri": "/docs/components/cdsctl/workflow/history/",
	"title": "history",
	"tags": [],
	"description": "",
	"content": "cdsctl workflow history Display CDS workflow runs history\nSynopsis Display CDS workflow runs history\ncdsctl workflow history [ PROJECT-KEY WORKFLOW-NAME ] [OFFSET] [LIMIT] [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl workflow\t- Manage CDS workflow  "
},
{
	"uri": "/development/rest/hook/",
	"title": "hook",
	"tags": [],
	"description": "",
	"content": "GET /hook/\u0026lt;uuid\u0026gt;/workflow/\u0026lt;workflow-id\u0026gt;/vcsevent/\u0026lt;vcs-server\u0026gt;    URL /hook/\u0026lt;uuid\u0026gt;/workflow/\u0026lt;workflow-id\u0026gt;/vcsevent/\u0026lt;vcs-server\u0026gt;     Method GET   Permissions Auth: true   Scopes Run   Code getHookPollingVCSEvents    "
},
{
	"uri": "/docs/components/cdsctl/experimental/project/repository/hook-key/",
	"title": "hook-key",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental project repository hook-key Get repository webhook secret key\nSynopsis Get repository webhook secret key\ncdsctl experimental project repository hook-key [ PROJECT-KEY ] VCS-TYPE VCS-NAME REPOSITORY-NAME [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl experimental project repository\t- Manage repositories on a CDS project  "
},
{
	"uri": "/docs/components/cdsctl/admin/hooks/",
	"title": "hooks",
	"tags": [],
	"description": "",
	"content": "cdsctl admin hooks Manage CDS Hooks tasks\nSynopsis Manage CDS Hooks tasks\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin\t- Manage CDS (admin only) cdsctl admin hooks executions\t- List CDS Executions for one task cdsctl admin hooks list\t- List CDS Hooks Tasks cdsctl admin hooks purge\t- Delete all executions for a task cdsctl admin hooks repository\t- Manage repositories where there were events cdsctl admin hooks start\t- Start a task cdsctl admin hooks startall\t- Start all tasks cdsctl admin hooks stop\t- Stop a task cdsctl admin hooks stopall\t- Stop all tasks  "
},
{
	"uri": "/development/rest/import/",
	"title": "import",
	"tags": [],
	"description": "",
	"content": "Import workflow as code    URL /import/\u0026lt;project-key\u0026gt;     Method POST   Permissions Auth: true   Scopes Project   Code postImportAsCodeHandler    Description This the entrypoint to perform workflow as code. The first step is to post an operation leading to checkout application and scrapping files\nRequest Body {\u0026quot;vcs_Server\u0026quot;:\u0026quot;github\u0026quot;, \u0026quot;url\u0026quot;:\u0026quot;https://github.com/fsamin/go-repo.git\u0026quot;,\u0026quot;strategy\u0026quot;:{\u0026quot;connection_type\u0026quot;:\u0026quot;https\u0026quot;,\u0026quot;ssh_key\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;user\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;password\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;branch\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;default_branch\u0026quot;:\u0026quot;master\u0026quot;,\u0026quot;pgp_key\u0026quot;:\u0026quot;\u0026quot;},\u0026quot;setup\u0026quot;:{\u0026quot;checkout\u0026quot;:{\u0026quot;branch\u0026quot;:\u0026quot;master\u0026quot;}}} Response Body {\u0026quot;uuid\u0026quot;:\u0026quot;ee3946ac-3a77-46b1-af78-77868fde75ec\u0026quot;,\u0026quot;url\u0026quot;:\u0026quot;https://github.com/fsamin/go-repo.git\u0026quot;,\u0026quot;strategy\u0026quot;:{\u0026quot;connection_type\u0026quot;:\u0026quot;https\u0026quot;,\u0026quot;ssh_key\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;user\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;password\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;branch\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;default_branch\u0026quot;:\u0026quot;master\u0026quot;,\u0026quot;pgp_key\u0026quot;:\u0026quot;\u0026quot;},\u0026quot;setup\u0026quot;:{\u0026quot;checkout\u0026quot;:{\u0026quot;branch\u0026quot;:\u0026quot;master\u0026quot;}}} Perform workflow as code import    URL /import/\u0026lt;project-key\u0026gt;/\u0026lt;uuid\u0026gt;/perform     Method POST   Permissions Auth: true   Scopes Project   Code postPerformImportAsCodeHandler    Description This operation push the workflow as code into the project\nRequest Body None Response Body translated message list "
},
{
	"uri": "/docs/components/cdsctl/action/import/",
	"title": "import",
	"tags": [],
	"description": "",
	"content": "cdsctl action import Import a CDS action\nSynopsis Import a CDS action\ncdsctl action import PATH Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl action\t- Manage CDS action  "
},
{
	"uri": "/docs/components/cdsctl/admin/features/import/",
	"title": "import",
	"tags": [],
	"description": "",
	"content": "cdsctl admin features import Import a feature as a yaml file\nSynopsis Import a feature as a yaml file\ncdsctl admin features import FILE Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin features\t- Manage CDS feature flipping rules  "
},
{
	"uri": "/docs/components/cdsctl/admin/integration-model/import/",
	"title": "import",
	"tags": [],
	"description": "",
	"content": "cdsctl admin integration-model import Import a CDS Integration model from a yaml file\nSynopsis Import a CDS Integration model from a yaml file\ncdsctl admin integration-model import FILE Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin integration-model\t- Manage CDS Integration models  "
},
{
	"uri": "/docs/components/cdsctl/admin/metadata/application/import/",
	"title": "import",
	"tags": [],
	"description": "",
	"content": "cdsctl admin metadata application import import CDS Application Metadata\nSynopsis Metadata are represented with key:value\nExample of a csv file for a CDS Application\nproject_key;application_name;last_modified;vcs_repofullname;ou1;ou2 YOUR_PROJECT_KEY;Your Application Name;2020-01-01T00:00:00;repo_of_application;OU_1_VALUE;OU_2_VALUE  You can enter as many metadata as desired, the key name is on the first line of the csv file.\ncdsctl admin metadata application import PATH Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin metadata application\t- Manage CDS Application Metadata  "
},
{
	"uri": "/docs/components/cdsctl/admin/metadata/project/import/",
	"title": "import",
	"tags": [],
	"description": "",
	"content": "cdsctl admin metadata project import import CDS Project Metadata\nSynopsis Metadata are represented with key:value\nExample of a csv file for a CDS Project\nproject_key;project_name;last_modified;ou1;ou2 YOUR_PROJECT_KEY;Your Project Name;2020-01-01T00:00:00;OU_1_VALUE;OU_2_VALUE  You can enter as many metadata as desired, the key name is on the first line of the csv file.\ncdsctl admin metadata project import PATH Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin metadata project\t- Manage CDS Project Metadata  "
},
{
	"uri": "/docs/components/cdsctl/admin/plugins/import/",
	"title": "import",
	"tags": [],
	"description": "",
	"content": "cdsctl admin plugins import Import a CDS Plugin\nSynopsis Import a CDS Plugin\ncdsctl admin plugins import FILE Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin plugins\t- Manage CDS Plugins  "
},
{
	"uri": "/docs/components/cdsctl/application/import/",
	"title": "import",
	"tags": [],
	"description": "",
	"content": "cdsctl application import Import an application with a local filepath or an URL\nSynopsis PATH: Path or URL of application to import\nWithout \u0026ndash;force, CDS won\u0026rsquo;t update an existing application. With \u0026ndash;force, CDS will allow you to update an existing application. If this application is managed \u0026lsquo;as-code\u0026rsquo;, CDS will override it. This application will be detached from the repository, until it is re-imported again following a commit on the repo.\ncdsctl application import [ PROJECT-KEY ] PATH [flags] Options  --force Override application if exists Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl application\t- Manage CDS application  "
},
{
	"uri": "/docs/components/cdsctl/environment/import/",
	"title": "import",
	"tags": [],
	"description": "",
	"content": "cdsctl environment import Import an environment with local filepath or URL\nSynopsis PATH: Path or URL of environment to import\nWithout \u0026ndash;force, CDS won\u0026rsquo;t update an existing environment. With \u0026ndash;force, CDS will allow you to update an existing environment. If this environment is managed \u0026lsquo;as-code\u0026rsquo;, CDS will override it. This environment will be detached from the repository, until it is re-imported again following a commit on the repo.\ncdsctl environment import [ PROJECT-KEY ] PATH [flags] Options  --force Override environment if exists Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl environment\t- Manage CDS environment  "
},
{
	"uri": "/docs/components/cdsctl/experimental/plugin/import/",
	"title": "import",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental plugin import Import a plugin\nSynopsis Import a plugin\ncdsctl experimental plugin import FILE [flags] Options  --force Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental plugin\t- CDS Experimental plugin commands  "
},
{
	"uri": "/docs/components/cdsctl/experimental/project/notification/import/",
	"title": "import",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental project notification import Import notification settings on a project from a yaml file\nSynopsis Import notification settings on a project from a yaml file\ncdsctl experimental project notification import [ PROJECT-KEY ] FILENAME [flags] Examples cdsctl project notification import MY-PROJECT file.yml Options  --force Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental project notification\t- Manage Notification on a CDS project  "
},
{
	"uri": "/docs/components/cdsctl/experimental/rbac/import/",
	"title": "import",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental rbac import Import a rbac rule from a yaml file\nSynopsis Import a rbac rule from a yaml file\ncdsctl experimental rbac import FILENAME [flags] Examples cdsctl rbac import file.yml Options  --force Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental rbac\t- CDS Experimental rbac commands  "
},
{
	"uri": "/docs/components/cdsctl/pipeline/import/",
	"title": "import",
	"tags": [],
	"description": "",
	"content": "cdsctl pipeline import Import CDS pipeline\nSynopsis PATH: Path or URL of pipeline to import\nWithout \u0026ndash;force, CDS won\u0026rsquo;t update an existing pipeline. With \u0026ndash;force, CDS will allow you to update an existing pipeline. If this pipeline is managed \u0026lsquo;as-code\u0026rsquo;, CDS will override it. This pipeline will be detached from the repository, until it is re-imported again following a commit on the repo.\ncdsctl pipeline import [ PROJECT-KEY ] PATH [flags] Options  --force Use force flag to update your pipeline Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl pipeline\t- Manage CDS pipeline  "
},
{
	"uri": "/docs/components/cdsctl/project/integration/import/",
	"title": "import",
	"tags": [],
	"description": "",
	"content": "cdsctl project integration import Import a integration configuration on a project from a yaml file\nSynopsis Import a integration configuration on a project from a yaml file\ncdsctl project integration import [ PROJECT-KEY ] FILENAME [flags] Examples cdsctl project integration import MY-PROJECT file.yml Options  --force Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl project integration\t- Manage CDS integrations  "
},
{
	"uri": "/docs/components/cdsctl/project/vcs/import/",
	"title": "import",
	"tags": [],
	"description": "",
	"content": "cdsctl project vcs import Import a VCS configuration on a project from a yaml file\nSynopsis Import a VCS configuration on a project from a yaml file\ncdsctl project vcs import [ PROJECT-KEY ] FILENAME [flags] Examples cdsctl project vcs import MY-PROJECT file.yml Options  --force Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl project vcs\t- Manage VCS on a CDS project  "
},
{
	"uri": "/docs/components/cdsctl/user/gpg/import/",
	"title": "import",
	"tags": [],
	"description": "",
	"content": "cdsctl user gpg import Import a CDS user gpg key\nSynopsis Import a CDS user gpg key\ncdsctl user gpg import [flags] Options  -k, --pub-key-file string Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl user gpg\t- Manage CDS user gpg keys  "
},
{
	"uri": "/docs/components/cdsctl/worker/model/import/",
	"title": "import",
	"tags": [],
	"description": "",
	"content": "cdsctl worker model import Synopsis Available model type :\n Docker images (\u0026ldquo;docker\u0026rdquo;) Openstack image (\u0026ldquo;openstack\u0026rdquo;) VSphere image (\u0026ldquo;vsphere\u0026rdquo;)  For admin:\n For each type of model you have to indicate the main worker command to run your workflow (example: worker) For Openstack and VSphere model you can indicate a precmd and postcmd that will execute before and after the main worker command  cdsctl worker model import PATH ... [flags] Examples cdsctl worker model import my_worker_model_file.yml https://mydomain.com/myworkermodel.yml Options  --force Use force flag to update your worker model Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl worker model\t- Manage Worker Model  "
},
{
	"uri": "/docs/components/cdsctl/workflow/import/",
	"title": "import",
	"tags": [],
	"description": "",
	"content": "cdsctl workflow import Import a workflow\nSynopsis In case you want to import just your workflow. Instead of use a local file you can also use an URL to your yaml file.\nIf you want to update also dependencies likes pipelines, applications or environments at same time you have to use workflow push instead workflow import.\nWithout \u0026ndash;force, CDS won\u0026rsquo;t update an existing workflow. With \u0026ndash;force, CDS will allow you to update an existing workflow. If this workflow is managed \u0026lsquo;as-code\u0026rsquo;, CDS will override it. This workflow and its components (applications, pipelines, environments) will be detached from the repository, until it is re-imported again following a commit on the repo.\ncdsctl workflow import [ PROJECT-KEY ] PATH [flags] Options  --force Override workflow if exists Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl workflow\t- Manage CDS workflow  "
},
{
	"uri": "/docs/components/cdsctl/experimental/workflow/info/",
	"title": "info",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental workflow info List run informations\nSynopsis List run informations\ncdsctl experimental workflow info PROJ_KEY RUN_IDENTIFIER [flags] Examples cdsctl experimental workflow info \u0026lt;proj_key\u0026gt; \u0026lt;run_identifier\u0026gt; Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl experimental workflow\t- CDS Experimental workflow commands  "
},
{
	"uri": "/docs/components/cdsctl/experimental/workflow/jobs/info/",
	"title": "info",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental workflow jobs info Get the workflow run job infos\nSynopsis Get the workflow run job infos\ncdsctl experimental workflow jobs info PROJ_KEY RUN_IDENTIFIER JOB_IDENTIFIER [flags] Examples cdsctl experimental workflow run jobs info \u0026lt;proj_key\u0026gt; \u0026lt;run_identifier\u0026gt; \u0026lt;job_identifier\u0026gt; Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl experimental workflow jobs\t- CDS Experimental workflow job commands  "
},
{
	"uri": "/docs/components/cdsctl/workflow/init/",
	"title": "init",
	"tags": [],
	"description": "",
	"content": "cdsctl workflow init Init a workflow\nSynopsis Initialize a workflow from your current repository, this will read or create yml files and push them to CDS.\nDocumentation: https://ovh.github.io/cds/docs/tutorials/init_workflow_with_cdsctl/\ncdsctl workflow init [PROJECT-KEY] [flags] Options  --application string (Optional) Set the application name. If empty, it will deduce application name from the repository. --pipeline string (Optional) Set the root pipeline you want to use. If empty it will propose you to reuse of create a pipeline. --repository-fullname string (Optional) Set the repository fullname defined in repository manager --repository-pgp-key string Set the repository pgp key you want to use --repository-ssh-key string Set the repository access key you want to use --repository-url string (Optional) Set the repository remote URL. Default is the fetch URL --workflow string (Optional) Set the workflow name. If empty, it will deduce workflow name from the repository. -y, --yes Automatic yes to prompts. Assume \u0026quot;yes\u0026quot; as answer to all prompts and run non-interactively. Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl workflow\t- Manage CDS workflow  "
},
{
	"uri": "/docs/components/engine/config/init-token/",
	"title": "init-token",
	"tags": [],
	"description": "",
	"content": "engine config init-token Generate/Regenerate an init token for a given CDS configuration file\nSynopsis $ engine config init-token\nengine config init-token [flags] Options  --config string config file --remote-config string (optional) consul configuration store --remote-config-key string (optional) consul configuration store key (default \u0026quot;cds/config.api.toml\u0026quot;) --vault-addr string (optional) Vault address to fetch secrets from vault (example: https://vault.mydomain.net:8200) --vault-token string (optional) Vault token to fetch secrets from vault SEE ALSO  engine config\t- Manage CDS Configuration  "
},
{
	"uri": "/docs/components/worker/key/install/",
	"title": "install",
	"tags": [],
	"description": "",
	"content": "worker key install worker key install [--env-git] [--env] [--file destination-file] \u0026lt;key-name\u0026gt;\nSynopsis Inside a step script you can install a SSH/PGP key generated in CDS in your ssh environment and return the PKEY variable (only for SSH)\nSo if you want to update your PKEY variable, which is the variable with the path to the SSH private key you just can write PKEY=$(worker key install proj-mykey)` (only for SSH)\nYou can use the --env flag to export the PKEY variable:\n$ eval $(worker key install --env proj-mykey) echo $PKEY # variable $PKEY will contains the path of the SSH private key You can use the --file flag to write the private key to a specific path\n$ worker key install --file .ssh/id_rsa proj-mykey For most advanced usage with git and SSH, you can run eval $(worker key install --env-git proj-mykey).\nThe --env-git flag will display:\n$ worker key install --env-git proj-mykey echo \u0026quot;ssh -i /tmp/5/0/2569/655/bd925028e70aea34/cds.key.proj-mykey.priv -o StrictHostKeyChecking=no \\$@\u0026quot; \u0026gt; /tmp/5/0/2569/655/bd925028e70aea34/cds.key.proj-mykey.priv.gitssh.sh; chmod +x /tmp/5/0/2569/655/bd925028e70aea34/cds.key.proj-mykey.priv.gitssh.sh; export GIT_SSH=\u0026quot;/tmp/5/0/2569/655/bd925028e70aea34/cds.key.proj-mykey.priv.gitssh.sh\u0026quot;; export PKEY=\u0026quot;/tmp/5/0/2569/655/bd925028e70aea34/cds.key.proj-mykey.priv\u0026quot;; So that, you can use custom git commands the previous installed SSH key.\nworker key install [flags] Examples worker key install proj-test Options  --env display shell command for export $PKEY variable. See documentation. --env-git display shell command for advanced usage with git. See documentation. --file string write key to destination file. See documentation. SEE ALSO  worker key\t-  "
},
{
	"uri": "/docs/components/cdsctl/template/instances/",
	"title": "instances",
	"tags": [],
	"description": "",
	"content": "cdsctl template instances Get instances for a CDS workflow template\nSynopsis Get instances for a CDS workflow template\ncdsctl template instances [TEMPLATE-PATH] [flags] Examples cdsctl template instances group-name/template-slug Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl template\t- Manage CDS workflow template cdsctl template instances export\t- Get instances for a CDS workflow template as yaml file  "
},
{
	"uri": "/development/rest/integration/",
	"title": "integration",
	"tags": [],
	"description": "",
	"content": "GET /integration/models/\u0026lt;name\u0026gt;    URL /integration/models/\u0026lt;name\u0026gt;     Method GET   Permissions Auth: true   Code getIntegrationModelHandler    GET /integration/models    URL /integration/models     Method GET   Permissions Auth: true   Code getIntegrationModelsHandler    "
},
{
	"uri": "/docs/components/cdsctl/project/integration/",
	"title": "integration",
	"tags": [],
	"description": "",
	"content": "cdsctl project integration Manage CDS integrations\nSynopsis Manage CDS integrations\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl project\t- Manage CDS project cdsctl project integration delete\t- Delete a integration configuration on a project cdsctl project integration export\t- Export a integration configuration from a project to stdout cdsctl project integration import\t- Import a integration configuration on a project from a yaml file cdsctl project integration list\t- List integrations available on a project cdsctl project integration worker-hooks-export\t- Export integration worker hook configuration cdsctl project integration worker-hooks-import\t- Import integration worker hook configuration  "
},
{
	"uri": "/docs/components/cdsctl/admin/integration-model/",
	"title": "integration-model",
	"tags": [],
	"description": "",
	"content": "cdsctl admin integration-model Manage CDS Integration models\nSynopsis Manage CDS Integration models\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin\t- Manage CDS (admin only) cdsctl admin integration-model delete\t- Delete a CDS Integration model cdsctl admin integration-model export\t- Export a CDS Integration model cdsctl admin integration-model import\t- Import a CDS Integration model from a yaml file cdsctl admin integration-model list\t- List CDS Integration models cdsctl admin integration-model show\t- Show details of a CDS Integration model  "
},
{
	"uri": "/docs/components/cdsctl/queue/interactive/",
	"title": "interactive",
	"tags": [],
	"description": "",
	"content": "cdsctl queue interactive Show the current queue\nSynopsis Show the current queue\ncdsctl queue interactive Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl queue\t- CDS Queue  "
},
{
	"uri": "/docs/components/cdsctl/admin/cdn/item/",
	"title": "item",
	"tags": [],
	"description": "",
	"content": "cdsctl admin cdn item Manage CDS CDN Items\nSynopsis Manage CDS CDN Items\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin cdn\t- Manage CDS CDN uService cdsctl admin cdn item projectsize\t- Size used in octets by a project  "
},
{
	"uri": "/docs/components/cdsctl/experimental/project/variableset/item/",
	"title": "item",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental project variableset item Manage item on a CDS project Variable Set\nSynopsis Manage item on a CDS project Variable Set\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental project variableset\t- Manage Variable Set on a CDS project cdsctl experimental project variableset item add\t- Create a new item inside a variable set cdsctl experimental project variableset item delete\t- Delete an item from a variable set cdsctl experimental project variableset item list\t- List the items of the given Variable Set cdsctl experimental project variableset item show\t- Get the given variable set item cdsctl experimental project variableset item update\t- Update an item inside a variable set  "
},
{
	"uri": "/docs/components/cdsctl/experimental/workflow/jobs/",
	"title": "jobs",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental workflow jobs CDS Experimental workflow job commands\nSynopsis CDS Experimental workflow job commands\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental workflow\t- CDS Experimental workflow commands cdsctl experimental workflow jobs info\t- Get the workflow run job infos cdsctl experimental workflow jobs run\t- Start a job cdsctl experimental workflow jobs show\t- Get the workflow run job status cdsctl experimental workflow jobs status\t- Get the workflow run jobs status cdsctl experimental workflow jobs stop\t- Stop the workflow run job  "
},
{
	"uri": "/docs/actions/builtin-junit/",
	"title": "JUnit",
	"tags": [],
	"description": "",
	"content": "JUnit is a builtin action, you can\u0026rsquo;t modify it.\nThis action parses a given Junit formatted XML file to extract its test results.\nParameters  path: Path to junit xml file.  Requirements No Requirement\nYAML example Example of a pipeline using JUnit action:\nversion: v1.0 name: Pipeline1 stages: - Stage1 jobs: - job: Job1 stage: Stage1 steps: - jUnitReport: \u0026#39;{{.cds.workspace}}/report.xml\u0026#39; Example  Job Configuration.   Launch pipeline, check XUnit Result   And view details:  "
},
{
	"uri": "/docs/actions/junit/",
	"title": "junit",
	"tags": [],
	"description": "",
	"content": "Parse a junit report, create a run result of type test\nParameters  path: File path to the junit report  "
},
{
	"uri": "/docs/components/worker/junit-parser/",
	"title": "junit-parser",
	"tags": [],
	"description": "",
	"content": "worker junit-parser worker junit-parser\nSynopsis worker junit-parser command helps you to parse junit files and print a summary.\nIt displays the number of tests, the number of passed tests, the number of failed tests and the number of skipped tests.\nExamples: $ ls result1.xml\tresult2.xml $ worker junit-parser result1.xml 10 10 0 0 $ worker junit-parser *.xml 20 20 0 0\nworker junit-parser SEE ALSO  worker\t- CDS Worker  "
},
{
	"uri": "/docs/integrations/kafka/",
	"title": "Kafka",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/docs/integrations/kafka/kafka_events/",
	"title": "Kafka CDS Events",
	"tags": [],
	"description": "",
	"content": "The Kafka Integration is a Self-Service integration that can be configured on a CDS Project. If you are a CDS Administrator, you can configure this integration to be available on all CDS Projects.\nAn example of use case could be that you want to generate some svg badge. Then you can just add an event integration for your workflow and plug the badge microservice on this kafka topic.\nNotice that Kafka communication is done using SASL and TLS enable only.\nConfigure with WebUI You can add a Kafka Integration on your CDS Project.\nConfigure with cdsctl Import a Kafka Integration on your CDS Project Create a file project-configuration.yml:\nname: your-kafka-integration model: name: Kafka identifier: github.com/ovh/cds/integration/builtin/kafka event: true config: broker url: value: n1.o1.your-broker:9093,n2.o1.n1.o1.your-broker:9093,n3.o1.n1.o1.your-broker:9093 type: string password: value: \u0026#34;**********\u0026#34; type: password username: value: kafka-username type: string topic: value: your-topic type: string version: value: \u0026#34;2.1.1\u0026#34; type: string Import the integration on your CDS Project with:\ncdsctl project integration import PROJECT_KEY project-configuration.yml Then, as a standard user, you can use your kafka integration for workflow notifications.\nOne Integration, two use case You can use an integration kafka for two use cases: Event and Hooks. Example of file public-configuration.yml:\nname: your-kafka-integration event: true hook: true public: true SASL / TLS For testing purpose only, you can disable TLS / SASL with the disableTLS and disableSASL attributes.\nExample of Public Integration with TLS and SASL disabled:\nname: myPublicKafkaIntegration event: true public: true public_configurations: myPublicKafkaIntegration: \u0026#34;broker url\u0026#34;: type: string value: \u0026#34;localhost:9092\u0026#34; \u0026#34;topic\u0026#34;: type: string value: \u0026#34;test.eventspublic\u0026#34; \u0026#34;disableTLS\u0026#34;: type: string value: \u0026#34;true\u0026#34; \u0026#34;disableSASL\u0026#34;: type: string value: \u0026#34;true\u0026#34; version: value: \u0026#34;2.1.1\u0026#34; type: string Kafka Version If the attribute version could be not defined, default value is 0.10.0.1\n"
},
{
	"uri": "/docs/integrations/kafka/kafka_hooks/",
	"title": "Kafka Hooks",
	"tags": [],
	"description": "",
	"content": "The Kafka Integration is a Self-Service integration that can be configured on a CDS Project. If you are a CDS Administrator, you can configure this integration to be available on all CDS Projects.\nThis integration enables the Kafka Hook feature.\nNotice that Kafka communication is done using SASL and TLS enable only.\nConfigure with WebUI You can add a Kafka Integration on your CDS Project.\nConfigure with cdsctl Import a Kafka Integration on your CDS Project Create a file project-configuration.yml:\nname: your-kafka-integration model: name: Kafka identifier: github.com/ovh/cds/integration/builtin/kafka hook: true config: broker url: value: n1.o1.your-broker:9093,n2.o1.n1.o1.your-broker:9093,n3.o1.n1.o1.your-broker:9093 type: string password: value: \u0026#39;**********\u0026#39; type: password username: value: kafka-username type: string version: value: \u0026#34;2.1.1\u0026#34; type: string Import the integration on your CDS Project with:\ncdsctl project integration import PROJECT_KEY project-configuration.yml Then, as a standard user, you can add a Kafka Hook on your workflow.\nCreate a Public Kafka Integration for whole CDS Projects You can also add a Kafka Integration with cdsctl. As a CDS Administrator, this allows you to propose a Public Kafka Integration, available on all CDS Projects.\nCreate a file public-configuration.yml:\nname: your-kafka-integration hook: true public: true public_configurations: name-of-integration: \u0026#34;broker url\u0026#34;: type: string value: \u0026#34;n1.o1.your-broker:9093,n2.o1.n1.o1.your-broker:9093,n3.o1.n1.o1.your-broker:9093\u0026#34; \u0026#34;topic\u0026#34;: type: string value: \u0026#34;your-topic.events\u0026#34; \u0026#34;username\u0026#34;: type: string value: \u0026#34;your-topic.cds-reader\u0026#34; \u0026#34;password\u0026#34;: type: password value: xxxxxxxx \u0026#34;version\u0026#34;: value: \u0026#34;2.1.1\u0026#34; type: string Import the integration with :\ncdsctl admin integration-model import public-configuration.yml Then, as a standard user, you can add a Kafka Hook on your workflow.\nOne Integration, two use case You can use an integration kafka for two use cases: Event and Hooks. Example of file public-configuration.yml:\nname: your-kafka-integration event: true hook: true public: true ... Version If the attribute version could be not defined, default value is 0.10.0.1\n"
},
{
	"uri": "/docs/components/worker/key/",
	"title": "key",
	"tags": [],
	"description": "",
	"content": "worker key Synopsis Inside a step script you can install/uninstall a ssh key generated in CDS in your ssh environment\nSEE ALSO  worker\t- CDS Worker worker key install\t- worker key install [--env-git] [--env] [--file destination-file] \u0026lt;key-name\u0026gt;  "
},
{
	"uri": "/docs/components/cdsctl/application/keys/",
	"title": "keys",
	"tags": [],
	"description": "",
	"content": "cdsctl application keys Manage CDS application keys\nSynopsis Manage CDS application keys\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl application\t- Manage CDS application cdsctl application keys add\t- Add a new key on application. key type can be ssh or pgp cdsctl application keys delete\t- Delete CDS an application key cdsctl application keys list\t- List CDS application keys  "
},
{
	"uri": "/docs/components/cdsctl/environment/keys/",
	"title": "keys",
	"tags": [],
	"description": "",
	"content": "cdsctl environment keys Manage CDS environment keys\nSynopsis Manage CDS environment keys\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl environment\t- Manage CDS environment cdsctl environment keys add\t- Add a new key on environment. key-type can be ssh or pgp cdsctl environment keys delete\t- Delete CDS environment key cdsctl environment keys list\t- List CDS environment keys  "
},
{
	"uri": "/docs/components/cdsctl/project/keys/",
	"title": "keys",
	"tags": [],
	"description": "",
	"content": "cdsctl project keys Manage CDS project keys\nSynopsis Manage CDS project keys\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl project\t- Manage CDS project cdsctl project keys add\t- Add a new key on project. key-type can be ssh or pgp cdsctl project keys delete\t- Delete CDS project key cdsctl project keys disable\t- Disable CDS project key cdsctl project keys enable\t- Enable CDS project key cdsctl project keys list\t- List CDS project keys  "
},
{
	"uri": "/docs/integrations/kubernetes/",
	"title": "Kubernetes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/docs/integrations/kubernetes/kubernetes_compute/",
	"title": "Kubernetes Compute",
	"tags": [],
	"description": "",
	"content": "The Kubernetes integration have to be configured by CDS administrator.\nThis integration allows you to run the Kubernetes Hatchery to start CDS Workers.\nAs an end-users, this integration allows:\n to use Worker Models of type \u0026ldquo;Docker\u0026rdquo; to use Service Prerequisite on your CDS Jobs.  Start Kubernetes hatchery Generate a token:\n$ cdsctl consumer new me \\ --scopes=Hatchery,RunExecution,Service,WorkerModel \\ --name=\u0026#34;hatchery.kubernetes\u0026#34; \\ --description=\u0026#34;Consumer token for kubernetes hatchery\u0026#34; \\ --groups=\u0026#34;\u0026#34; \\ --no-interactive Builtin consumer successfully created, use the following token to sign in: xxxxxxxx.xxxxxxx.4Bd9XJMIWrfe8Lwb-Au68TKUqflPorY2Fmcuw5vIoUs5gQyCLuxxxxxxxxxxxxxx Edit the section hatchery.kubernetes in the CDS Configuration file. The token have to be set on the key hatchery.kubernetes.commonConfiguration.api.http.token.\nThen start hatchery:\nengine start hatchery:kubernetes --config config.toml This hatchery will spawn Pods on Kubernetes in the default namespace or the specified namespace in your config.toml. Each pods is a CDS Worker, using the Worker Model of type \u0026lsquo;docker\u0026rsquo;.\n"
},
{
	"uri": "/docs/integrations/kubernetes/kubernetes_deployment/",
	"title": "Kubernetes Deployment",
	"tags": [],
	"description": "",
	"content": "The Kubernetes Deployment Integration is a Self-Service integration that can be configured on a CDS Project.\nThis integration enables the DeployApplication action\nCreate Integration Model Create a file kubernetes-model-configuration.yml:\nname: Kubernetes default_config: api_url: type: string ca_certificate: type: text description: Certificate Authority bundle (PEM format) token: type: password deployment: true deployment_default_config: timeout: type: string value: 180 description: timeout in seconds for v2 or duration for v3 (ex: 3m) namespace: type: string value: default description: Kubernetes namespace in which you want to deploy your components (OPTIONAL) deployment_files: type: string description: Glob to yaml filepaths helm_chart: type: string description: \u0026#34;Keep empty if you don\u0026#39;t use helm. Indicate a chart reference by chart reference himself (stable/mariadb), absolute URL (https://example.com/charts/nginx-1.2.3.tgz), path to a packaged chart (./nginx-1.2.3.tgz), path to an unpacked chart directory (./nginx) or even by your chart reference and repo URL (https://example.com/charts/ nginx).\u0026#34; helm_values: type: string description: specify helm values in a YAML file or a URL to configure/override your helm chart helm_version: type: string description: specify helm version to use (default: v2.12.2) Import the integration with :\ncdsctl admin integration-model import kubernetes-model-configuration.yml Import Kubernetes Plugin The goal of this integration is to use the DeployApplication action in a Job. This action use a dedicated plugin for each integration, you need to import the plugin-kubernetes.\nYou will find on CDS Release the plugin-kubernetes with associated yml file.\nHow to import the linux/amd64 version:\n# download plugin-kubernetes-deployment.yml file # download plugin-kubernetes-deployment-linux-amd64.yml file # download plugin-kubernetes-deployment-linux-amd64 file $ cdsctl admin plugins import plugin-kubernetes-deployment.yml $ cdsctl admin plugins binary-add plugin-kubernetes-deployment plugin-kubernetes-deployment-linux-amd64.yml plugin-kubernetes-deployment-linux-amd64 If you can build and publish all os/arch:\n$ cd $GOHOME/src/github.com/ovh $ git clone git@github.com:ovh/cds.git $ cd contrib/integrations/kubernetes/plugin-kubernetes # make build will compile the plugin in all os and arch # all binaries are under the dist/ directory $ make build # make publish create a yml file for each os/arch # then call cdsctl to upload the plugin on your CDS Instance $ make publish Configure with WebUI You can add a Kubernetes Integration on your CDS Project.\nImport a Kubernetes Integration on your CDS Project Create a file project-configuration.yml:\nname: myk8s model: name: Kubernetes deployment: true default_config: api_url: value: \u0026#34;\u0026#34; type: string ca_certificate: value: \u0026#34;\u0026#34; type: text description: Certificate Authority bundle (PEM format) token: value: \u0026#34;\u0026#34; type: password deployment_default_config: deployment_files: value: \u0026#34;\u0026#34; type: string description: Glob to yaml filepaths helm_chart: value: \u0026#34;\u0026#34; type: string description: Keep empty if you don\u0026#39;t use helm. Indicate a chart reference by chart reference himself (stable/mariadb), absolute URL (https://example.com/charts/nginx-1.2.3.tgz), path to a packaged chart (./nginx-1.2.3.tgz), path to an unpacked chart directory (./nginx) or even by your chart reference and repo URL (https://example.com/charts/ nginx). helm_values: value: \u0026#34;\u0026#34; type: string description: specify helm values in a YAML file or a URL to configure/override your helm chart helm_version: value: \u0026#34;\u0026#34; type: string description: specify helm version to use (default: v2.12.2) namespace: value: default type: string description: Kubernetes namespace in which you want to deploy your components (OPTIONAL) timeout: value: \u0026#34;180\u0026#34; type: string description: timeout in seconds config: api_url: value: https://your-k8s.localhost.local type: string ca_certificate: value: |------BEGIN CERTIFICATE----- XXX -----END CERTIFICATE----- type: text description: Certificate Authority bundle (PEM format) token: value: XXX type: string Import the integration on your CDS Project with:\ncdsctl project integration import PROJECT_KEY project-configuration.yml Create a Public Kubernetes Integration for whole CDS Projects You can also add a Kubernetes Integration with cdsctl. As a CDS Administrator, this allows you to propose a Public Kubernetes Integration, available on all CDS Projects.\nCreate a file public-configuration.yml:\nname: Kubernetes-Public hook: true deployment: true deployment_default_config: deployment_files: value: \u0026#34;\u0026#34; type: string description: Glob to yaml filepaths helm_chart: value: \u0026#34;\u0026#34; type: string description: Keep empty if you don\u0026#39;t use helm. Indicate a chart reference by chart reference himself (stable/mariadb), absolute URL (https://example.com/charts/nginx-1.2.3.tgz), path to a packaged chart (./nginx-1.2.3.tgz), path to an unpacked chart directory (./nginx) or even by your chart reference and repo URL (https://example.com/charts/ nginx). helm_values: value: \u0026#34;\u0026#34; type: string description: specify helm values in a YAML file or a URL to configure/override your helm chart helm_version: value: \u0026#34;\u0026#34; type: string description: specify helm version to use (default: v2.12.2) namespace: value: default type: string description: Kubernetes namespace in which you want to deploy your components (OPTIONAL) timeout: value: \u0026#34;180\u0026#34; type: string description: timeout in seconds public_configurations: your-public-myk8s-integration: \u0026#34;api_url\u0026#34;: value: https://your-k8s.localhost.local type: string \u0026#34;ca_certificate\u0026#34;: value: |------BEGIN CERTIFICATE----- XXX -----END CERTIFICATE----- type: text description: Certificate Authority bundle (PEM format) \u0026#34;token\u0026#34;: value: XXX type: string Import the integration with :\ncdsctl admin integration-model import public-configuration.yml Use DeployApplication Action Add the deployment configuration on your application.\nParameters deployment_files, helm_chart and helm_values contain path of the files in your CDS Job.\ncontrib/helm/cds/ is the same as {{.cds.workspace}}/contrib/helm/cds/\nThen, as a standard user, you can use the DeployApplication action in a Job. Before using this action, you probably want to use CheckoutApplication to git clone the kubernetes or helm files from your git repository.\n"
},
{
	"uri": "/docs/components/cdsctl/workflow/label/",
	"title": "label",
	"tags": [],
	"description": "",
	"content": "cdsctl workflow label Manage Workflow Label\nSynopsis Manage Workflow Label\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl workflow\t- Manage CDS workflow cdsctl workflow label add\t- Add label on one workflow cdsctl workflow label delete\t- Delete label from one workflow cdsctl workflow label list\t- List labels of one workflow  "
},
{
	"uri": "/docs/integrations/ldap/",
	"title": "LDAP Authentication",
	"tags": [],
	"description": "",
	"content": "The LDAP Integration have to be configured on your CDS by a CDS Administrator.\nThis integration allows you to authenticate users.\nHow to configure LDAP Authentication integration Edit the toml file:\n section [api.auth.ldap]  enable the signin with enabled = true if you want to disable signup, set signupDisabled = true    [api.auth.ldap] enabled = false host = \u0026#34;\u0026#34; # Define it if ldapsearch need to be authenticated managerDN = \u0026#34;cn=admin,dc=myorganization,dc=com\u0026#34; # Define it if ldapsearch need to be authenticated managerPassword = \u0026#34;SECRET_PASSWORD_MANAGER\u0026#34; port = 636 rootDN = \u0026#34;dc=myorganization,dc=com\u0026#34; signupDisabled = false ssl = true userFullname = \u0026#34;{{.givenName}} {{.sn}}\u0026#34; userSearch = \u0026#34;uid={0}\u0026#34; userSearchBase = \u0026#34;ou=people\u0026#34; "
},
{
	"uri": "/development/rest/link/",
	"title": "link",
	"tags": [],
	"description": "",
	"content": "GET /link/driver    URL /link/driver     Method GET   Permissions Auth: true   Code getLinkDriversHandler    POST /link/\u0026lt;consumer-type\u0026gt;/ask    URL /link/\u0026lt;consumer-type\u0026gt;/ask     Method POST   Permissions Auth: true   Scopes User   Code postAskLinkExternalUserWithCDSHandler    POST /link/\u0026lt;consumer-type\u0026gt;    URL /link/\u0026lt;consumer-type\u0026gt;     Method POST   Permissions Auth: true   Scopes User   Code postLinkExternalUserWithCDSHandler    "
},
{
	"uri": "/docs/components/cdsctl/experimental/workflow/lint/",
	"title": "lint",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental workflow lint Lint workflow files\nSynopsis Lint workflow files\ncdsctl experimental workflow lint CDS_WORKFLOW_DIRECTORY Examples cdsctl experimental workflow lint .cds/workflows Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental workflow\t- CDS Experimental workflow commands  "
},
{
	"uri": "/docs/components/cdsctl/action/builtin/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl action builtin list List CDS builtin actions\nSynopsis List CDS builtin actions\ncdsctl action builtin list [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl action builtin\t- Manage CDS builtin action  "
},
{
	"uri": "/docs/components/cdsctl/action/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl action list List CDS actions\nSynopsis List CDS actions\ncdsctl action list [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl action\t- Manage CDS action  "
},
{
	"uri": "/docs/components/cdsctl/admin/cdn/unit/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl admin cdn unit list list storage unit\nSynopsis list storage unit\ncdsctl admin cdn unit list [flags] Examples cdsctl admin cdn unit list Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl admin cdn unit\t- Manage CDS CDN unit  "
},
{
	"uri": "/docs/components/cdsctl/admin/database/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl admin database list List all CDS DB migrations\nSynopsis List all CDS DB migrations\ncdsctl admin database list SERVICE [flags] Examples  $ cdsctl admin database list api $ cdsctl admin database list cdn Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl admin database\t- Manage CDS Database  "
},
{
	"uri": "/docs/components/cdsctl/admin/features/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl admin features list List all the features\nSynopsis List all the features\ncdsctl admin features list [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl admin features\t- Manage CDS feature flipping rules  "
},
{
	"uri": "/docs/components/cdsctl/admin/hooks/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl admin hooks list List CDS Hooks Tasks\nSynopsis List CDS Hooks Tasks\ncdsctl admin hooks list [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --sort string Sort task by nb_executions_total,nb_executions_todo --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl admin hooks\t- Manage CDS Hooks tasks  "
},
{
	"uri": "/docs/components/cdsctl/admin/hooks/repository/event/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl admin hooks repository event list List repository events\nSynopsis List repository events\ncdsctl admin hooks repository event list VCS-SERVER REPOSITORY [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl admin hooks repository event\t- Manage repositories events  "
},
{
	"uri": "/docs/components/cdsctl/admin/hooks/repository/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl admin hooks repository list List repositories\nSynopsis List repositories\ncdsctl admin hooks repository list [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) --pattern string Filter on repository name -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl admin hooks repository\t- Manage repositories where there were events  "
},
{
	"uri": "/docs/components/cdsctl/admin/integration-model/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl admin integration-model list List CDS Integration models\nSynopsis List CDS Integration models\ncdsctl admin integration-model list [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl admin integration-model\t- Manage CDS Integration models  "
},
{
	"uri": "/docs/components/cdsctl/admin/migration/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl admin migration list List all CDS migrations and their states\nSynopsis List all CDS migrations and their states\ncdsctl admin migration list [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl admin migration\t- Manage CDS Migrations  "
},
{
	"uri": "/docs/components/cdsctl/admin/organization/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl admin organization list List all organizations\nSynopsis List all organizations\ncdsctl admin organization list [flags] Examples cdsctl admin organization list Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl admin organization\t- Manage CDS Organization  "
},
{
	"uri": "/docs/components/cdsctl/admin/plugins/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl admin plugins list List CDS Plugins\nSynopsis List CDS Plugins\ncdsctl admin plugins list [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl admin plugins\t- Manage CDS Plugins  "
},
{
	"uri": "/docs/components/cdsctl/admin/services/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl admin services list List CDS services\nSynopsis List CDS services\ncdsctl admin services list [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key -t, --type string Filter service by type: api, hatchery, hook, repository, vcs --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl admin services\t- Manage CDS services  "
},
{
	"uri": "/docs/components/cdsctl/application/keys/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl application keys list List CDS application keys\nSynopsis List CDS application keys\ncdsctl application keys list [ PROJECT-KEY APPLICATION-NAME ] [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl application keys\t- Manage CDS application keys  "
},
{
	"uri": "/docs/components/cdsctl/application/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl application list List CDS applications\nSynopsis List CDS applications\ncdsctl application list [ PROJECT-KEY ] [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl application\t- Manage CDS application  "
},
{
	"uri": "/docs/components/cdsctl/application/variable/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl application variable list List CDS application variables\nSynopsis List CDS application variables\ncdsctl application variable list [ PROJECT-KEY APPLICATION-NAME ] [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl application variable\t- Manage CDS application variables  "
},
{
	"uri": "/docs/components/cdsctl/consumer/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl consumer list List your auth consumers for given user\nSynopsis List your auth consumers for given user\ncdsctl consumer list [USERNAME] [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -g, --group strings filter by group -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl consumer\t- Manage CDS auth consumers  "
},
{
	"uri": "/docs/components/cdsctl/context/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl context list List cdsctl contexts\nSynopsis List cdsctl contexts\ncdsctl context list [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl context\t- Manage cdsctl config file  "
},
{
	"uri": "/docs/components/cdsctl/encrypt/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl encrypt list List all the encrypted variable of your CDS project\nSynopsis List all the encrypted variable of your CDS project\ncdsctl encrypt list [ PROJECT-KEY ] [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl encrypt\t- Encrypt variable into your CDS project  "
},
{
	"uri": "/docs/components/cdsctl/environment/keys/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl environment keys list List CDS environment keys\nSynopsis List CDS environment keys\ncdsctl environment keys list [ PROJECT-KEY ] ENV-NAME [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl environment keys\t- Manage CDS environment keys  "
},
{
	"uri": "/docs/components/cdsctl/environment/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl environment list List CDS environments\nSynopsis List CDS environments\ncdsctl environment list [ PROJECT-KEY ] [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl environment\t- Manage CDS environment  "
},
{
	"uri": "/docs/components/cdsctl/environment/variable/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl environment variable list List CDS environment variables\nSynopsis List CDS environment variables\ncdsctl environment variable list [ PROJECT-KEY ] ENV-NAME [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl environment variable\t- Manage CDS environment variables  "
},
{
	"uri": "/docs/components/cdsctl/experimental/hatchery/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental hatchery list List all hatcheries\nSynopsis List all hatcheries\ncdsctl experimental hatchery list [flags] Examples cdsctl hatchery list Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl experimental hatchery\t- CDS Experimental hatchery commands  "
},
{
	"uri": "/docs/components/cdsctl/experimental/organization/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental organization list List all organizations\nSynopsis List all organizations\ncdsctl experimental organization list [flags] Examples cdsctl organization list Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl experimental organization\t- CDS Experimental organization commands  "
},
{
	"uri": "/docs/components/cdsctl/experimental/project/analysis/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental project analysis list List all repository analysis\nSynopsis List all repository analysis\ncdsctl experimental project analysis list [ PROJECT-KEY ] VCS-NAME REPOSITORY-NAME [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl experimental project analysis\t- Manage repository analysis  "
},
{
	"uri": "/docs/components/cdsctl/experimental/project/notification/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental project notification list List available notifications on a project\nSynopsis List available notifications on a project\ncdsctl experimental project notification list [ PROJECT-KEY ] [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl experimental project notification\t- Manage Notification on a CDS project  "
},
{
	"uri": "/docs/components/cdsctl/experimental/project/repository/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental project repository list List available repositories on a project\nSynopsis List available repositories on a project\ncdsctl experimental project repository list [ PROJECT-KEY ] [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --vcs-name string Specified a VCS by its name --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl experimental project repository\t- Manage repositories on a CDS project  "
},
{
	"uri": "/docs/components/cdsctl/experimental/project/variableset/item/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental project variableset item list List the items of the given Variable Set\nSynopsis List the items of the given Variable Set\ncdsctl experimental project variableset item list [ PROJECT-KEY ] VARIABLESET-NAME [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl experimental project variableset item\t- Manage item on a CDS project Variable Set  "
},
{
	"uri": "/docs/components/cdsctl/experimental/project/variableset/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental project variableset list List all variable sets in the given project\nSynopsis List all variable sets in the given project\ncdsctl experimental project variableset list [ PROJECT-KEY ] [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl experimental project variableset\t- Manage Variable Set on a CDS project  "
},
{
	"uri": "/docs/components/cdsctl/experimental/rbac/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental rbac list List CDS permissions\nSynopsis List CDS permissions\ncdsctl experimental rbac list [flags] Examples cdsctl rbac list Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl experimental rbac\t- CDS Experimental rbac commands  "
},
{
	"uri": "/docs/components/cdsctl/experimental/region/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental region list List all regions\nSynopsis List all regions\ncdsctl experimental region list [flags] Examples cdsctl region list Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl experimental region\t- CDS Experimental region commands  "
},
{
	"uri": "/docs/components/cdsctl/experimental/worker-model/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental worker-model list Synopsis cdsctl experimental worker-model list [ PROJECT-KEY ] VCS-NAME REPOSITORY [flags] Examples cdsctl worker-model list Options  --branch string Filter on a specific branch --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl experimental worker-model\t- CDS Experimental worker model commands  "
},
{
	"uri": "/docs/components/cdsctl/experimental/worker/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental worker list Synopsis cdsctl experimental worker list [flags] Examples cdsctl experimental worker list Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl experimental worker\t- CDS Experimental worker commands  "
},
{
	"uri": "/docs/components/cdsctl/group/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl group list List CDS groups\nSynopsis List CDS groups\ncdsctl group list [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl group\t- Manage CDS group  "
},
{
	"uri": "/docs/components/cdsctl/group/member/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl group member list List members into a group\nSynopsis List members into a group\ncdsctl group member list GROUP-NAME [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl group member\t- Manage group's member  "
},
{
	"uri": "/docs/components/cdsctl/pipeline/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl pipeline list List CDS pipelines\nSynopsis List CDS pipelines\ncdsctl pipeline list [ PROJECT-KEY ] [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl pipeline\t- Manage CDS pipeline  "
},
{
	"uri": "/docs/components/cdsctl/project/integration/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl project integration list List integrations available on a project\nSynopsis List integrations available on a project\ncdsctl project integration list [ PROJECT-KEY ] [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl project integration\t- Manage CDS integrations  "
},
{
	"uri": "/docs/components/cdsctl/project/keys/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl project keys list List CDS project keys\nSynopsis List CDS project keys\ncdsctl project keys list [ PROJECT-KEY ] [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl project keys\t- Manage CDS project keys  "
},
{
	"uri": "/docs/components/cdsctl/project/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl project list List CDS projects\nSynopsis List CDS projects\ncdsctl project list [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl project\t- Manage CDS project  "
},
{
	"uri": "/docs/components/cdsctl/project/variable/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl project variable list List CDS project variables\nSynopsis List CDS project variables\ncdsctl project variable list [ PROJECT-KEY ] [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl project variable\t- Manage CDS project variables  "
},
{
	"uri": "/docs/components/cdsctl/project/vcs/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl project vcs list List VCS available on a project\nSynopsis List VCS available on a project\ncdsctl project vcs list [ PROJECT-KEY ] [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl project vcs\t- Manage VCS on a CDS project  "
},
{
	"uri": "/docs/components/cdsctl/session/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl session list List your auth sessions for given user\nSynopsis List your auth sessions for given user\ncdsctl session list [USERNAME] [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl session\t- Manage CDS auth sessions  "
},
{
	"uri": "/docs/components/cdsctl/template/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl template list Get all available workflow template from CDS\nSynopsis Get all available workflow template from CDS\ncdsctl template list [flags] Examples cdsctl template list Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl template\t- Manage CDS workflow template  "
},
{
	"uri": "/docs/components/cdsctl/user/gpg/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl user gpg list List CDS users gpg keys\nSynopsis List CDS users gpg keys\ncdsctl user gpg list [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl user gpg\t- Manage CDS user gpg keys  "
},
{
	"uri": "/docs/components/cdsctl/user/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl user list List CDS users\nSynopsis List CDS users\ncdsctl user list [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl user\t- Manage CDS user  "
},
{
	"uri": "/docs/components/cdsctl/worker/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl worker list List CDS workers\nSynopsis List CDS workers\ncdsctl worker list [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl worker\t- Manage CDS worker  "
},
{
	"uri": "/docs/components/cdsctl/worker/model/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl worker model list List CDS worker models\nSynopsis List CDS worker models\ncdsctl worker model list [flags] Options  -b, --binary string Use this flag to filter worker model list by its binary capabilities --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key -s, --state string Use this flag to filter worker model by his state (disabled|error|register|deprecated) --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl worker model\t- Manage Worker Model  "
},
{
	"uri": "/docs/components/cdsctl/workflow/label/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl workflow label list List labels of one workflow\nSynopsis List labels of one workflow\ncdsctl workflow label list [ PROJECT-KEY WORKFLOW-NAME ] [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl workflow label\t- Manage Workflow Label  "
},
{
	"uri": "/docs/components/cdsctl/workflow/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl workflow list List CDS workflows\nSynopsis List CDS workflows\ncdsctl workflow list [ PROJECT-KEY ] [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl workflow\t- Manage CDS workflow  "
},
{
	"uri": "/docs/components/cdsctl/workflow/logs/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl workflow logs list List logs from a workflow run\nSynopsis List logs from a workflow run. There on log file for each step.\n# list all logs files from projet KEY, with workflow named WD on latest run $ cdsctl workflow logs list KEY WF # list all logs files from projet KEY, with workflow named WD on run 1 $ cdsctl workflow logs list KEY WF 1  cdsctl workflow logs list [ PROJECT-KEY WORKFLOW-NAME ] [RUN-NUMBER] Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl workflow logs\t- Manage CDS Workflow Run Logs  "
},
{
	"uri": "/docs/components/cdsctl/workflow/result/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "cdsctl workflow result list List workflow run result\nSynopsis List workflow run result\ncdsctl workflow result list [ PROJECT-KEY WORKFLOW-NAME ] RUN-NUMBER [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key -t, --type string List only result of one type --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl workflow result\t- Manage Workflow Run Result  "
},
{
	"uri": "/docs/components/cdsctl/admin/database/list-encrypted-data/",
	"title": "list-encrypted-data",
	"tags": [],
	"description": "",
	"content": "cdsctl admin database list-encrypted-data List all encrypted data in database\nSynopsis List all encrypted data in database\ncdsctl admin database list-encrypted-data SERVICE Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin database\t- Manage CDS Database  "
},
{
	"uri": "/docs/components/cdsctl/admin/database/list-signed-data/",
	"title": "list-signed-data",
	"tags": [],
	"description": "",
	"content": "cdsctl admin database list-signed-data List all signed data in database\nSynopsis List all signed data in database\ncdsctl admin database list-signed-data SERVICE [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl admin database\t- Manage CDS Database  "
},
{
	"uri": "/docs/components/cdsctl/events/listen/",
	"title": "listen",
	"tags": [],
	"description": "",
	"content": "cdsctl events listen Listen CDS events\nSynopsis Listen CDS events\ncdsctl events listen [flags] Examples  cdsctl events listen --queue cdsctl events listen --global cdsctl events listen --project MYPROJ cdsctl events listen --project MYPROJ --workflow my-workflow Options  --global listen global events --project string project key to listen --queue listen job queue events --workflow string workflow name to listen Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl events\t- Listen CDS Events  "
},
{
	"uri": "/docs/components/cdsctl/login/",
	"title": "login",
	"tags": [],
	"description": "",
	"content": "cdsctl login Login to CDS\nSynopsis For admin signup with LDAP driver, INIT_TOKEN environment variable must be set.\ncdsctl login [flags] Examples Use it with 'eval' and 'env' flag to set environment variable: eval $(cds login -H API_URL -u USERNAME -p PASSWORD --env) Options  -H, --api-url string Url to your CDS api. -d, --driver string An enabled auth driver to login with. This should be local, GitHub, GitLab, Ldap, builtin or corporate-sso --env Display the commands to set up the environment for the cds client. -p, --password string --token string A CDS token that can be used to login with a builtin auth driver. -u, --username string The identifier name needed by selected auth driver Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl\t- CDS Command line utility  "
},
{
	"uri": "/docs/components/cdsctl/experimental/workflow/logs/",
	"title": "logs",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental workflow logs CDS Experimental workflow run jobs logs commands\nSynopsis CDS Experimental workflow run jobs logs commands\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental workflow\t- CDS Experimental workflow commands cdsctl experimental workflow logs download\t- Get the workflow run job status  "
},
{
	"uri": "/docs/components/cdsctl/workflow/logs/",
	"title": "logs",
	"tags": [],
	"description": "",
	"content": "cdsctl workflow logs Manage CDS Workflow Run Logs\nSynopsis Download logs from a workflow run.\n# list all logs files on latest run $ cdsctl workflow logs list KEY WF # list all logs files on run number 1 $ cdsctl workflow logs list KEY WF 1 # download all logs files on latest run $ cdsctl workflow logs download KEY WF # download only one file, for run number 1 $ cdsctl workflow logs download KEY WF 1 --pattern=\u0026quot;MyJob\u0026quot; # this will download file WF-1.0-pipeline.myPipeline-stage.MyStage-job.MyJob-status.Success-step.0.log  Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl workflow\t- Manage CDS workflow cdsctl workflow logs download\t- Download logs from a workflow run. cdsctl workflow logs list\t- List logs from a workflow run cdsctl workflow logs stream\t- Stream logs for a job.  "
},
{
	"uri": "/docs/components/cdsctl/admin/maintenance/",
	"title": "maintenance",
	"tags": [],
	"description": "",
	"content": "cdsctl admin maintenance Manage CDS maintenance\nSynopsis Manage CDS maintenance\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin\t- Manage CDS (admin only) cdsctl admin maintenance disable\t- Disable CDS maintenance cdsctl admin maintenance enable\t- Enable CDS maintenance  "
},
{
	"uri": "/docs/components/cdsctl/admin/workflows/maxrun/",
	"title": "maxrun",
	"tags": [],
	"description": "",
	"content": "cdsctl admin workflows maxrun Update the maximum number of workflow executions\nSynopsis Update the maximum number of workflow executions\ncdsctl admin workflows maxrun PROJECTKEY WORKFLOWNAME MAXRUNS Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin workflows\t- Manage CDS workflows  "
},
{
	"uri": "/docs/components/cdsctl/user/me/",
	"title": "me",
	"tags": [],
	"description": "",
	"content": "cdsctl user me Show Current CDS user details\nSynopsis Show Current CDS user details\ncdsctl user me [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl user\t- Manage CDS user  "
},
{
	"uri": "/docs/components/cdsctl/group/member/",
	"title": "member",
	"tags": [],
	"description": "",
	"content": "cdsctl group member Manage group's member\nSynopsis Manage group's member\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl group\t- Manage CDS group cdsctl group member add\t- Add or edit a member for a group cdsctl group member delete\t- Delete a member of a group cdsctl group member list\t- List members into a group  "
},
{
	"uri": "/docs/components/cdsctl/admin/metadata/",
	"title": "metadata",
	"tags": [],
	"description": "",
	"content": "cdsctl admin metadata Manage CDS Metadata\nSynopsis Metadata a key/value stored on project / application / workflow.\nThis allows CDS administrators and/or users to make some statistics and charts in a proper tool.\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin\t- Manage CDS (admin only) cdsctl admin metadata application\t- Manage CDS Application Metadata cdsctl admin metadata project\t- Manage CDS Project Metadata cdsctl admin metadata workflow\t- Manage CDS Workflow Metadata  "
},
{
	"uri": "/docs/components/cdsctl/admin/cdn/migrate/",
	"title": "migrate",
	"tags": [],
	"description": "",
	"content": "cdsctl admin cdn migrate run migration from cds to cdn\nSynopsis run migration from cds to cdn\ncdsctl admin cdn migrate Examples cdsctl admin cdn migrate Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin cdn\t- Manage CDS CDN uService  "
},
{
	"uri": "/docs/components/cdsctl/admin/migration/",
	"title": "migration",
	"tags": [],
	"description": "",
	"content": "cdsctl admin migration Manage CDS Migrations\nSynopsis Theses commands manage CDS Migration and DO NOT concern database migrations.\nA CDS Migration is an internal routine. This helps manage a complex data migration with code included in CDS Engine. It\u0026rsquo;s totally transpartent to CDS Users \u0026amp; Administrators - but these commands can help CDS Administrators and core CDS Developers to debug something if needed.\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin\t- Manage CDS (admin only) cdsctl admin migration cancel\t- Cancel a CDS migration (USE WITH CAUTION) cdsctl admin migration list\t- List all CDS migrations and their states cdsctl admin migration reset\t- Reset a CDS migration, so basically it put the migration status to \u0026quot;TO DO\u0026quot; (USE WITH CAUTION)  "
},
{
	"uri": "/docs/components/cdsctl/worker/model/",
	"title": "model",
	"tags": [],
	"description": "",
	"content": "cdsctl worker model Manage Worker Model\nSynopsis Manage Worker Model\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl worker\t- Manage CDS worker cdsctl worker model delete\t- Delete a CDS worker model cdsctl worker model export\t- Export a worker model cdsctl worker model import\t- cdsctl worker model list\t- List CDS worker models cdsctl worker model show\t- Show a Worker Model  "
},
{
	"uri": "/development/rest/mon/",
	"title": "mon",
	"tags": [],
	"description": "",
	"content": "GET /mon/status    URL /mon/status     Method GET   Permissions Auth: true   Code authOptionalMiddleware    "
},
{
	"uri": "/docs/components/cdsctl/consumer/new/",
	"title": "new",
	"tags": [],
	"description": "",
	"content": "cdsctl consumer new Create a new auth consumer for current user\nSynopsis Create a new auth consumer for current user\ncdsctl consumer new [USERNAME] [flags] Options  --description string What is the purpose of this consumer --duration string Validity period of the token generated for the consumer (in days) --groups strings Define the list of groups for the consumer --name string What is the name of this consumer --scopes strings Define the list of scopes for the consumer --service-name string Name of the service --service-region string Region where the service will be started --service-type string Type of service (hatchery, etc.) Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl consumer\t- Manage CDS auth consumers  "
},
{
	"uri": "/docs/components/engine/config/new/",
	"title": "new",
	"tags": [],
	"description": "",
	"content": "engine config new CDS configuration file assistant\nSynopsis Generate the whole configuration file $ engine config new \u0026gt; conf.toml\nyou can compose your file configuration this will generate a file configuration containing api and hatchery:local µService $ engine config new api hatchery:local\nFor advanced usage, Debug and Tracing section can be generated as: $ engine config new debug tracing [µService(s)\u0026hellip;]\nAll options $ engine config new [debug] [tracing] [api] [hatchery:local] [hatchery:openstack] [hatchery:swarm] [hatchery:vsphere] [elasticsearch] [hooks] [vcs] [repositories] [migrate]\nengine config new [flags] Options  --env Print configuration as environment variable SEE ALSO  engine config\t- Manage CDS Configuration  "
},
{
	"uri": "/development/rest/notification/",
	"title": "notification",
	"tags": [],
	"description": "",
	"content": "GET /notification/state    URL /notification/state     Method GET   Permissions Auth: true   Code getUserNotificationStateValueHandler    GET /notification/type    URL /notification/type     Method GET   Permissions Auth: true   Code getUserNotificationTypeHandler    "
},
{
	"uri": "/docs/components/cdsctl/experimental/project/notification/",
	"title": "notification",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental project notification Manage Notification on a CDS project\nSynopsis Manage Notification on a CDS project\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental project\t- CDS Experimental project commands cdsctl experimental project notification delete\t- Delete a notification on a project cdsctl experimental project notification export\t- Export notification settings from a project cdsctl experimental project notification import\t- Import notification settings on a project from a yaml file cdsctl experimental project notification list\t- List available notifications on a project  "
},
{
	"uri": "/docs/components/cdsctl/workflow/advanced/number/",
	"title": "number",
	"tags": [],
	"description": "",
	"content": "cdsctl workflow advanced number Manage Workflow Run Number\nSynopsis Manage Workflow Run Number\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl workflow advanced\t- Manage Workflow Advanced cdsctl workflow advanced number set\t- Set a Workflow Run Number cdsctl workflow advanced number show\t- Show a Workflow Run Number  "
},
{
	"uri": "/docs/integrations/openid-connect/",
	"title": "OpenID-Connect Authentication",
	"tags": [],
	"description": "",
	"content": "The OpenID-Connect Integration have to be configured on your CDS by a CDS Administrator.\nThis integration allows you to delegate users authentication to an OpenID-Connect third party like Keycloak or Hydra\nHow to configure OpenID-Connect Authentication integration Edit the toml file:\n section [api.auth.oidc]  enable the signin with enabled = true if you want to disable signup, set signupDisabled = true    [api.auth.oidc] clientId = \u0026#34;YOUR CLIENT ID\u0026#34; clientSecret = \u0026#34;YOUR CLIENT SECRET\u0026#34; enabled = true signupDisabled = false url = \u0026#34;http[s]://\u0026lt;OIDC HOST\u0026gt;:\u0026lt;PORT\u0026gt;/auth/realms/\u0026lt;YOUR REALM\u0026gt;\u0026#34; For example :\n[api.auth.oidc] clientId = \u0026#34;cds_client\u0026#34; clientSecret = \u0026#34;6ebf3c3f-6f0b-4326-bebd-05fd472a90ec\u0026#34; enabled = true signupDisabled = false url = \u0026#34;http://openid-connect.myorg.com:8080/auth/realms/cds\u0026#34; "
},
{
	"uri": "/docs/integrations/openstack/",
	"title": "Openstack",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/docs/integrations/openstack/openstack_compute/",
	"title": "Openstack Compute",
	"tags": [],
	"description": "",
	"content": "CDS build using OpenStack infrastructure to spawn each CDS Workers inside dedicated virtual machine.\nStart OpenStack hatchery Generate a token:\n$ cdsctl consumer new me \\ --scopes=Hatchery,RunExecution,Service,WorkerModel \\ --name=\u0026#34;hatchery.openstack\u0026#34; \\ --description=\u0026#34;Consumer token for openstack hatchery\u0026#34; \\ --groups=\u0026#34;\u0026#34; \\ --no-interactive Builtin consumer successfully created, use the following token to sign in: xxxxxxxx.xxxxxxx.4Bd9XJMIWrfe8Lwb-Au68TKUqflPorY2Fmcuw5vIoUs5gQyCLuxxxxxxxxxxxxxx Edit the section hatchery.openstack in the CDS Configuration file. The token have to be set on the key hatchery.openstack.commonConfiguration.api.http.token.\nThen start hatchery:\nengine start hatchery:openstack --config config.toml This hatchery will now start worker of model \u0026lsquo;openstack\u0026rsquo; on OpenStack infrastructure.\nSetup a worker model See Tutorial\n"
},
{
	"uri": "/docs/integrations/openstack/openstack_swift/",
	"title": "OpenStack Swift",
	"tags": [],
	"description": "",
	"content": "The OpenStack Swift Integration is a Self-Service integration that can be configured on a CDS Project.\nWith this integration, you can use a dedicated OpenStack Swift Storage on :\n action Artifact Upload action Artifact Download worker cache command  Notice: by default, the storage is configured in CDS Configuration. This integration allows user to use their own OpenStack Storage and not use the shared storage.\nConfigure with WebUI You can add a OpenStack Swift on your CDS Project.\nConfigure with cdsctl Import a OpenStack Swift on your CDS Project Create a file project-configuration.yml:\nname: MyOpenstackTenant model: name: Openstack public: false config: address: value: https://auth.cloud.ovh.net/v2.0/ type: string domain: value: \u0026#34;\u0026#34; type: string password: value: \u0026#39;your-password-here\u0026#39; type: password region: value: your-region type: string storage_container_prefix: value: cds-prefix- type: string storage_temporary_url_supported: value: \u0026#34;true\u0026#34; type: string tenant_name: value: \u0026#34;your-openstack-tenant\u0026#34; type: string username: value: your-openstack-user type: string Import the integration on your CDS Project with:\ncdsctl project integration import PROJECT_KEY project-configuration.yml Create a Public OpenStack Swift for whole CDS Projects You can also add a OpenStack Swift with cdsctl. As a CDS Administrator, this allows you to propose a Public OpenStack Swift, available on all CDS Projects.\nCreate a file public-configuration.yml:\nname: Openstack storage: true public: true public_configurations: your-public-openstack-integration: \u0026#34;address\u0026#34;: value: https://auth.cloud.ovh.net/v2.0/ type: string \u0026#34;domain\u0026#34;: value: \u0026#34;\u0026#34; type: string \u0026#34;password\u0026#34;: value: \u0026#39;your-password-here\u0026#39; type: password \u0026#34;region\u0026#34;: value: your-region type: string \u0026#34;storage_container_prefix\u0026#34;: value: cds-prefix- type: string \u0026#34;storage_temporary_url_supported\u0026#34;: value: \u0026#34;true\u0026#34; type: string \u0026#34;tenant_name\u0026#34;: value: \u0026#34;your-openstack-tenant\u0026#34; type: string \u0026#34;username\u0026#34;: value: your-openstack-user type: string Import the integration with :\ncdsctl admin integration-model import public-configuration.yml "
},
{
	"uri": "/docs/components/cdsctl/admin/organization/",
	"title": "organization",
	"tags": [],
	"description": "",
	"content": "cdsctl admin organization Manage CDS Organization\nSynopsis Manage CDS Organization\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin\t- Manage CDS (admin only) cdsctl admin organization add\t- Add a new Organization on CDS cdsctl admin organization delete\t- Delete an organization cdsctl admin organization list\t- List all organizations cdsctl admin organization user-migrate\t- Associate an organization to all empty without it  "
},
{
	"uri": "/docs/components/cdsctl/experimental/organization/",
	"title": "organization",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental organization CDS Experimental organization commands\nSynopsis CDS Experimental organization commands\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental\t- CDS Experimental commands cdsctl experimental organization add\t- Create a new organization cdsctl experimental organization delete\t- Remove organization cdsctl experimental organization list\t- List all organizations cdsctl experimental organization show\t- Get an organization by its identifier  "
},
{
	"uri": "/development/rest/parameter/",
	"title": "parameter",
	"tags": [],
	"description": "",
	"content": "GET /parameter/type    URL /parameter/type     Method GET   Permissions Auth: true   Code getParameterTypeHandler    "
},
{
	"uri": "/docs/components/cdsctl/pipeline/",
	"title": "pipeline",
	"tags": [],
	"description": "",
	"content": "cdsctl pipeline Manage CDS pipeline\nSynopsis Manage CDS pipeline\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl\t- CDS Command line utility cdsctl pipeline delete\t- Delete a CDS pipeline cdsctl pipeline export\t- Export CDS pipeline cdsctl pipeline import\t- Import CDS pipeline cdsctl pipeline list\t- List CDS pipelines cdsctl pipeline usage\t- CDS pipeline usage  "
},
{
	"uri": "/docs/components/cdsctl/experimental/plugin/",
	"title": "plugin",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental plugin CDS Experimental plugin commands\nSynopsis CDS Experimental plugin commands\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental\t- CDS Experimental commands cdsctl experimental plugin import\t- Import a plugin  "
},
{
	"uri": "/docs/actions/plugin-archive/",
	"title": "plugin-archive",
	"tags": [],
	"description": "",
	"content": "This is a plugin to compress or uncompress an archive. Supported formats: .zip, .tar, .tar.gz, .tar.bz2, .tar.xz, .tar.zst, .tar.lz4, .tar.sz, and .rar (extract-only)\nParameters  action: \u0026ldquo;compress\u0026rdquo; or \u0026ldquo;uncompress\u0026rdquo; an archive destination: The destination path source: The source path  "
},
{
	"uri": "/docs/actions/plugin-arsenal-delete-alternative/",
	"title": "plugin-arsenal-delete-alternative",
	"tags": [],
	"description": "",
	"content": "OVH Arsenal Delete Alternative Plugin\nParameters  alternative_name: alternative name to delete, defaults to alternative from deployment integration if not set  "
},
{
	"uri": "/docs/actions/plugin-artifactory-release-bundle-create/",
	"title": "plugin-artifactory-release-bundle-create",
	"tags": [],
	"description": "",
	"content": "Creates and sign a Artifactory Release Bundle from a specification.\nRead more: https://www.jfrog.com/confluence/display/CLI/CLI+for+JFrog+Artifactory#CLIforJFrogArtifactory-UsingFileSpecs\nParameters  description: Release Bundle description name: Release Bundle name release_notes: Release Notes (markdown format) specification: Spec Schema (yaml or json). see https://www.jfrog.com/confluence/display/CLI/CLI+for+JFrog+Artifactory#CLIforJFrogArtifactory-UsingFileSpecs token_variable: JFrog Distribution token variable name. Leave empty to use integration. url: JFrog Artifactory URL. Leave empty to use integration. version: Release Bundle version  "
},
{
	"uri": "/docs/actions/plugin-artifactory-release-bundle-distribute/",
	"title": "plugin-artifactory-release-bundle-distribute",
	"tags": [],
	"description": "",
	"content": "Distributes a Artifactory Release Bundle on all the Jfrog Platform.\nParameters  name: Release Bundle name token_variable: JFrog Distribution token variable name. Leave empty to use integration. url: JFrog Artifactory URL. Leave empty to use integration. version: Release Bundle version  "
},
{
	"uri": "/docs/actions/plugin-tmpl/",
	"title": "plugin-tmpl",
	"tags": [],
	"description": "",
	"content": "This action helps you generates a file using a template file and text/template golang package.\nCheck documentation on text/template for more information https://golang.org/pkg/text/template.\nParameters  file: Template file to use output: Output path for generated file (default to .out or just trimming .tpl extension) params: Parameters to pass on the template file (key=value newline separated list)  "
},
{
	"uri": "/docs/components/cdsctl/admin/plugins/",
	"title": "plugins",
	"tags": [],
	"description": "",
	"content": "cdsctl admin plugins Manage CDS Plugins\nSynopsis Manage CDS Plugins\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin\t- Manage CDS (admin only) cdsctl admin plugins binary-add\t- Add a binary cdsctl admin plugins delete\t- Delete a CDS Plugin cdsctl admin plugins doc\t- Generate documentation in markdown for a plugin cdsctl admin plugins export\t- Export a CDS Plugin cdsctl admin plugins import\t- Import a CDS Plugin cdsctl admin plugins list\t- List CDS Plugins  "
},
{
	"uri": "/docs/components/cdsctl/completion/powershell/",
	"title": "powershell",
	"tags": [],
	"description": "",
	"content": "cdsctl completion powershell Generate the autocompletion script for powershell\nSynopsis Generate the autocompletion script for powershell.\nTo load completions in your current shell session:\ncdsctl completion powershell | Out-String | Invoke-Expression  To load completions for every new session, add the output of the above command to your powershell profile.\ncdsctl completion powershell [flags] Options  --no-descriptions disable completion descriptions Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl completion\t- Generate the autocompletion script for the specified shell  "
},
{
	"uri": "/docs/components/engine/completion/powershell/",
	"title": "powershell",
	"tags": [],
	"description": "",
	"content": "engine completion powershell Generate the autocompletion script for powershell\nSynopsis Generate the autocompletion script for powershell.\nTo load completions in your current shell session:\nengine completion powershell | Out-String | Invoke-Expression  To load completions for every new session, add the output of the above command to your powershell profile.\nengine completion powershell [flags] Options  --no-descriptions disable completion descriptions SEE ALSO  engine completion\t- Generate the autocompletion script for the specified shell  "
},
{
	"uri": "/docs/components/worker/completion/powershell/",
	"title": "powershell",
	"tags": [],
	"description": "",
	"content": "worker completion powershell Generate the autocompletion script for powershell\nSynopsis Generate the autocompletion script for powershell.\nTo load completions in your current shell session:\nworker completion powershell | Out-String | Invoke-Expression  To load completions for every new session, add the output of the above command to your powershell profile.\nworker completion powershell [flags] Options  --no-descriptions disable completion descriptions SEE ALSO  worker completion\t- Generate the autocompletion script for the specified shell  "
},
{
	"uri": "/docs/components/cdsctl/preview/",
	"title": "preview",
	"tags": [],
	"description": "",
	"content": "cdsctl preview CDS feature preview\nSynopsis Preview commands should not be used in production. These commands are subject to breaking changes.\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl\t- CDS Command line utility cdsctl preview workflowv3-convert\t- Convert existing workflow to Workflow V3 files. cdsctl preview workflowv3-validate\t- Parse and validate given Workflow V3 files.  "
},
{
	"uri": "/development/rest/project/",
	"title": "project",
	"tags": [],
	"description": "",
	"content": "DELETE /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/deployment/config/\u0026lt;integration\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/deployment/config/\u0026lt;integration\u0026gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteApplicationDeploymentStrategyConfigHandler    DELETE /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/keys/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/keys/\u0026lt;name\u0026gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteKeyInApplicationHandler    DELETE /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/variable/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/variable/\u0026lt;name\u0026gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteVariableFromApplicationHandler    DELETE /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteApplicationHandler    DELETE /project/\u0026lt;project-key\u0026gt;/encrypt    URL /project/\u0026lt;project-key\u0026gt;/encrypt     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteEncryptVariableHandler    DELETE /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/keys/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/keys/\u0026lt;name\u0026gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteKeyInEnvironmentHandler    DELETE /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/variable/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/variable/\u0026lt;name\u0026gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteVariableFromEnvironmentHandler    DELETE /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteEnvironmentHandler    DELETE /project/\u0026lt;project-key\u0026gt;/group/\u0026lt;group-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/group/\u0026lt;group-name\u0026gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteGroupFromProjectHandler    DELETE /project/\u0026lt;project-key\u0026gt;/integrations/\u0026lt;integration-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/integrations/\u0026lt;integration-name\u0026gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteProjectIntegrationHandler    DELETE /project/\u0026lt;project-key\u0026gt;/keys/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/keys/\u0026lt;name\u0026gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteKeyInProjectHandler    DELETE /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;/parameter/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;/parameter/\u0026lt;name\u0026gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteParameterFromPipelineHandler    DELETE /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;/stage/\u0026lt;stage-id\u0026gt;/job/\u0026lt;job-id\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;/stage/\u0026lt;stage-id\u0026gt;/job/\u0026lt;job-id\u0026gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteJobHandler    DELETE /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;/stage/\u0026lt;stage-id\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;/stage/\u0026lt;stage-id\u0026gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteStageHandler    DELETE /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deletePipelineHandler    DELETE /project/\u0026lt;project-key\u0026gt;/variable/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/variable/\u0026lt;name\u0026gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteVariableFromProjectHandler    DELETE /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/groups/\u0026lt;group-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/groups/\u0026lt;group-name\u0026gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteWorkflowGroupHandler    DELETE /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/icon    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/icon     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteWorkflowIconHandler    DELETE /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/integration/\u0026lt;integration-id\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/integration/\u0026lt;integration-id\u0026gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteWorkflowEventsIntegrationHandler    DELETE /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/label/\u0026lt;label-id\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/label/\u0026lt;label-id\u0026gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteWorkflowLabelHandler    DELETE /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;     Method DELETE   Permissions Auth: true   Code deleteWorkflowRunHandler    DELETE /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/branch/\u0026lt;branch\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/branch/\u0026lt;branch\u0026gt;     Method DELETE   Permissions Auth: true   Scopes Run   Code deleteWorkflowRunsBranchHandler    DELETE /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteWorkflowHandler    DELETE /project/\u0026lt;project-key\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteProjectHandler    GET /project/\u0026lt;project-key\u0026gt;/action    URL /project/\u0026lt;project-key\u0026gt;/action     Method GET   Permissions Auth: true   Scopes Project   Code getActionsForProjectHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/deployment/config/\u0026lt;integration\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/deployment/config/\u0026lt;integration\u0026gt;     Method GET   Permissions Auth: true   Scopes Project   Code getApplicationDeploymentStrategyConfigHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/deployment/config    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/deployment/config     Method GET   Permissions Auth: true   Scopes Project   Code getApplicationDeploymentStrategiesConfigHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/keys    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/keys     Method GET   Permissions Auth: true   Scopes Project   Code getKeysInApplicationHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/metrics/\u0026lt;metric-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/metrics/\u0026lt;metric-name\u0026gt;     Method GET   Permissions Auth: true   Scopes Project   Code getApplicationMetricHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/variable/\u0026lt;name\u0026gt;/audit    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/variable/\u0026lt;name\u0026gt;/audit     Method GET   Permissions Auth: true   Scopes Project   Code getVariableAuditInApplicationHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/variable/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/variable/\u0026lt;name\u0026gt;     Method GET   Permissions Auth: true   Scopes Project   Code getVariableInApplicationHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/variable/audit    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/variable/audit     Method GET   Permissions Auth: true   Scopes Project   Code getVariablesAuditInApplicationHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/variable    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/variable     Method GET   Permissions Auth: true   Scopes Project   Code getVariablesInApplicationHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/vcsinfos    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/vcsinfos     Method GET   Permissions Auth: true   Scopes Project   Code getApplicationVCSInfosHandler    GET /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;     Method GET   Permissions Auth: true   Scopes Project   Code getApplicationHandler    GET /project/\u0026lt;project-key\u0026gt;/applications    URL /project/\u0026lt;project-key\u0026gt;/applications     Method GET   Permissions Auth: true   Scopes Project   Code getApplicationsHandler    GET /project/\u0026lt;project-key\u0026gt;/encrypt/list    URL /project/\u0026lt;project-key\u0026gt;/encrypt/list     Method GET   Permissions Auth: true   Scopes Project   Code getListEncryptVariableHandler    GET /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/keys    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/keys     Method GET   Permissions Auth: true   Scopes Project   Code getKeysInEnvironmentHandler    GET /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/usage    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/usage     Method GET   Permissions Auth: true   Scopes Project   Code getEnvironmentUsageHandler    GET /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/variable/\u0026lt;name\u0026gt;/audit    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/variable/\u0026lt;name\u0026gt;/audit     Method GET   Permissions Auth: true   Scopes Project   Code getVariableAuditInEnvironmentHandler    GET /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/variable/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/variable/\u0026lt;name\u0026gt;     Method GET   Permissions Auth: true   Scopes Project   Code getVariableInEnvironmentHandler    GET /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/variable    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/variable     Method GET   Permissions Auth: true   Scopes Project   Code getVariablesInEnvironmentHandler    GET /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;     Method GET   Permissions Auth: true   Scopes Project   Code getEnvironmentHandler    GET /project/\u0026lt;project-key\u0026gt;/environment    URL /project/\u0026lt;project-key\u0026gt;/environment     Method GET   Permissions Auth: true   Scopes Project   Code getEnvironmentsHandler    GET /project/\u0026lt;project-key\u0026gt;/export/application/\u0026lt;application-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/export/application/\u0026lt;application-name\u0026gt;     Method GET   Permissions Auth: true   Scopes Project   Code getApplicationExportHandler    GET /project/\u0026lt;project-key\u0026gt;/export/environment/\u0026lt;environment-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/export/environment/\u0026lt;environment-name\u0026gt;     Method GET   Permissions Auth: true   Scopes Project   Code getEnvironmentExportHandler    GET /project/\u0026lt;project-key\u0026gt;/export/pipeline/\u0026lt;pipeline-key\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/export/pipeline/\u0026lt;pipeline-key\u0026gt;     Method GET   Permissions Auth: true   Scopes Project   Code getPipelineExportHandler    GET /project/\u0026lt;project-key\u0026gt;/export/workflows/\u0026lt;workflow-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/export/workflows/\u0026lt;workflow-name\u0026gt;     Method GET   Permissions Auth: true   Scopes Project   Code getWorkflowExportHandler    GET /project/\u0026lt;project-key\u0026gt;/integrations/\u0026lt;integration-name\u0026gt;/workerhooks    URL /project/\u0026lt;project-key\u0026gt;/integrations/\u0026lt;integration-name\u0026gt;/workerhooks     Method GET   Permissions Auth: true   Code getProjectIntegrationWorkerHookHandler    GET /project/\u0026lt;project-key\u0026gt;/integrations/\u0026lt;integration-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/integrations/\u0026lt;integration-name\u0026gt;     Method GET   Permissions Auth: true   Scopes Project   Code getProjectIntegrationHandler    GET /project/\u0026lt;project-key\u0026gt;/integrations    URL /project/\u0026lt;project-key\u0026gt;/integrations     Method GET   Permissions Auth: true   Scopes Project   Code getProjectIntegrationsHandler    GET /project/\u0026lt;project-key\u0026gt;/keys    URL /project/\u0026lt;project-key\u0026gt;/keys     Method GET   Permissions Auth: true   Scopes Project   Code getKeysInProjectHandler    GET /project/\u0026lt;project-key\u0026gt;/notifications    URL /project/\u0026lt;project-key\u0026gt;/notifications     Method GET   Permissions Auth: true   Scopes Project   Code getProjectNotificationsHandler    GET /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;/audits    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;/audits     Method GET   Permissions Auth: true   Scopes Project   Code getPipelineAuditHandler    GET /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;/parameter    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;/parameter     Method GET   Permissions Auth: true   Scopes Project   Code getParametersInPipelineHandler    GET /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;/stage/\u0026lt;stage-id\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;/stage/\u0026lt;stage-id\u0026gt;     Method GET   Permissions Auth: true   Scopes Project   Code getStageHandler    GET /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;/stage/condition    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;/stage/condition     Method GET   Permissions Auth: true   Scopes Project   Code getStageConditionsHandler    GET /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;     Method GET   Permissions Auth: true   Scopes Project   Code getPipelineHandler    GET /project/\u0026lt;project-key\u0026gt;/pipeline    URL /project/\u0026lt;project-key\u0026gt;/pipeline     Method GET   Permissions Auth: true   Scopes Project   Code getPipelinesHandler    GET /project/\u0026lt;project-key\u0026gt;/pull/workflows/\u0026lt;workflow-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/pull/workflows/\u0026lt;workflow-name\u0026gt;     Method GET   Permissions Auth: true   Scopes Project   Code getWorkflowPullHandler    GET /project/\u0026lt;project-key\u0026gt;/repositories_manager/\u0026lt;name\u0026gt;/repo    URL /project/\u0026lt;project-key\u0026gt;/repositories_manager/\u0026lt;name\u0026gt;/repo     Method GET   Permissions Auth: true   Scopes Project   Code getRepoFromRepositoriesManagerHandler    GET /project/\u0026lt;project-key\u0026gt;/repositories_manager/\u0026lt;name\u0026gt;/repos    URL /project/\u0026lt;project-key\u0026gt;/repositories_manager/\u0026lt;name\u0026gt;/repos     Method GET   Permissions Auth: true   Scopes Project   Code getReposFromRepositoriesManagerHandler    GET /project/\u0026lt;project-key\u0026gt;/repositories_manager    URL /project/\u0026lt;project-key\u0026gt;/repositories_manager     Method GET   Permissions Auth: true   Scopes Project   Code getRepositoriesManagerForProjectHandler    GET /project/\u0026lt;project-key\u0026gt;/runs    URL /project/\u0026lt;project-key\u0026gt;/runs     Method GET   Permissions Auth: true   Scopes Project   Code getWorkflowAllRunsHandler    GET /project/\u0026lt;project-key\u0026gt;/type/\u0026lt;type\u0026gt;/access    URL /project/\u0026lt;project-key\u0026gt;/type/\u0026lt;type\u0026gt;/access     Method GET   Permissions Auth: true   Scopes Service   Code getProjectAccessHandler    GET /project/\u0026lt;project-key\u0026gt;/variable/\u0026lt;name\u0026gt;/audit    URL /project/\u0026lt;project-key\u0026gt;/variable/\u0026lt;name\u0026gt;/audit     Method GET   Permissions Auth: true   Scopes Project   Code getVariableAuditInProjectHandler    GET /project/\u0026lt;project-key\u0026gt;/variable/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/variable/\u0026lt;name\u0026gt;     Method GET   Permissions Auth: true   Scopes Project   Code getVariableInProjectHandler    GET /project/\u0026lt;project-key\u0026gt;/variable/audit    URL /project/\u0026lt;project-key\u0026gt;/variable/audit     Method GET   Permissions Auth: true   Scopes Project   Code getVariablesAuditInProjectnHandler    GET /project/\u0026lt;project-key\u0026gt;/variable    URL /project/\u0026lt;project-key\u0026gt;/variable     Method GET   Permissions Auth: true   Scopes Project   Code getVariablesInProjectHandler    GET /project/\u0026lt;project-key\u0026gt;/worker/model    URL /project/\u0026lt;project-key\u0026gt;/worker/model     Method GET   Permissions Auth: true   Scopes WorkerModel   Code getWorkerModelsForProjectHandler    GET /project/\u0026lt;project-key\u0026gt;/workflow/\u0026lt;workflow-name\u0026gt;/node/\u0026lt;node-id\u0026gt;/hook/model    URL /project/\u0026lt;project-key\u0026gt;/workflow/\u0026lt;workflow-name\u0026gt;/node/\u0026lt;node-id\u0026gt;/hook/model     Method GET   Permissions Auth: true   Scopes Project   Code getWorkflowHookModelsHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-id\u0026gt;/type/\u0026lt;type\u0026gt;/access    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-id\u0026gt;/type/\u0026lt;type\u0026gt;/access     Method GET   Permissions Auth: true   Scopes Service   Code getWorkflowAccessHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/delete/dependencies    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/delete/dependencies     Method GET   Permissions Auth: true   Scopes Project   Code getWorkflowDependenciesHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/hook/triggers/condition    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/hook/triggers/condition     Method GET   Permissions Auth: true   Scopes Run   Code getWorkflowTriggerHookConditionHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/hooks/\u0026lt;uuid\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/hooks/\u0026lt;uuid\u0026gt;     Method GET   Permissions Auth: true   Scopes Project   Code getWorkflowHookHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/nodes/\u0026lt;node-run-id\u0026gt;/job/\u0026lt;run-job-id\u0026gt;/links    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/nodes/\u0026lt;node-run-id\u0026gt;/job/\u0026lt;run-job-id\u0026gt;/links     Method GET   Permissions Auth: true   Scopes Run   Code getWorkflowNodeRunJobStepLinksHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/nodes/\u0026lt;node-run-id\u0026gt;/job/\u0026lt;run-job-id\u0026gt;/service/\u0026lt;service-name\u0026gt;/link    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/nodes/\u0026lt;node-run-id\u0026gt;/job/\u0026lt;run-job-id\u0026gt;/service/\u0026lt;service-name\u0026gt;/link     Method GET   Permissions Auth: true   Scopes Run   Code getWorkflowNodeRunJobServiceLinkHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/nodes/\u0026lt;node-run-id\u0026gt;/job/\u0026lt;run-job-id\u0026gt;/step/\u0026lt;step-order\u0026gt;/link    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/nodes/\u0026lt;node-run-id\u0026gt;/job/\u0026lt;run-job-id\u0026gt;/step/\u0026lt;step-order\u0026gt;/link     Method GET   Permissions Auth: true   Scopes Run   Code getWorkflowNodeRunJobStepLinkHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/notifications/conditions    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/notifications/conditions     Method GET   Permissions Auth: true   Scopes Project   Code getWorkflowNotificationsConditionsHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/retention/suggest    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/retention/suggest     Method GET   Permissions Auth: true   Scopes Project   Code getRetentionPolicySuggestionHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/\u0026lt;node-name\u0026gt;/commits    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/\u0026lt;node-name\u0026gt;/commits     Method GET   Permissions Auth: true   Scopes Run   Code getWorkflowCommitsHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/artifacts/links    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/artifacts/links     Method GET   Permissions Auth: true   Code getWorkflowRunArtifactLinksHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/hooks/\u0026lt;hook-run-id\u0026gt;/details    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/hooks/\u0026lt;hook-run-id\u0026gt;/details     Method GET   Permissions Auth: true   Scopes Run   Code getWorkflowJobHookDetailsHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/nodes/\u0026lt;node-id\u0026gt;/history    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/nodes/\u0026lt;node-id\u0026gt;/history     Method GET   Permissions Auth: true   Scopes Run   Code getWorkflowNodeRunHistoryHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/nodes/\u0026lt;node-run-id\u0026gt;/job/\u0026lt;run-job-id\u0026gt;/info    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/nodes/\u0026lt;node-run-id\u0026gt;/job/\u0026lt;run-job-id\u0026gt;/info     Method GET   Permissions Auth: true   Scopes Run   Code getWorkflowNodeRunJobSpawnInfosHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/nodes/\u0026lt;node-run-id\u0026gt;/results    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/nodes/\u0026lt;node-run-id\u0026gt;/results     Method GET   Permissions Auth: true   Code getWorkflowNodeRunResultsHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/nodes/\u0026lt;node-run-id\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/nodes/\u0026lt;node-run-id\u0026gt;     Method GET   Permissions Auth: true   Scopes Run   Code getWorkflowNodeRunHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/results    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/results     Method GET   Permissions Auth: true   Code getWorkflowRunResultsHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;     Method GET   Permissions Auth: true   Code getWorkflowRunHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/latest    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/latest     Method GET   Permissions Auth: true   Scopes Run   Code getLatestWorkflowRunHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/num    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/num     Method GET   Permissions Auth: true   Scopes Run   Code getWorkflowRunNumHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/tags    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/tags     Method GET   Permissions Auth: true   Scopes Run   Code getWorkflowRunTagsHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs     Method GET   Permissions Auth: true   Scopes Run   Code getWorkflowRunsHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/triggers/condition    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/triggers/condition     Method GET   Permissions Auth: true   Scopes Run   Code getWorkflowTriggerConditionHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;     Method GET   Permissions Auth: true   Scopes Project   Code getWorkflowHandler    GET /project/\u0026lt;project-key\u0026gt;/workflows    URL /project/\u0026lt;project-key\u0026gt;/workflows     Method GET   Permissions Auth: true   Scopes Project   Code getWorkflowsHandler    GET /project/\u0026lt;project-key\u0026gt;/workflowv3/\u0026lt;workflow-name\u0026gt;/run/\u0026lt;number\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/workflowv3/\u0026lt;workflow-name\u0026gt;/run/\u0026lt;number\u0026gt;     Method GET   Permissions Auth: true   Scopes Run   Code getWorkflowV3RunHandler    GET /project/\u0026lt;project-key\u0026gt;/workflowv3/\u0026lt;workflow-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/workflowv3/\u0026lt;workflow-name\u0026gt;     Method GET   Permissions Auth: true   Scopes Project   Code getWorkflowV3Handler    GET /project/\u0026lt;project-key\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;     Method GET   Permissions Auth: true   Scopes Project   Code getProjectHandler    GET /project    URL /project     Method GET   Permissions Auth: true   Scopes Project   Code getProjectsHandler    POST /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/clone    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/clone     Method POST   Permissions Auth: true   Scopes Project   Code cloneApplicationHandler    POST /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/deployment/config/\u0026lt;integration\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/deployment/config/\u0026lt;integration\u0026gt;     Method POST   Permissions Auth: true   Scopes Project   Code postApplicationDeploymentStrategyConfigHandler    POST /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/keys    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/keys     Method POST   Permissions Auth: true   Scopes Project   Code addKeyInApplicationHandler    POST /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/metadata/\u0026lt;metadata\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/metadata/\u0026lt;metadata\u0026gt;     Method POST   Permissions Auth: true   Scopes Project   Code postApplicationMetadataHandler    POST /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/variable/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/variable/\u0026lt;name\u0026gt;     Method POST   Permissions Auth: true   Scopes Project   Code addVariableInApplicationHandler    POST /project/\u0026lt;project-key\u0026gt;/applications    URL /project/\u0026lt;project-key\u0026gt;/applications     Method POST   Permissions Auth: true   Scopes Project   Code addApplicationHandler    POST /project/\u0026lt;project-key\u0026gt;/encrypt    URL /project/\u0026lt;project-key\u0026gt;/encrypt     Method POST   Permissions Auth: true   Scopes Project   Code postEncryptVariableHandler    POST /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/clone/\u0026lt;clone-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/clone/\u0026lt;clone-name\u0026gt;     Method POST   Permissions Auth: true   Scopes Project   Code cloneEnvironmentHandler    POST /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/keys    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/keys     Method POST   Permissions Auth: true   Scopes Project   Code addKeyInEnvironmentHandler    POST /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/variable/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/variable/\u0026lt;name\u0026gt;     Method POST   Permissions Auth: true   Scopes Project   Code addVariableInEnvironmentHandler    POST /project/\u0026lt;project-key\u0026gt;/environment/import/\u0026lt;environment-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/environment/import/\u0026lt;environment-name\u0026gt;     Method POST   Permissions Auth: true   Scopes Project   Code importIntoEnvironmentHandler    POST /project/\u0026lt;project-key\u0026gt;/environment/import    URL /project/\u0026lt;project-key\u0026gt;/environment/import     Method POST   Permissions Auth: true   Scopes Project   Code importNewEnvironmentHandler    POST /project/\u0026lt;project-key\u0026gt;/environment    URL /project/\u0026lt;project-key\u0026gt;/environment     Method POST   Permissions Auth: true   Scopes Project   Code addEnvironmentHandler    POST /project/\u0026lt;project-key\u0026gt;/group    URL /project/\u0026lt;project-key\u0026gt;/group     Method POST   Permissions Auth: true   Scopes Project   Code postGroupInProjectHandler    POST /project/\u0026lt;project-key\u0026gt;/import/application    URL /project/\u0026lt;project-key\u0026gt;/import/application     Method POST   Permissions Auth: true   Scopes Project   Code postApplicationImportHandler    POST /project/\u0026lt;project-key\u0026gt;/import/pipeline    URL /project/\u0026lt;project-key\u0026gt;/import/pipeline     Method POST   Permissions Auth: true   Scopes Project   Code importPipelineHandler    POST /project/\u0026lt;project-key\u0026gt;/import/workflows    URL /project/\u0026lt;project-key\u0026gt;/import/workflows     Method POST   Permissions Auth: true   Scopes Project   Code postWorkflowImportHandler    POST /project/\u0026lt;project-key\u0026gt;/integrations/\u0026lt;integration-name\u0026gt;/workerhooks    URL /project/\u0026lt;project-key\u0026gt;/integrations/\u0026lt;integration-name\u0026gt;/workerhooks     Method POST   Permissions Auth: true   Code postProjectIntegrationWorkerHookHandler    POST /project/\u0026lt;project-key\u0026gt;/integrations    URL /project/\u0026lt;project-key\u0026gt;/integrations     Method POST   Permissions Auth: true   Scopes Project   Code postProjectIntegrationHandler    POST /project/\u0026lt;project-key\u0026gt;/keys/\u0026lt;name\u0026gt;/disable    URL /project/\u0026lt;project-key\u0026gt;/keys/\u0026lt;name\u0026gt;/disable     Method POST   Permissions Auth: true   Scopes Project   Code postDisableKeyInProjectHandler    POST /project/\u0026lt;project-key\u0026gt;/keys/\u0026lt;name\u0026gt;/enable    URL /project/\u0026lt;project-key\u0026gt;/keys/\u0026lt;name\u0026gt;/enable     Method POST   Permissions Auth: true   Scopes Project   Code postEnableKeyInProjectHandler    POST /project/\u0026lt;project-key\u0026gt;/keys    URL /project/\u0026lt;project-key\u0026gt;/keys     Method POST   Permissions Auth: true   Scopes Project   Code addKeyInProjectHandler    POST /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;/parameter/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;/parameter/\u0026lt;name\u0026gt;     Method POST   Permissions Auth: true   Scopes Project   Code addParameterInPipelineHandler    POST /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;/rollback/\u0026lt;audit-id\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;/rollback/\u0026lt;audit-id\u0026gt;     Method POST   Permissions Auth: true   Scopes Project   Code postPipelineRollbackHandler    POST /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;/stage/\u0026lt;stage-id\u0026gt;/job    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;/stage/\u0026lt;stage-id\u0026gt;/job     Method POST   Permissions Auth: true   Scopes Project   Code addJobToStageHandler    POST /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;/stage/move    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;/stage/move     Method POST   Permissions Auth: true   Scopes Project   Code moveStageHandler    POST /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;/stage    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;/stage     Method POST   Permissions Auth: true   Scopes Project   Code addStageHandler    POST /project/\u0026lt;project-key\u0026gt;/pipeline    URL /project/\u0026lt;project-key\u0026gt;/pipeline     Method POST   Permissions Auth: true   Scopes Project   Code addPipelineHandler    POST /project/\u0026lt;project-key\u0026gt;/preview/pipeline    URL /project/\u0026lt;project-key\u0026gt;/preview/pipeline     Method POST   Permissions Auth: true   Scopes Project   Code postPipelinePreviewHandler    POST /project/\u0026lt;project-key\u0026gt;/preview/workflows    URL /project/\u0026lt;project-key\u0026gt;/preview/workflows     Method POST   Permissions Auth: true   Scopes Project   Code postWorkflowPreviewHandler    POST /project/\u0026lt;project-key\u0026gt;/push/workflows    URL /project/\u0026lt;project-key\u0026gt;/push/workflows     Method POST   Permissions Auth: true   Scopes Project   Code postWorkflowPushHandler    POST /project/\u0026lt;project-key\u0026gt;/repositories_manager/\u0026lt;name\u0026gt;/application/\u0026lt;application-name\u0026gt;/attach    URL /project/\u0026lt;project-key\u0026gt;/repositories_manager/\u0026lt;name\u0026gt;/application/\u0026lt;application-name\u0026gt;/attach     Method POST   Permissions Auth: true   Scopes Project   Code attachRepositoriesManagerHandler    POST /project/\u0026lt;project-key\u0026gt;/repositories_manager/\u0026lt;name\u0026gt;/application/\u0026lt;application-name\u0026gt;/detach    URL /project/\u0026lt;project-key\u0026gt;/repositories_manager/\u0026lt;name\u0026gt;/application/\u0026lt;application-name\u0026gt;/detach     Method POST   Permissions Auth: true   Scopes Project   Code detachRepositoriesManagerHandler    POST /project/\u0026lt;project-key\u0026gt;/variable/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/variable/\u0026lt;name\u0026gt;     Method POST   Permissions Auth: true   Scopes Project   Code addVariableInProjectHandler    POST /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/ascode/events/resync    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/ascode/events/resync     Method POST   Permissions Auth: true   Scopes Project   Code postWorkflowAsCodeEventsResyncHandler    POST /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/ascode    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/ascode     Method POST   Permissions Auth: true   Scopes Project   Code postWorkflowAsCodeHandler    POST /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/groups    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/groups     Method POST   Permissions Auth: true   Scopes Project   Code postWorkflowGroupHandler    POST /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/label    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/label     Method POST   Permissions Auth: true   Scopes Project   Code postWorkflowLabelHandler    POST /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/retention/dryrun    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/retention/dryrun     Method POST   Permissions Auth: true   Scopes Project   Code postWorkflowRetentionPolicyDryRun    POST /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/rollback/\u0026lt;audit-id\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/rollback/\u0026lt;audit-id\u0026gt;     Method POST   Permissions Auth: true   Scopes Project   Code postWorkflowRollbackHandler    POST /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/hooks/\u0026lt;hook-run-id\u0026gt;/callback    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/hooks/\u0026lt;hook-run-id\u0026gt;/callback     Method POST   Permissions Auth: true   Scopes Run   Code postWorkflowJobHookCallbackHandler    POST /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/num    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/num     Method POST   Permissions Auth: true   Scopes Run   Code postWorkflowRunNumHandler    POST /project/\u0026lt;project-key\u0026gt;/workflows    URL /project/\u0026lt;project-key\u0026gt;/workflows     Method POST   Permissions Auth: true   Scopes Project   Code postWorkflowHandler    POST /project/\u0026lt;project-key\u0026gt;/workflowv3/validate    URL /project/\u0026lt;project-key\u0026gt;/workflowv3/validate     Method POST   Permissions Auth: true   Scopes Project   Code postWorkflowV3ValidateHandler    POST /project    URL /project     Method POST   Permissions Auth: true   Scopes Project   Code postProjectHandler    POSTEXECUTE /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/nodes/\u0026lt;node-run-id\u0026gt;/release    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/nodes/\u0026lt;node-run-id\u0026gt;/release     Method POSTEXECUTE   Permissions Auth: true   Scopes RunExecution   Code releaseApplicationWorkflowHandler    POSTEXECUTE /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/nodes/\u0026lt;node-run-id\u0026gt;/stop    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/nodes/\u0026lt;node-run-id\u0026gt;/stop     Method POSTEXECUTE   Permissions Auth: true   Scopes Run   Code stopWorkflowNodeRunHandler    POSTEXECUTE /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/stop    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/stop     Method POSTEXECUTE   Permissions Auth: true   Scopes Run   Code stopWorkflowRunHandler    POSTEXECUTE /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/vcs/resync    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs/\u0026lt;number\u0026gt;/vcs/resync     Method POSTEXECUTE   Permissions Auth: true   Scopes Run   Code postResyncVCSWorkflowRunHandler    POSTEXECUTE /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/runs     Method POSTEXECUTE   Permissions Auth: true   Scopes Run   Code postWorkflowRunHandler    PUT /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/ascode    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/ascode     Method PUT   Permissions Auth: true   Scopes Project   Code updateAsCodeApplicationHandler    PUT /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/variable/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/variable/\u0026lt;name\u0026gt;     Method PUT   Permissions Auth: true   Scopes Project   Code updateVariableInApplicationHandler    PUT /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;     Method PUT   Permissions Auth: true   Scopes Project   Code updateApplicationHandler    PUT /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/ascode    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/ascode     Method PUT   Permissions Auth: true   Scopes Project   Code updateAsCodeEnvironmentHandler    PUT /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/variable/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;/variable/\u0026lt;name\u0026gt;     Method PUT   Permissions Auth: true   Scopes Project   Code updateVariableInEnvironmentHandler    PUT /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/environment/\u0026lt;environment-name\u0026gt;     Method PUT   Permissions Auth: true   Scopes Project   Code updateEnvironmentHandler    PUT /project/\u0026lt;project-key\u0026gt;/group/\u0026lt;group-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/group/\u0026lt;group-name\u0026gt;     Method PUT   Permissions Auth: true   Scopes Project   Code putGroupRoleOnProjectHandler    PUT /project/\u0026lt;project-key\u0026gt;/import/pipeline/\u0026lt;pipeline-key\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/import/pipeline/\u0026lt;pipeline-key\u0026gt;     Method PUT   Permissions Auth: true   Scopes Project   Code putImportPipelineHandler    PUT /project/\u0026lt;project-key\u0026gt;/import/workflows/\u0026lt;workflow-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/import/workflows/\u0026lt;workflow-name\u0026gt;     Method PUT   Permissions Auth: true   Scopes Project   Code putWorkflowImportHandler    PUT /project/\u0026lt;project-key\u0026gt;/integrations/\u0026lt;integration-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/integrations/\u0026lt;integration-name\u0026gt;     Method PUT   Permissions Auth: true   Scopes Project   Code putProjectIntegrationHandler    PUT /project/\u0026lt;project-key\u0026gt;/labels    URL /project/\u0026lt;project-key\u0026gt;/labels     Method PUT   Permissions Auth: true   Scopes Project   Code putProjectLabelsHandler    PUT /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;/ascode    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;/ascode     Method PUT   Permissions Auth: true   Scopes Project   Code updateAsCodePipelineHandler    PUT /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;/parameter/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;/parameter/\u0026lt;name\u0026gt;     Method PUT   Permissions Auth: true   Scopes Project   Code updateParameterInPipelineHandler    PUT /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;/stage/\u0026lt;stage-id\u0026gt;/job/\u0026lt;job-id\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;/stage/\u0026lt;stage-id\u0026gt;/job/\u0026lt;job-id\u0026gt;     Method PUT   Permissions Auth: true   Scopes Project   Code updateJobHandler    PUT /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;/stage/\u0026lt;stage-id\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;/stage/\u0026lt;stage-id\u0026gt;     Method PUT   Permissions Auth: true   Scopes Project   Code updateStageHandler    PUT /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/pipeline/\u0026lt;pipeline-key\u0026gt;     Method PUT   Permissions Auth: true   Scopes Project   Code updatePipelineHandler    PUT /project/\u0026lt;project-key\u0026gt;/variable/\u0026lt;name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/variable/\u0026lt;name\u0026gt;     Method PUT   Permissions Auth: true   Scopes Project   Code updateVariableInProjectHandler    PUT /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/groups/\u0026lt;group-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/groups/\u0026lt;group-name\u0026gt;     Method PUT   Permissions Auth: true   Scopes Project   Code putWorkflowGroupHandler    PUT /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/icon    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;/icon     Method PUT   Permissions Auth: true   Scopes Project   Code putWorkflowIconHandler    PUT /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;/workflows/\u0026lt;workflow-name\u0026gt;     Method PUT   Permissions Auth: true   Scopes Project   Code putWorkflowHandler    PUT /project/\u0026lt;project-key\u0026gt;    URL /project/\u0026lt;project-key\u0026gt;     Method PUT   Permissions Auth: true   Scopes Project   Code updateProjectHandler    import an environment yml file    URL /project/\u0026lt;project-key\u0026gt;/import/environment     Method POST   Query Parameter force=true or false. If false and if the environment already exists, raise an error   Permissions Auth: true   Scopes Project   Code postEnvironmentImportHandler    Description import an environment yml file with cdsctl environment import myenv.env.yml\n"
},
{
	"uri": "/docs/components/cdsctl/admin/metadata/project/",
	"title": "project",
	"tags": [],
	"description": "",
	"content": "cdsctl admin metadata project Manage CDS Project Metadata\nSynopsis Manage CDS Project Metadata\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin metadata\t- Manage CDS Metadata cdsctl admin metadata project export\t- export CDS Project Metadata cdsctl admin metadata project import\t- import CDS Project Metadata  "
},
{
	"uri": "/docs/components/cdsctl/experimental/project/",
	"title": "project",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental project CDS Experimental project commands\nSynopsis CDS Experimental project commands\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental\t- CDS Experimental commands cdsctl experimental project analysis\t- Manage repository analysis cdsctl experimental project notification\t- Manage Notification on a CDS project cdsctl experimental project repository\t- Manage repositories on a CDS project cdsctl experimental project variableset\t- Manage Variable Set on a CDS project  "
},
{
	"uri": "/docs/components/cdsctl/project/",
	"title": "project",
	"tags": [],
	"description": "",
	"content": "cdsctl project Manage CDS project\nSynopsis Manage CDS project\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl\t- CDS Command line utility cdsctl project create\t- Create a CDS project cdsctl project delete\t- Delete a CDS project cdsctl project favorite\t- Add or delete a CDS project to your personal bookmarks cdsctl project integration\t- Manage CDS integrations cdsctl project keys\t- Manage CDS project keys cdsctl project list\t- List CDS projects cdsctl project show\t- Show a CDS project cdsctl project variable\t- Manage CDS project variables cdsctl project vcs\t- Manage VCS on a CDS project  "
},
{
	"uri": "/docs/components/cdsctl/admin/cdn/item/projectsize/",
	"title": "projectsize",
	"tags": [],
	"description": "",
	"content": "cdsctl admin cdn item projectsize Size used in octets by a project\nSynopsis Size used in octets by a project\ncdsctl admin cdn item projectsize [ PROJECT-KEY ] Examples cdsctl admin cdn item projectsize MYPROJ Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin cdn item\t- Manage CDS CDN Items  "
},
{
	"uri": "/docs/actions/builtin-promote/",
	"title": "Promote",
	"tags": [],
	"description": "",
	"content": "Promote is a builtin action, you can\u0026rsquo;t modify it.\nThis action promote artifacts in an artifact manager\nParameters  artifacts: (optional) Set a list of artifacts, separate by \u0026lsquo;,\u0026rsquo;. You can also use regexp. destMaturity: Repository suffix in which the artifact will be moved setProperties: Properties to add on the promoted artifacts srcMaturity: Repository suffix from which the artifact will be moved  Requirements No Requirement\nYAML example Example of a pipeline using Promote action:\nversion: v1.0 name: Pipeline1 stages: - Stage1 jobs: - job: Job1 stage: Stage1 steps: - promote: artifacts: (.*).zip Notes Implementation for artifactory can be found on GitHub\n"
},
{
	"uri": "/docs/components/cdsctl/template/pull/",
	"title": "pull",
	"tags": [],
	"description": "",
	"content": "cdsctl template pull Pull CDS workflow template\nSynopsis Pull CDS workflow template\ncdsctl template pull [TEMPLATE-PATH] [flags] Examples cdsctl template pull group-name/template-slug Options  --force Force, may override files -d, --output-dir string Output directory (default \u0026quot;.cds\u0026quot;) --quiet If true, do not output filename created Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl template\t- Manage CDS workflow template  "
},
{
	"uri": "/docs/components/cdsctl/workflow/pull/",
	"title": "pull",
	"tags": [],
	"description": "",
	"content": "cdsctl workflow pull Pull a workflow\nSynopsis Pull a workflow\ncdsctl workflow pull [ PROJECT-KEY WORKFLOW-NAME ] [flags] Options  --force Force, may override files -d, --output-dir string Output directory (default \u0026quot;.cds\u0026quot;) --quiet If true, do not output filename created --with-permissions Export permissions Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl workflow\t- Manage CDS workflow  "
},
{
	"uri": "/docs/components/worker/cache/pull/",
	"title": "pull",
	"tags": [],
	"description": "",
	"content": "worker cache pull worker cache pull tagValue\nSynopsis Inside a project, you can fetch a cache from your worker with a tag\nworker cache pull \u0026lt;tagValue\u0026gt;  If you push a cache with:\nworker cache push latest {{.cds.workspace}}/pathToUpload  The command:\nworker cache pull latest  will create the directory {{.cds.workspace}}/pathToUpload with the content of the cache\nIf you want to push a cache into a storage integration:\nworker cache push latest --from=MyStorageIntegration {{.cds.workspace}}/pathToUpload  worker cache pull [flags] Options  --from string optional. Your storage integration name SEE ALSO  worker cache\t-  "
},
{
	"uri": "/docs/components/cdsctl/admin/hooks/purge/",
	"title": "purge",
	"tags": [],
	"description": "",
	"content": "cdsctl admin hooks purge Delete all executions for a task\nSynopsis Delete all executions for a task\ncdsctl admin hooks purge UUID Examples cdsctl admin hooks purge 5178ce1f-2f76-45c5-a203-58c10c3e2c73 Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin hooks\t- Manage CDS Hooks tasks  "
},
{
	"uri": "/docs/components/cdsctl/template/push/",
	"title": "push",
	"tags": [],
	"description": "",
	"content": "cdsctl template push Push CDS workflow template\nSynopsis Push CDS workflow template\ncdsctl template push YAML-FILE ... [flags] Examples cdsctl template push my-template.yml workflow.yml 1.pipeline.yml Options  --skip-update-files Useful if you don't want to update yaml files after pushing the template. Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl template\t- Manage CDS workflow template  "
},
{
	"uri": "/docs/components/cdsctl/workflow/push/",
	"title": "push",
	"tags": [],
	"description": "",
	"content": "cdsctl workflow push Push a workflow\nSynopsis Useful when you want to push a workflow and his dependencies (pipelines, applications, environments)\nFor example if you have a workflow with pipelines build and tests you can push your workflow and pipelines with\ncdsctl workflow push tests.pip.yml build.pip.yml myWorkflow.yml  cdsctl workflow push [ PROJECT-KEY ] YAML-FILE ... [flags] Options  --force Override workflow if exists --skip-update-files Useful if you don't want to update yaml files after pushing the workflow. Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl workflow\t- Manage CDS workflow  "
},
{
	"uri": "/docs/components/worker/cache/push/",
	"title": "push",
	"tags": [],
	"description": "",
	"content": "worker cache push worker cache push tagValue {{.cds.workspace}}/pathToUpload\nSynopsis Inside a project, you can create a cache from your worker with a tag (useful for vendors for example) worker cache push dir/file\nYou can use you storage integration: worker cache push \u0026ndash;destination=MyStorageIntegration dir/file\nworker cache push [flags] Examples worker cache push {{.cds.workflow}}-{{.cds.version}} ./pathToUpload Options  --destination string optional. Your storage integration name SEE ALSO  worker cache\t-  "
},
{
	"uri": "/docs/actions/builtin-pushbuildinfo/",
	"title": "PushBuildInfo",
	"tags": [],
	"description": "",
	"content": "PushBuildInfo is a builtin action, you can\u0026rsquo;t modify it.\nPush build info into an artifact manager, useful only if you have an artifact manager linked to your workflow.\nParameters No Parameter\nRequirements No Requirement\nYAML example Example of a pipeline using PushBuildInfo action:\nversion: v1.0 name: Pipeline1 stages: - Stage1 jobs: - job: Job1 stage: Stage1 steps: - pushBuildInfo: \u0026#39;{{.cds.workflow}}\u0026#39; Note Implementation for artifactory can be found on GitHub\n"
},
{
	"uri": "/docs/actions/pythonpush/",
	"title": "pythonPush",
	"tags": [],
	"description": "",
	"content": "This pushes python package\nParameters  directory: Directory of the package package: The name of the package password: Password used to push the package  This parameter can be empty when an Artifactory integration is set up.\n url: Python repository url to push on.  This parameter can be empty when an Artifactory integration is set up.\n username: Username used to push the package  This parameter can be empty when an Artifactory integration is set up.\n version: The version of the package wheel: Package into a wheel or not  "
},
{
	"uri": "/development/rest/queue/",
	"title": "queue",
	"tags": [],
	"description": "",
	"content": "DELETE /queue/workflows/\u0026lt;job-id\u0026gt;/book    URL /queue/workflows/\u0026lt;job-id\u0026gt;/book     Method DELETE   Permissions Auth: true   Scopes RunExecution   Code deleteBookWorkflowJobHandler    GET /queue/workflows/\u0026lt;job-id\u0026gt;/cache/\u0026lt;tag\u0026gt;/links    URL /queue/workflows/\u0026lt;job-id\u0026gt;/cache/\u0026lt;tag\u0026gt;/links     Method GET   Permissions Auth: true   Scopes RunExecution   Code getWorkerCacheLinkHandler    GET /queue/workflows/\u0026lt;job-id\u0026gt;/infos    URL /queue/workflows/\u0026lt;job-id\u0026gt;/infos     Method GET   Permissions Auth: true   Scopes RunExecution   Code getWorkflowJobHandler    GET /queue/workflows/count    URL /queue/workflows/count     Method GET   Permissions Auth: true   Scopes RunExecution   Code countWorkflowJobQueueHandler    GET /queue/workflows    URL /queue/workflows     Method GET   Permissions Auth: true   Scopes RunExecution   Code getWorkflowJobQueueHandler    POST /queue/workflows/\u0026lt;job-id\u0026gt;/book    URL /queue/workflows/\u0026lt;job-id\u0026gt;/book     Method POST   Permissions Auth: true   Scopes RunExecution   Code postBookWorkflowJobHandler    POSTEXECUTE /queue/workflows/\u0026lt;job-id\u0026gt;/result    URL /queue/workflows/\u0026lt;job-id\u0026gt;/result     Method POSTEXECUTE   Permissions Auth: true   Scopes RunExecution   Code postWorkflowJobResultHandler    POSTEXECUTE /queue/workflows/\u0026lt;job-id\u0026gt;/run/results/check    URL /queue/workflows/\u0026lt;job-id\u0026gt;/run/results/check     Method POSTEXECUTE   Permissions Auth: true   Scopes RunExecution   Code workflowRunResultCheckUploadHandler    POSTEXECUTE /queue/workflows/\u0026lt;job-id\u0026gt;/run/results/promote    URL /queue/workflows/\u0026lt;job-id\u0026gt;/run/results/promote     Method POSTEXECUTE   Permissions Auth: true   Scopes RunExecution   Code workflowRunResultPromoteHandler    POSTEXECUTE /queue/workflows/\u0026lt;job-id\u0026gt;/run/results/release    URL /queue/workflows/\u0026lt;job-id\u0026gt;/run/results/release     Method POSTEXECUTE   Permissions Auth: true   Scopes RunExecution   Code workflowRunResultReleaseHandler    POSTEXECUTE /queue/workflows/\u0026lt;job-id\u0026gt;/run/results    URL /queue/workflows/\u0026lt;job-id\u0026gt;/run/results     Method POSTEXECUTE   Permissions Auth: true   Scopes RunExecution   Code postWorkflowRunResultsHandler    POSTEXECUTE /queue/workflows/\u0026lt;job-id\u0026gt;/spawn/infos    URL /queue/workflows/\u0026lt;job-id\u0026gt;/spawn/infos     Method POSTEXECUTE   Permissions Auth: true   Scopes RunExecution   Code postSpawnInfosWorkflowJobHandler    POSTEXECUTE /queue/workflows/\u0026lt;job-id\u0026gt;/step    URL /queue/workflows/\u0026lt;job-id\u0026gt;/step     Method POSTEXECUTE   Permissions Auth: true   Scopes RunExecution   Code postWorkflowJobStepStatusHandler    POSTEXECUTE /queue/workflows/\u0026lt;job-id\u0026gt;/tag    URL /queue/workflows/\u0026lt;job-id\u0026gt;/tag     Method POSTEXECUTE   Permissions Auth: true   Scopes RunExecution   Code postWorkflowJobTagsHandler    POSTEXECUTE /queue/workflows/\u0026lt;job-id\u0026gt;/take    URL /queue/workflows/\u0026lt;job-id\u0026gt;/take     Method POSTEXECUTE   Permissions Auth: true   Scopes RunExecution   Code postTakeWorkflowJobHandler    POSTEXECUTE /queue/workflows/\u0026lt;job-id\u0026gt;/test    URL /queue/workflows/\u0026lt;job-id\u0026gt;/test     Method POSTEXECUTE   Permissions Auth: true   Scopes RunExecution   Code postWorkflowJobTestsResultsHandler    POSTEXECUTE /queue/workflows/\u0026lt;job-id\u0026gt;/version    URL /queue/workflows/\u0026lt;job-id\u0026gt;/version     Method POSTEXECUTE   Permissions Auth: true   Scopes RunExecution   Code postWorkflowJobSetVersionHandler    "
},
{
	"uri": "/docs/components/cdsctl/queue/",
	"title": "queue",
	"tags": [],
	"description": "",
	"content": "cdsctl queue CDS Queue\nSynopsis CDS Queue\ncdsctl queue [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl\t- CDS Command line utility cdsctl queue interactive\t- Show the current queue cdsctl queue stopall\t- Stop all job from the queue  "
},
{
	"uri": "/docs/integrations/rabbitmq/",
	"title": "RabbitMQ",
	"tags": [],
	"description": "",
	"content": "The RabbitMQ Integration is a Self-Service integration that can be configured on a CDS Project.\nThis integration enables the RabbitMQ Hook feature:\nConfigure with WebUI You can add a RabbitMQ Integration on your CDS Project.\nConfigure with cdsctl Import a RabbitMQ Integration on your CDS Project Create a file project-configuration.yml:\nname: my-rabbitmq-integration model: name: RabbitMQ identifier: github.com/ovh/cds/integration/builtin/rabbitmq hook: true config: password: value: \u0026#39;**********\u0026#39; type: password uri: value: your-rabbit:5672 type: string username: value: your-username type: string Import the integration on your CDS Project with:\ncdsctl project integration import PROJECT_KEY project-configuration.yml Then, as a standard user, you can add a rabbitMQ Hook on your workflow.\nCreate a Public RabbitMQ Integration for whole CDS Projects You can also add a RabbitMQ Integration with cdsctl. As a CDS Administrator, this allows you to propose a Public RabbitMQ Integration, available on all CDS Projects.\nCreate a file public-configuration.yml:\nname: your-rabbitmq-integration identifier: github.com/ovh/cds/integration/builtin/rabbitmq hook: true public: true public_configurations: name-of-integration: \u0026#34;uri\u0026#34;: type: string value: \u0026#34;your-topic.events\u0026#34; \u0026#34;username\u0026#34;: type: string value: \u0026#34;your-topic.cds-reader\u0026#34; \u0026#34;password\u0026#34;: type: password value: xxxxxxxx \u0026#34;binding_key\u0026#34;: type: string value: \u0026#34;test-key\u0026#34; \u0026#34;consumer_tag\u0026#34;: type: string value: \u0026#34;simple-consumer\u0026#34; \u0026#34;exchange_name\u0026#34;: type: string value: \u0026#34;test-exchange\u0026#34; \u0026#34;exchange_type\u0026#34;: type: string value: \u0026#34;direct\u0026#34; \u0026#34;integration\u0026#34;: type: string value: \u0026#34;RabbitMQ\u0026#34; \u0026#34;queue\u0026#34;: type: string value: \u0026#34;test-queue\u0026#34; Import the integration with :\ncdsctl admin integration-model import public-configuration.yml Then, as a standard user, you can add a rabbitMQ Hook on your workflow.\n"
},
{
	"uri": "/docs/components/cdsctl/experimental/rbac/",
	"title": "rbac",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental rbac CDS Experimental rbac commands\nSynopsis CDS Experimental rbac commands\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental\t- CDS Experimental commands cdsctl experimental rbac delete\t- Delete a permission cdsctl experimental rbac import\t- Import a rbac rule from a yaml file cdsctl experimental rbac list\t- List CDS permissions cdsctl experimental rbac show\t- GET a CDS permission  "
},
{
	"uri": "/docs/components/cdsctl/consumer/regen/",
	"title": "regen",
	"tags": [],
	"description": "",
	"content": "cdsctl consumer regen Regenerate an existing auth consumer\nSynopsis Regenerate an existing auth consumer\ncdsctl consumer regen CONSUMER-ID [USERNAME] [flags] Options  --duration string Validity period of the token generated for the consumer (in days) --overlap string Overlap duration between actual token and the new one. eg: 24h, 30m Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl consumer\t- Manage CDS auth consumers  "
},
{
	"uri": "/docs/components/cdsctl/experimental/hatchery/regen/",
	"title": "regen",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental hatchery regen Regen the hatchery token\nSynopsis Regen the hatchery token\ncdsctl experimental hatchery regen HATCHERYIDENTIFIER [flags] Examples cdsctl hatchery regen \u0026lt;hatchery_name\u0026gt; Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl experimental hatchery\t- CDS Experimental hatchery commands  "
},
{
	"uri": "/docs/components/engine/config/regen/",
	"title": "regen",
	"tags": [],
	"description": "",
	"content": "engine config regen Regen tokens and keys for given CDS configuration file\nSynopsis $ engine config regen engine config regen [flags] Options  --env Print configuration as environment variable SEE ALSO  engine config\t- Manage CDS Configuration  "
},
{
	"uri": "/docs/components/cdsctl/experimental/region/",
	"title": "region",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental region CDS Experimental region commands\nSynopsis CDS Experimental region commands\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental\t- CDS Experimental commands cdsctl experimental region add\t- Create a new region cdsctl experimental region delete\t- Remove region cdsctl experimental region list\t- List all regions cdsctl experimental region show\t- Get an region by its identifier  "
},
{
	"uri": "/docs/actions/builtin-release/",
	"title": "Release",
	"tags": [],
	"description": "",
	"content": "Release is a builtin action, you can\u0026rsquo;t modify it.\nThis action creates a release on a artifact manager. It promotes artifacts.\nParameters  artifacts: (optional) Set a list of artifacts, separate by \u0026lsquo;,\u0026rsquo;. You can also use regexp. destMaturity: Repository suffix in which the artifact will be moved releaseNote: (optional) Set a release note for the release. setProperties: Properties to add on the released artifacts srcMaturity: Repository suffix from which the artifact will be moved  Requirements No Requirement\nYAML example Example of a pipeline using Release action:\nversion: v1.0 name: Pipeline1 stages: - Stage1 jobs: - job: Job1 stage: Stage1 steps: - release: artifacts: (.*).zip Notes Implementation for artifactory can be found on GitHub\n"
},
{
	"uri": "/docs/actions/builtin-releasevcs/",
	"title": "ReleaseVCS",
	"tags": [],
	"description": "",
	"content": "ReleaseVCS is a builtin action, you can\u0026rsquo;t modify it.\nThis action creates a release on the git repository linked to the application, if repository manager implements it.\nParameters  artifacts: (optional) Set a list of artifacts, separate by \u0026lsquo;,\u0026rsquo;. You can also use regexp. releaseNote: (optional) Set a release note for the release. tag: Tag attached to the release. title: Set a title for the release.  Requirements No Requirement\nYAML example Example of a pipeline using ReleaseVCS action:\nversion: v1.0 name: Pipeline1 parameters: tagLevel: type: list default: major;minor;patch description: major, minor or patch stages: - Stage1 jobs: - job: Job1 stage: Stage1 steps: - checkout: \u0026#39;{{.cds.workspace}}\u0026#39; - gitTag: path: \u0026#39;{{.cds.workspace}}\u0026#39; tagLevel: \u0026#39;{{.cds.pip.tagLevel}}\u0026#39; tagMessage: Release from CDS run {{.cds.version}} - script: - \u0026#39;#!/bin/sh\u0026#39; - TAG=`git describe --abbrev=0 --tags` - worker export tag $TAG - releaseVCS: artifacts: \u0026#39;{{.cds.workspace}}/myFile\u0026#39; releaseNote: My release {{.cds.build.tag}} tag: \u0026#39;{{.cds.build.tag}}\u0026#39; title: \u0026#39;{{.cds.build.tag}}\u0026#39; Notes This action is actually implemented for GitHub only.\n"
},
{
	"uri": "/docs/components/cdsctl/admin/users/rename/",
	"title": "rename",
	"tags": [],
	"description": "",
	"content": "cdsctl admin users rename Rename a given user\nSynopsis Rename a given user\ncdsctl admin users rename USERNAME NEW-USERNAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin users\t- Manage CDS users  "
},
{
	"uri": "/docs/components/cdsctl/group/rename/",
	"title": "rename",
	"tags": [],
	"description": "",
	"content": "cdsctl group rename Rename a CDS group\nSynopsis Rename a CDS group\ncdsctl group rename OLD-GROUP-NAME NEW-GROUP-NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl group\t- Manage CDS group  "
},
{
	"uri": "/docs/components/cdsctl/admin/repositories/",
	"title": "repositories",
	"tags": [],
	"description": "",
	"content": "cdsctl admin repositories Manage CDS repositories uService\nSynopsis Manage CDS repositories uService\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin\t- Manage CDS (admin only) cdsctl admin repositories status\t- display the status of repositories  "
},
{
	"uri": "/docs/components/cdsctl/admin/hooks/repository/",
	"title": "repository",
	"tags": [],
	"description": "",
	"content": "cdsctl admin hooks repository Manage repositories where there were events\nSynopsis Manage repositories where there were events\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin hooks\t- Manage CDS Hooks tasks cdsctl admin hooks repository delete\t- Remove repository cdsctl admin hooks repository event\t- Manage repositories events cdsctl admin hooks repository list\t- List repositories  "
},
{
	"uri": "/docs/components/cdsctl/experimental/project/repository/",
	"title": "repository",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental project repository Manage repositories on a CDS project\nSynopsis Manage repositories on a CDS project\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental project\t- CDS Experimental project commands cdsctl experimental project repository add\t- Add a repository on the project cdsctl experimental project repository delete\t- Remove a repository from on a project cdsctl experimental project repository hook-key\t- Get repository webhook secret key cdsctl experimental project repository list\t- List available repositories on a project  "
},
{
	"uri": "/docs/components/cdsctl/admin/services/request/",
	"title": "request",
	"tags": [],
	"description": "",
	"content": "cdsctl admin services request request GET on a CDS service\nSynopsis request GET on a CDS service\ncdsctl admin services request [flags] Examples  ## How to get the goroutine of the service named hatcheryLocal: ```bash cdsctl admin services request --name hatcheryLocal --query /debug/pprof/goroutine\\?debug\\=2  ## Options  --name string service name --query string http query, example: '/debug/pprof/goroutine?debug=2'   ## Options inherited from parent commands -c, \u0026ndash;context string cdsctl context name -f, \u0026ndash;file string set configuration file \u0026ndash;insecure (SSL) This option explicitly allows curl to perform \u0026ldquo;insecure\u0026rdquo; SSL connections and transfers. -n, \u0026ndash;no-interactive Set to disable interaction with ctl \u0026ndash;verbose Enable verbose output\n ## SEE ALSO * [cdsctl admin services](/docs/components/cdsctl/admin/services/)\t- `Manage CDS services` "
},
{
	"uri": "/development/rest/requirement/",
	"title": "requirement",
	"tags": [],
	"description": "",
	"content": "GET /requirement/types/\u0026lt;type\u0026gt;    URL /requirement/types/\u0026lt;type\u0026gt;     Method GET   Permissions Auth: true   Code getRequirementTypeValuesHandler    "
},
{
	"uri": "/docs/components/cdsctl/admin/migration/reset/",
	"title": "reset",
	"tags": [],
	"description": "",
	"content": "cdsctl admin migration reset Reset a CDS migration, so basically it put the migration status to \u0026quot;TO DO\u0026quot; (USE WITH CAUTION)\nSynopsis Reset a CDS migration, so basically it put the migration status to \u0026quot;TO DO\u0026quot; (USE WITH CAUTION)\ncdsctl admin migration reset ID Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin migration\t- Manage CDS Migrations  "
},
{
	"uri": "/docs/components/cdsctl/reset-password/",
	"title": "reset-password",
	"tags": [],
	"description": "",
	"content": "cdsctl reset-password Reset CDS user password\nSynopsis Reset CDS user password\ncdsctl reset-password [flags] Options  -H, --api-url string Url to your CDS api. --email string Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl\t- CDS Command line utility cdsctl reset-password confirm\t-  "
},
{
	"uri": "/docs/components/cdsctl/admin/hooks/repository/event/restart/",
	"title": "restart",
	"tags": [],
	"description": "",
	"content": "cdsctl admin hooks repository event restart Restart an event\nSynopsis Restart an event\ncdsctl admin hooks repository event restart VCS-SERVER REPOSITORY EVENT-ID Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin hooks repository event\t- Manage repositories events  "
},
{
	"uri": "/docs/components/cdsctl/experimental/workflow/restart/",
	"title": "restart",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental workflow restart Restart workflow failed jobs\nSynopsis Restart workflow failed jobs\ncdsctl experimental workflow restart PROJ_KEY RUN_IDENTIFIER Examples cdsctl workflow restart \u0026lt;proj_key\u0026gt; \u0026lt;run_identifier\u0026gt; Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental workflow\t- CDS Experimental workflow commands  "
},
{
	"uri": "/docs/components/cdsctl/workflow/result/",
	"title": "result",
	"tags": [],
	"description": "",
	"content": "cdsctl workflow result Manage Workflow Run Result\nSynopsis Manage Workflow Run Result\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl workflow\t- Manage CDS workflow cdsctl workflow result download\t- download workflow run result cdsctl workflow result list\t- List workflow run result  "
},
{
	"uri": "/docs/components/cdsctl/group/revoke/",
	"title": "revoke",
	"tags": [],
	"description": "",
	"content": "cdsctl group revoke Revoke a CDS group in a project or workflow\nSynopsis Revoke a CDS group in a project or workflow\ncdsctl group revoke [ PROJECT-KEY ] GROUP-NAME [flags] Options  -w, --workflow string Workflow name Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl group\t- Manage CDS group  "
},
{
	"uri": "/about/roadmap/",
	"title": "Roadmap",
	"tags": [],
	"description": "",
	"content": "See https://github.com/ovh/cds/blob/master/ROADMAP.md\n"
},
{
	"uri": "/docs/components/cdsctl/admin/database/roll-encrypted-data/",
	"title": "roll-encrypted-data",
	"tags": [],
	"description": "",
	"content": "cdsctl admin database roll-encrypted-data Roll a encrypted data in database\nSynopsis Roll a encrypted data in database\ncdsctl admin database roll-encrypted-data SERVICE ENTITY ... [flags] Options  --index string Resume from a specific index (only available for one entity) Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin database\t- Manage CDS Database  "
},
{
	"uri": "/docs/components/cdsctl/admin/database/roll-signed-data/",
	"title": "roll-signed-data",
	"tags": [],
	"description": "",
	"content": "cdsctl admin database roll-signed-data Roll a signed data in database\nSynopsis Roll a signed data in database\ncdsctl admin database roll-signed-data SERVICE ENTITY ... [flags] Options  --index string Resume from a specific index (only available for one entity) Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin database\t- Manage CDS Database  "
},
{
	"uri": "/docs/components/cdsctl/experimental/workflow/jobs/run/",
	"title": "run",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental workflow jobs run Start a job\nSynopsis Start a job\ncdsctl experimental workflow jobs run PROJ_KEY RUN_IDENTIFIER JOB_IDENTIFIER [flags] Examples cdsctl workflow run \u0026lt;proj_key\u0026gt; \u0026lt;run_identifier\u0026gt; \u0026lt;job_identifier\u0026gt; Options  --data string (default \u0026quot;{}\u0026quot;) Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental workflow jobs\t- CDS Experimental workflow job commands  "
},
{
	"uri": "/docs/components/cdsctl/experimental/workflow/run/",
	"title": "run",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental workflow run Start a new workflow\nSynopsis Start a new workflow\ncdsctl experimental workflow run PROJ_KEY VCS_IDENTIFIER REPO_IDENTIFIER WORKFLOW_NAME [flags] Examples cdsctl workflow run \u0026lt;proj_key\u0026gt; \u0026lt;vcs_identifier\u0026gt; \u0026lt;repo_identifier\u0026gt; \u0026lt;workflow_name\u0026gt; Options  --branch string --commit string --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -q, --quiet Only display object's key --tag string --verbose Display all object fields --workflow-branch string --workflow-tag string Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl experimental workflow\t- CDS Experimental workflow commands  "
},
{
	"uri": "/docs/components/cdsctl/workflow/run/",
	"title": "run",
	"tags": [],
	"description": "",
	"content": "cdsctl workflow run Run a CDS workflow\nSynopsis Run a CDS workflow\ncdsctl workflow run [ PROJECT-KEY WORKFLOW-NAME ] [flags] Options  -d, --data string Run the workflow with payload data -i, --interactive Follow the workflow run in an interactive terminal user interface --node-name string Node Name to launch; Flag run-number is mandatory -o, --open-web-browser Open web browser on the workflow run -p, --parameter strings Run the workflow with pipeline parameter --run-number string Existing Workflow RUN Number -s, --sync Synchronise your pipelines with your last editions. Must be used with flag run-number Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl workflow\t- Manage CDS workflow  "
},
{
	"uri": "/docs/components/cdsctl/workflow/run-delete/",
	"title": "run-delete",
	"tags": [],
	"description": "",
	"content": "cdsctl workflow run-delete Delete a workflow run\nSynopsis Delete a workflow run\ncdsctl workflow run-delete [ PROJECT-KEY WORKFLOW-NAME ] RUN-NUMBER ... [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl workflow\t- Manage CDS workflow  "
},
{
	"uri": "/docs/components/worker/run-result/",
	"title": "run-result",
	"tags": [],
	"description": "",
	"content": "worker run-result worker run-result\nSynopsis Inside a job, manage run result\nSEE ALSO  worker\t- CDS Worker worker run-result add\t- worker run-result add  "
},
{
	"uri": "/docs/actions/builtin-script/",
	"title": "Script",
	"tags": [],
	"description": "",
	"content": "Script is a builtin action, you can\u0026rsquo;t modify it.\nThis action executes a given script with a given interpreter.\nParameters  script: Content of your script. You can put #!/bin/bash, or #!/bin/perl at first line. Make sure that the binary used is in the pre-requisites of action.  Requirements No Requirement\nYAML example Example of a pipeline using Script action:\nversion: v1.0 name: Pipeline1 stages: - Stage1 jobs: - job: Job1 stage: Stage1 steps: - script: - \u0026#39;#!/bin/sh\u0026#39; - echo \u0026#34;{{.cds.application}}\u0026#34; Using CDS variables in a script You can use CDS Variables in a step script.\nUsing CDS keys in a script You can use CDS SSH keys and PGP keys in a step script with the worker key command. Just use worker key install proj-mykey and it will install the SSH/PGP environment and private SSH/PGP key of your key in your project named mykey.\nThe command worker key install proj-mykey will return the path where the private key is stored. In that way you can save this value in a variable and use it for a ssh command like this:\nPKEY=`worker key install proj-mykey` ssh -i $PKEY myuser@myhost echo \u0026#34;test\u0026#34; #PKEY only works with SSH key Pay attention, to use a PGP key, please add in your pipeline requirements the binary named gpg.\nUsing worker CLI in a script You can use worker CLI to make different actions\n worker artifacts worker download worker export worker tag worker cache worker tmpl worker key  Example  Job Configuration, a step with perl, another with bash   Launch pipeline, check logs  Notes Make sure that the binary used is in the pre-requisites of the action.\nIf you use a shebang bash, sh, zsh or ksh, CDS will return a failure on your step if an executed command fails.\nIf you want to control command\u0026rsquo;s exit code, you have to add\nset +e Below is an example of a step that will fail at the first line:\nwhich a-unknown-binary # Step will fail here, lines below won\u0026#39;t be executed if [ $? -ne 0 ]; then echo \u0026#34;binary a-unknown-binary does not exists\u0026#34;; # this won\u0026#39;t be displayed exit 1 fi; exit 0 If you want to display an error message before exiting, you should rather use:\nset +e which a-unknown-binary if [ $? -ne 0 ]; then echo \u0026#34;binary a-unknown-binary does not exists\u0026#34;; # this will be displayed exit 1 fi; exit 0 "
},
{
	"uri": "/docs/actions/script/",
	"title": "script",
	"tags": [],
	"description": "",
	"content": "This action execute a script\nParameters  content: The script to execute  "
},
{
	"uri": "/development/sdk/golang/",
	"title": "SDK Golang",
	"tags": [],
	"description": "",
	"content": "How to use it? You have to initialize a cdsclient:\nclient := cdsclient.New(cdsclient.Config{ Host: host, }) res, err := client.AuthConsumerSignin(sdk.ConsumerBuiltin, sdk.AuthConsumerSigninRequest{ \u0026#34;token\u0026#34;: \u0026#34;\u0026lt;signin-token-value\u0026gt;\u0026#34;, }) client = cdsclient.New(cdsclient.Config{ Host: host, SessionToken: res.Token, }) and then, you can use it:\n// list workers workers, err := client.WorkerList() // list users users, err := client.UserList() // list workflow runs runs, err := client.WorkflowRunList(...) Go on https://godoc.org/github.com/ovh/cds/sdk/cdsclient to see all available funcs.\nExample  Create a file main.go with this content:  package main import ( \u0026#34;flag\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/ovh/cds/sdk/cdsclient\u0026#34; \u0026#34;github.com/ovh/cds/sdk\u0026#34; ) var host, token string func init() { flag.StringVar(\u0026amp;host, \u0026#34;api\u0026#34;, \u0026#34;http://localhost:8081\u0026#34;, \u0026#34;CDS API URL, ex: http://localhost:8081\u0026#34;) flag.StringVar(\u0026amp;token, \u0026#34;token\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;CDS signin token\u0026#34;) } func main() { flag.Parse() client := cdsclient.New(cdsclient.Config{ Host: host, }) res, err := client.AuthConsumerSignin(sdk.ConsumerBuiltin, sdk.AuthConsumerSigninRequest{ \u0026#34;token\u0026#34;: token, }) if err != nil { fmt.Fprintf(os.Stderr, \u0026#34;Error while signin: %v\u0026#34;, err) os.Exit(1) } client = cdsclient.New(cdsclient.Config{ Host: host, SessionToken: res.Token, }) workers, err := client.WorkerList() if err != nil { fmt.Fprintf(os.Stderr, \u0026#34;Error while getting workers: %v\u0026#34;, err) os.Exit(1) } if len(workers) == 0 { fmt.Println(\u0026#34;\u0026gt; No worker\u0026#34;) } else { fmt.Println(\u0026#34;Current Workers:\u0026#34;) for _, w := range workers { fmt.Printf(\u0026#34;\u0026gt; %s\\n\u0026#34;, w.Name) } } }  Build \u0026amp; run it:  go run main.go --token xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx --api http://localhost:8081 "
},
{
	"uri": "/development/rest/services/",
	"title": "services",
	"tags": [],
	"description": "",
	"content": "GET /services/\u0026lt;type\u0026gt;    URL /services/\u0026lt;type\u0026gt;     Method GET   Permissions Auth: true   Scopes Service   Code getServiceHandler    POST /services/heartbeat    URL /services/heartbeat     Method POST   Permissions Auth: true   Scopes Service   Code postServiceHearbeatHandler    "
},
{
	"uri": "/docs/components/cdsctl/admin/services/",
	"title": "services",
	"tags": [],
	"description": "",
	"content": "cdsctl admin services Manage CDS services\nSynopsis Manage CDS services\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin\t- Manage CDS (admin only) cdsctl admin services delete\t- Delete a CDS service from registered service cdsctl admin services list\t- List CDS services cdsctl admin services request\t- request GET on a CDS service cdsctl admin services status\t- Status CDS services  "
},
{
	"uri": "/docs/components/cdsctl/session/",
	"title": "session",
	"tags": [],
	"description": "",
	"content": "cdsctl session Manage CDS auth sessions\nSynopsis Manage CDS auth sessions\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl\t- CDS Command line utility cdsctl session delete\t- Delete an auth session cdsctl session list\t- List your auth sessions for given user  "
},
{
	"uri": "/docs/components/cdsctl/workflow/advanced/number/set/",
	"title": "set",
	"tags": [],
	"description": "",
	"content": "cdsctl workflow advanced number set Set a Workflow Run Number\nSynopsis Set a Workflow Run Number\ncdsctl workflow advanced number set [ PROJECT-KEY WORKFLOW-NAME ] NUMBER Examples cdsctl workflow advanced number set MYPROJECT my-workflow 22 Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl workflow advanced number\t- Manage Workflow Run Number  "
},
{
	"uri": "/docs/components/cdsctl/context/set-current/",
	"title": "set-current",
	"tags": [],
	"description": "",
	"content": "cdsctl context set-current Set the current context\nSynopsis Set the current context\ncdsctl context set-current NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl context\t- Manage cdsctl config file  "
},
{
	"uri": "/docs/components/cdsctl/admin/users/set-organization/",
	"title": "set-organization",
	"tags": [],
	"description": "",
	"content": "cdsctl admin users set-organization Set organization for given user\nSynopsis Set organization for given user\ncdsctl admin users set-organization USERNAME ORGANIZATION Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin users\t- Manage CDS users  "
},
{
	"uri": "/docs/components/worker/set-version/",
	"title": "set-version",
	"tags": [],
	"description": "",
	"content": "worker set-version Override {{.cds.version}} value with given string. This value should be unique for the workflow and can't be changed when set.\nSynopsis Override {{.cds.version}} value with given string. This value should be unique for the workflow and can't be changed when set.\nworker set-version SEE ALSO  worker\t- CDS Worker  "
},
{
	"uri": "/docs/components/cdsctl/shell/",
	"title": "shell",
	"tags": [],
	"description": "",
	"content": "cdsctl shell cdsctl interactive shell\nSynopsis CDS Shell Mode. default commands:\n cd: reset current position. cd : go to an object. Try cd /project/ and tabulation to autocomplete find : find a project / application / workflow. not case sensitive help: display this help ls: display current list, quiet format ll: display current list mode: display current mode. Choose mode with \u0026ldquo;mode vi\u0026rdquo; ou \u0026ldquo;mode emacs\u0026rdquo; open: open CDS WebUI with current context version: same as cdsctl version command  Other commands are available depending on your position. Example, run interactively a workflow:\ncd /project/MY_PRJ_KEY/workflow/MY_WF run -i  \n\ncdsctl shell Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl\t- CDS Command line utility  "
},
{
	"uri": "/docs/components/cdsctl/action/builtin/show/",
	"title": "show",
	"tags": [],
	"description": "",
	"content": "cdsctl action builtin show Show a CDS builtin action\nSynopsis Show a CDS builtin action\ncdsctl action builtin show ACTION-NAME [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl action builtin\t- Manage CDS builtin action  "
},
{
	"uri": "/docs/components/cdsctl/action/show/",
	"title": "show",
	"tags": [],
	"description": "",
	"content": "cdsctl action show Show a CDS action\nSynopsis Show a CDS action\ncdsctl action show ACTION-PATH [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl action\t- Manage CDS action  "
},
{
	"uri": "/docs/components/cdsctl/admin/hooks/repository/event/show/",
	"title": "show",
	"tags": [],
	"description": "",
	"content": "cdsctl admin hooks repository event show Get event\nSynopsis Get event\ncdsctl admin hooks repository event show VCS-SERVER REPOSITORY EVENT-ID [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl admin hooks repository event\t- Manage repositories events  "
},
{
	"uri": "/docs/components/cdsctl/admin/integration-model/show/",
	"title": "show",
	"tags": [],
	"description": "",
	"content": "cdsctl admin integration-model show Show details of a CDS Integration model\nSynopsis Show details of a CDS Integration model\ncdsctl admin integration-model show NAME [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl admin integration-model\t- Manage CDS Integration models  "
},
{
	"uri": "/docs/components/cdsctl/application/show/",
	"title": "show",
	"tags": [],
	"description": "",
	"content": "cdsctl application show Show a CDS application\nSynopsis Show a CDS application\ncdsctl application show [ PROJECT-KEY APPLICATION-NAME ] [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl application\t- Manage CDS application  "
},
{
	"uri": "/docs/components/cdsctl/application/variable/show/",
	"title": "show",
	"tags": [],
	"description": "",
	"content": "cdsctl application variable show Show a CDS application variable\nSynopsis Show a CDS application variable\ncdsctl application variable show [ PROJECT-KEY APPLICATION-NAME ] VARIABLE-NAME [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl application variable\t- Manage CDS application variables  "
},
{
	"uri": "/docs/components/cdsctl/environment/variable/show/",
	"title": "show",
	"tags": [],
	"description": "",
	"content": "cdsctl environment variable show Show a CDS environment variable\nSynopsis Show a CDS environment variable\ncdsctl environment variable show [ PROJECT-KEY ] ENV-NAME VARIABLE-NAME [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl environment variable\t- Manage CDS environment variables  "
},
{
	"uri": "/docs/components/cdsctl/experimental/hatchery/show/",
	"title": "show",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental hatchery show Get an hatchery by its identifier\nSynopsis Get an hatchery by its identifier\ncdsctl experimental hatchery show HATCHERYIDENTIFIER [flags] Examples cdsctl hatchery show \u0026lt;hatchery_identifier\u0026gt; Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl experimental hatchery\t- CDS Experimental hatchery commands  "
},
{
	"uri": "/docs/components/cdsctl/experimental/organization/show/",
	"title": "show",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental organization show Get an organization by its identifier\nSynopsis Get an organization by its identifier\ncdsctl experimental organization show ORGANIZATIONIDENTIFIER [flags] Examples cdsctl organization show \u0026lt;organization_identifier\u0026gt; Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl experimental organization\t- CDS Experimental organization commands  "
},
{
	"uri": "/docs/components/cdsctl/experimental/project/analysis/show/",
	"title": "show",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental project analysis show Get the given analysis\nSynopsis Get the given analysis\ncdsctl experimental project analysis show [ PROJECT-KEY ] VCS-NAME REPOSITORY-NAME ANALYSIS-ID Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental project analysis\t- Manage repository analysis  "
},
{
	"uri": "/docs/components/cdsctl/experimental/project/variableset/item/show/",
	"title": "show",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental project variableset item show Get the given variable set item\nSynopsis Get the given variable set item\ncdsctl experimental project variableset item show [ PROJECT-KEY ] VARIABLESET-NAME ITEM-NAME [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl experimental project variableset item\t- Manage item on a CDS project Variable Set  "
},
{
	"uri": "/docs/components/cdsctl/experimental/project/variableset/show/",
	"title": "show",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental project variableset show Get the given variable set\nSynopsis Get the given variable set\ncdsctl experimental project variableset show [ PROJECT-KEY ] NAME [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl experimental project variableset\t- Manage Variable Set on a CDS project  "
},
{
	"uri": "/docs/components/cdsctl/experimental/rbac/show/",
	"title": "show",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental rbac show GET a CDS permission\nSynopsis GET a CDS permission\ncdsctl experimental rbac show PERMISSIONIDENTIFIER [flags] Examples cdsctl rbac get \u0026lt;permission identifier\u0026gt; Options  --format string Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental rbac\t- CDS Experimental rbac commands  "
},
{
	"uri": "/docs/components/cdsctl/experimental/region/show/",
	"title": "show",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental region show Get an region by its identifier\nSynopsis Get an region by its identifier\ncdsctl experimental region show REGIONIDENTIFIER [flags] Examples cdsctl region show \u0026lt;region_identifier\u0026gt; Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl experimental region\t- CDS Experimental region commands  "
},
{
	"uri": "/docs/components/cdsctl/experimental/workflow/jobs/show/",
	"title": "show",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental workflow jobs show Get the workflow run job status\nSynopsis Get the workflow run job status\ncdsctl experimental workflow jobs show PROJ_KEY RUN_IDENTIFIER JOB_IDENTIFIER [flags] Examples cdsctl experimental workflow run jobs status \u0026lt;proj_key\u0026gt; \u0026lt;run_identifier\u0026gt; \u0026lt;job_identifier\u0026gt; Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl experimental workflow jobs\t- CDS Experimental workflow job commands  "
},
{
	"uri": "/docs/components/cdsctl/group/show/",
	"title": "show",
	"tags": [],
	"description": "",
	"content": "cdsctl group show Show a CDS group\nSynopsis Show a CDS group\ncdsctl group show GROUP-NAME [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl group\t- Manage CDS group  "
},
{
	"uri": "/docs/components/cdsctl/project/show/",
	"title": "show",
	"tags": [],
	"description": "",
	"content": "cdsctl project show Show a CDS project\nSynopsis Show a CDS project\ncdsctl project show [ PROJECT-KEY ] [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl project\t- Manage CDS project  "
},
{
	"uri": "/docs/components/cdsctl/project/variable/show/",
	"title": "show",
	"tags": [],
	"description": "",
	"content": "cdsctl project variable show Show a CDS project variable\nSynopsis Show a CDS project variable\ncdsctl project variable show [ PROJECT-KEY ] VARIABLE-NAME [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl project variable\t- Manage CDS project variables  "
},
{
	"uri": "/docs/components/cdsctl/user/gpg/show/",
	"title": "show",
	"tags": [],
	"description": "",
	"content": "cdsctl user gpg show Show Current CDS user gpg key\nSynopsis Show Current CDS user gpg key\ncdsctl user gpg show KEYID Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl user gpg\t- Manage CDS user gpg keys  "
},
{
	"uri": "/docs/components/cdsctl/user/show/",
	"title": "show",
	"tags": [],
	"description": "",
	"content": "cdsctl user show Show CDS user details\nSynopsis Show CDS user details\ncdsctl user show USERNAME [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl user\t- Manage CDS user  "
},
{
	"uri": "/docs/components/cdsctl/worker/model/show/",
	"title": "show",
	"tags": [],
	"description": "",
	"content": "cdsctl worker model show Show a Worker Model\nSynopsis Show a Worker Model\ncdsctl worker model show WORKER-MODEL-PATH [flags] Examples cdsctl worker model show myGroup/myModel Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl worker model\t- Manage Worker Model  "
},
{
	"uri": "/docs/components/cdsctl/workflow/advanced/number/show/",
	"title": "show",
	"tags": [],
	"description": "",
	"content": "cdsctl workflow advanced number show Show a Workflow Run Number\nSynopsis Show a Workflow Run Number\ncdsctl workflow advanced number show [ PROJECT-KEY WORKFLOW-NAME ] [flags] Examples cdsctl workflow advanced number show MYPROJECT my-workflow Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl workflow advanced number\t- Manage Workflow Run Number  "
},
{
	"uri": "/docs/components/cdsctl/workflow/show/",
	"title": "show",
	"tags": [],
	"description": "",
	"content": "cdsctl workflow show Show a CDS workflow\nSynopsis Show a CDS workflow\ncdsctl workflow show [ PROJECT-KEY WORKFLOW-NAME ] [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl workflow\t- Manage CDS workflow  "
},
{
	"uri": "/docs/components/cdsctl/signup/",
	"title": "signup",
	"tags": [],
	"description": "",
	"content": "cdsctl signup Signup on CDS\nSynopsis Signup on CDS\ncdsctl signup [flags] Options  -H, --api-url string Url to your CDS api. --email string --fullname string --password string --username string Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl\t- CDS Command line utility cdsctl signup verify\t- Verify local CDS signup.  "
},
{
	"uri": "/docs/components/engine/download/sql/",
	"title": "sql",
	"tags": [],
	"description": "",
	"content": "engine download sql Download sql files from the latest release on GitHub\nSynopsis Download sql files from the latest release on GitHub\nengine download sql [flags] Examples engine download sql Options  --config string config file --remote-config string (optional) consul configuration store --remote-config-key string (optional) consul configuration store key (default \u0026quot;cds/config.api.toml\u0026quot;) SEE ALSO  engine download\t- Download binaries  "
},
{
	"uri": "/docs/components/cdsctl/admin/hooks/start/",
	"title": "start",
	"tags": [],
	"description": "",
	"content": "cdsctl admin hooks start Start a task\nSynopsis Start a task\ncdsctl admin hooks start UUID Examples cdsctl admin hooks start 5178ce1f-2f76-45c5-a203-58c10c3e2c73 Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin hooks\t- Manage CDS Hooks tasks  "
},
{
	"uri": "/docs/components/engine/start/",
	"title": "start",
	"tags": [],
	"description": "",
	"content": "engine start Start CDS\nSynopsis Start CDS Engine Services\nAPI This is the core component of CDS.\nHatcheries They are the components responsible for spawning workers. Supported integrations/orchestrators are:\n Local machine Openstack Docker Swarm Openstack Vsphere  Hooks This component operates CDS workflow hooks\nRepositories This component operates CDS workflow repositories\nVCS This component operates CDS VCS connectivity\nCDN This component operates CDS CDN to handle storage\nStart all of this with a single command:\n$ engine start [api] [cdn] [hatchery:local] [hatchery:openstack] [hatchery:swarm] [hatchery:vsphere] [elasticsearch] [hooks] [vcs] [repositories] [migrate] [ui]  All the services are using the same configuration file format.\nYou have to specify where the toml configuration is. It can be a local file, provided by consul or vault.\nYou can also use or override toml file with environment variable.\nSee $ engine config command for more details.\nengine start [flags] Options  --config string config file --remote-config string (optional) consul configuration store --remote-config-key string (optional) consul configuration store key (default \u0026quot;cds/config.api.toml\u0026quot;) --vault-addr string (optional) Vault address to fetch secrets from vault (example: https://vault.mydomain.net:8200) --vault-token string (optional) Vault token to fetch secrets from vault SEE ALSO  engine\t- CDS Engine  "
},
{
	"uri": "/docs/components/cdsctl/admin/hooks/startall/",
	"title": "startall",
	"tags": [],
	"description": "",
	"content": "cdsctl admin hooks startall Start all tasks\nSynopsis Start all tasks\ncdsctl admin hooks startall Examples cdsctl admin hooks startall Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin hooks\t- Manage CDS Hooks tasks  "
},
{
	"uri": "/docs/components/worker/run-result/add/static-file/",
	"title": "static-file",
	"tags": [],
	"description": "",
	"content": "worker run-result add static-file worker run-result add static-file \u0026lt;name\u0026gt; \u0026lt;remote_url\u0026gt;\nSynopsis Inside a job, add a run result of type static-file: Worker Command:\nworker run-result add static-file \u0026lt;name\u0026gt; \u0026lt;remote_url\u0026gt;  Example:\nworker run-result add static-file the-title https://the-remote-url/somewhere/index.html  worker run-result add static-file SEE ALSO  worker run-result add\t- worker run-result add  "
},
{
	"uri": "/docs/components/cdsctl/admin/cdn/cache/status/",
	"title": "status",
	"tags": [],
	"description": "",
	"content": "cdsctl admin cdn cache status display the status of the cache log\nSynopsis display the status of the cache log\ncdsctl admin cdn cache status [flags] Examples cdsctl admin cdn cache status Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl admin cdn cache\t- Manage CDS CDN Cache  "
},
{
	"uri": "/docs/components/cdsctl/admin/cdn/status/",
	"title": "status",
	"tags": [],
	"description": "",
	"content": "cdsctl admin cdn status display the status of cdn\nSynopsis display the status of cdn\ncdsctl admin cdn status [flags] Examples cdsctl admin cdn status Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl admin cdn\t- Manage CDS CDN uService  "
},
{
	"uri": "/docs/components/cdsctl/admin/repositories/status/",
	"title": "status",
	"tags": [],
	"description": "",
	"content": "cdsctl admin repositories status display the status of repositories\nSynopsis display the status of repositories\ncdsctl admin repositories status [flags] Examples cdsctl admin repositories status Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl admin repositories\t- Manage CDS repositories uService  "
},
{
	"uri": "/docs/components/cdsctl/admin/services/status/",
	"title": "status",
	"tags": [],
	"description": "",
	"content": "cdsctl admin services status Status CDS services\nSynopsis Status CDS services\ncdsctl admin services status [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) --name string Filter service by name -q, --quiet Only display object's key -t, --type string Filter service by type: api, hatchery, hook, repository, vcs --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl admin services\t- Manage CDS services  "
},
{
	"uri": "/docs/components/cdsctl/experimental/workflow/jobs/status/",
	"title": "status",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental workflow jobs status Get the workflow run jobs status\nSynopsis Get the workflow run jobs status\ncdsctl experimental workflow jobs status PROJ_KEY RUN_IDENTIFIER [flags] Examples cdsctl experimental workflow run jobs status \u0026lt;proj_key\u0026gt; \u0026lt;run_identifier\u0026gt; Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl experimental workflow jobs\t- CDS Experimental workflow job commands  "
},
{
	"uri": "/docs/components/cdsctl/experimental/workflow/status/",
	"title": "status",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental workflow status Get the workflow run status\nSynopsis Get the workflow run status\ncdsctl experimental workflow status PROJ_KEY RUN_IDENTIFIER [flags] Examples cdsctl experimental workflow status \u0026lt;proj_key\u0026gt; \u0026lt;run_identifier\u0026gt; Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl experimental workflow\t- CDS Experimental workflow commands  "
},
{
	"uri": "/docs/components/cdsctl/health/status/",
	"title": "status",
	"tags": [],
	"description": "",
	"content": "cdsctl health status Show CDS Status\nSynopsis Show CDS Status\ncdsctl health status [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl health\t- Check CDS health  "
},
{
	"uri": "/docs/components/cdsctl/workflow/status/",
	"title": "status",
	"tags": [],
	"description": "",
	"content": "cdsctl workflow status Check the status of the run\nSynopsis Check the status of the run\ncdsctl workflow status [ PROJECT-KEY WORKFLOW-NAME ] [RUN-NUMBER] [flags] Options  --commit string Specify the git commit of the run you want --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -q, --quiet Only display object's key --track Wait the workflow to be over --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl workflow\t- Manage CDS workflow  "
},
{
	"uri": "/docs/components/engine/database/status/",
	"title": "status",
	"tags": [],
	"description": "",
	"content": "engine database status Show current migration status\nSynopsis Show current migration status\nengine database status [flags] Options  --db-connect-timeout int Maximum wait for connection, in seconds (default 10) --db-host string DB Host (default \u0026quot;localhost\u0026quot;) --db-maxconn int DB Max connection (default 20) --db-name string DB Name (default \u0026quot;cds\u0026quot;) --db-password string DB Password --db-port int DB Port (default 5432) --db-role string DB Role --db-schema string DB Schema (default \u0026quot;public\u0026quot;) --db-sslmode string DB SSL Mode: require (default), verify-full, or disable (default \u0026quot;require\u0026quot;) --db-timeout int Statement timeout value in milliseconds (default 3000) --db-user string DB User (default \u0026quot;cds\u0026quot;) --migrate-dir string CDS SQL Migration directory (default \u0026quot;./engine/sql/api\u0026quot;) SEE ALSO  engine database\t- Manage CDS database  "
},
{
	"uri": "/docs/components/cdsctl/admin/hooks/stop/",
	"title": "stop",
	"tags": [],
	"description": "",
	"content": "cdsctl admin hooks stop Stop a task\nSynopsis Stop a task\ncdsctl admin hooks stop UUID Examples cdsctl admin hooks stop 5178ce1f-2f76-45c5-a203-58c10c3e2c73 Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin hooks\t- Manage CDS Hooks tasks  "
},
{
	"uri": "/docs/components/cdsctl/experimental/workflow/jobs/stop/",
	"title": "stop",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental workflow jobs stop Stop the workflow run job\nSynopsis Stop the workflow run job\ncdsctl experimental workflow jobs stop PROJ_KEY RUN_IDENTIFIER JOB_IDENTIFIER Examples cdsctl experimental workflow job stop \u0026lt;proj_key\u0026gt; \u0026lt;run_identifier\u0026gt; \u0026lt;job_identifier\u0026gt; Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental workflow jobs\t- CDS Experimental workflow job commands  "
},
{
	"uri": "/docs/components/cdsctl/experimental/workflow/stop/",
	"title": "stop",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental workflow stop Stop the workflow run\nSynopsis Stop the workflow run\ncdsctl experimental workflow stop PROJ_KEY RUN_IDENTIFIER Examples cdsctl experimental workflow stop \u0026lt;proj_key\u0026gt; \u0026lt;run_identifier\u0026gt; Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental workflow\t- CDS Experimental workflow commands  "
},
{
	"uri": "/docs/components/cdsctl/workflow/stop/",
	"title": "stop",
	"tags": [],
	"description": "",
	"content": "cdsctl workflow stop Stop a CDS workflow or a specific node name\nSynopsis Stop a CDS workflow or a specific node name\ncdsctl workflow stop [ PROJECT-KEY WORKFLOW-NAME ] [RUN-NUMBER] [NODE-NAME] Examples cdsctl workflow stop # Stop the workflow run for the current repo and the current hash cdsctl workflow stop MYPROJECT myworkflow 5 # To stop a workflow run on number 5 cdsctl workflow stop MYPROJECT myworkflow 5 compile # To stop a workflow node run on workflow run 5 Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl workflow\t- Manage CDS workflow  "
},
{
	"uri": "/docs/components/cdsctl/admin/hooks/stopall/",
	"title": "stopall",
	"tags": [],
	"description": "",
	"content": "cdsctl admin hooks stopall Stop all tasks\nSynopsis Stop all tasks\ncdsctl admin hooks stopall Examples cdsctl admin hooks stopall Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin hooks\t- Manage CDS Hooks tasks  "
},
{
	"uri": "/docs/components/cdsctl/queue/stopall/",
	"title": "stopall",
	"tags": [],
	"description": "",
	"content": "cdsctl queue stopall Stop all job from the queue\nSynopsis Stop all job from the queue\ncdsctl queue stopall [PROJECT-KEY] [WORKFLOW-NAME] [flags] Examples cdsctl queue stopall Options  --force if true, do not ask user before stopping all workflows Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl queue\t- CDS Queue  "
},
{
	"uri": "/docs/components/cdsctl/workflow/logs/stream/",
	"title": "stream",
	"tags": [],
	"description": "",
	"content": "cdsctl workflow logs stream Stream logs for a job.\nSynopsis Stream logs for a job.\ncdsctl workflow logs stream [ PROJECT-KEY WORKFLOW-NAME ] [RUN-NUMBER] Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl workflow logs\t- Manage CDS Workflow Run Logs  "
},
{
	"uri": "/development/rest/suggest/",
	"title": "suggest",
	"tags": [],
	"description": "",
	"content": "GET /suggest/variable/\u0026lt;project-key\u0026gt;    URL /suggest/variable/\u0026lt;project-key\u0026gt;     Method GET   Permissions Auth: true   Scopes Project   Code getVariablesHandler    "
},
{
	"uri": "/docs/components/cdsctl/admin/cdn/sync-buffer/",
	"title": "sync-buffer",
	"tags": [],
	"description": "",
	"content": "cdsctl admin cdn sync-buffer run synchronization of cdn buffer\nSynopsis run synchronization of cdn buffer\ncdsctl admin cdn sync-buffer Examples cdsctl admin cdn sync-buffer Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin cdn\t- Manage CDS CDN uService  "
},
{
	"uri": "/docs/components/worker/tag/",
	"title": "tag",
	"tags": [],
	"description": "",
	"content": "worker tag worker tag key=value key=value\nSynopsis On the workflow view, the sidebar on the left displays a select box to filter on CDS Tags.\nSo, what\u0026rsquo;s a tag? A tag is a CDS Variable, exported as a tag. There are default tags as git.branch, git.hash, tiggered_by and environment.\nInside a job, you can add a Tag with the worker command:\n# worker tag \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; worker tag tagKey=tagValue anotherTagKey=anotherTagValue  Tags are useful to add indication on the sidebar about the context of a Run.\nYou can select the tags displayed on the sidebar Workflow → Advanced → \u0026ldquo;Tags to display in the sidebar\u0026rdquo;.\nworker tag SEE ALSO  worker\t- CDS Worker  "
},
{
	"uri": "/development/rest/template/",
	"title": "template",
	"tags": [],
	"description": "",
	"content": "DELETE /template/\u0026lt;group-name\u0026gt;/\u0026lt;template-slug\u0026gt;/instance/\u0026lt;instance-id\u0026gt;    URL /template/\u0026lt;group-name\u0026gt;/\u0026lt;template-slug\u0026gt;/instance/\u0026lt;instance-id\u0026gt;     Method DELETE   Permissions Auth: true   Scopes Template   Code deleteTemplateInstanceHandler    DELETE /template/\u0026lt;group-name\u0026gt;/\u0026lt;template-slug\u0026gt;    URL /template/\u0026lt;group-name\u0026gt;/\u0026lt;template-slug\u0026gt;     Method DELETE   Permissions Auth: true   Scopes Template   Code deleteTemplateHandler    GET /template/\u0026lt;group-name\u0026gt;/\u0026lt;template-slug\u0026gt;/audit    URL /template/\u0026lt;group-name\u0026gt;/\u0026lt;template-slug\u0026gt;/audit     Method GET   Permissions Auth: true   Scopes Template   Code getTemplateAuditsHandler    GET /template/\u0026lt;group-name\u0026gt;/\u0026lt;template-slug\u0026gt;/bulk/\u0026lt;bulk-id\u0026gt;    URL /template/\u0026lt;group-name\u0026gt;/\u0026lt;template-slug\u0026gt;/bulk/\u0026lt;bulk-id\u0026gt;     Method GET   Permissions Auth: true   Scopes Template   Code getTemplateBulkHandler    GET /template/\u0026lt;group-name\u0026gt;/\u0026lt;template-slug\u0026gt;/instance    URL /template/\u0026lt;group-name\u0026gt;/\u0026lt;template-slug\u0026gt;/instance     Method GET   Permissions Auth: true   Scopes Template   Code getTemplateInstancesHandler    GET /template/\u0026lt;group-name\u0026gt;/\u0026lt;template-slug\u0026gt;/usage    URL /template/\u0026lt;group-name\u0026gt;/\u0026lt;template-slug\u0026gt;/usage     Method GET   Permissions Auth: true   Scopes Template   Code getTemplateUsageHandler    GET /template/\u0026lt;group-name\u0026gt;/\u0026lt;template-slug\u0026gt;    URL /template/\u0026lt;group-name\u0026gt;/\u0026lt;template-slug\u0026gt;     Method GET   Permissions Auth: true   Scopes Template   Code getTemplateHandler    GET /template    URL /template     Method GET   Permissions Auth: true   Scopes Template   Code getTemplatesHandler    POST /template/\u0026lt;group-name\u0026gt;/\u0026lt;template-slug\u0026gt;/apply    URL /template/\u0026lt;group-name\u0026gt;/\u0026lt;template-slug\u0026gt;/apply     Method POST   Permissions Auth: true   Scopes Template   Code postTemplateApplyHandler    POST /template/\u0026lt;group-name\u0026gt;/\u0026lt;template-slug\u0026gt;/bulk    URL /template/\u0026lt;group-name\u0026gt;/\u0026lt;template-slug\u0026gt;/bulk     Method POST   Permissions Auth: true   Scopes Template   Code postTemplateBulkHandler    POST /template/\u0026lt;group-name\u0026gt;/\u0026lt;template-slug\u0026gt;/pull    URL /template/\u0026lt;group-name\u0026gt;/\u0026lt;template-slug\u0026gt;/pull     Method POST   Permissions Auth: true   Scopes Template   Code postTemplatePullHandler    POST /template/push    URL /template/push     Method POST   Permissions Auth: true   Scopes Template   Code postTemplatePushHandler    POST /template    URL /template     Method POST   Permissions Auth: true   Scopes Template   Code postTemplateHandler    PUT /template/\u0026lt;group-name\u0026gt;/\u0026lt;template-slug\u0026gt;    URL /template/\u0026lt;group-name\u0026gt;/\u0026lt;template-slug\u0026gt;     Method PUT   Permissions Auth: true   Scopes Template   Code putTemplateHandler    "
},
{
	"uri": "/docs/components/cdsctl/template/",
	"title": "template",
	"tags": [],
	"description": "",
	"content": "cdsctl template Manage CDS workflow template\nSynopsis Manage CDS workflow template\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl\t- CDS Command line utility cdsctl template apply\t- Apply CDS workflow template cdsctl template bulk\t- Bulk apply CDS workflow template and push all given workflows cdsctl template delete\t- Delete a workflow template cdsctl template detach\t- Detach a workflow from template cdsctl template instances\t- Get instances for a CDS workflow template cdsctl template list\t- Get all available workflow template from CDS cdsctl template pull\t- Pull CDS workflow template cdsctl template push\t- Push CDS workflow template  "
},
{
	"uri": "/docs/components/worker/tmpl/",
	"title": "tmpl",
	"tags": [],
	"description": "",
	"content": "worker tmpl worker tmpl inputFile outputFile\nSynopsis Inside a step script (https://ovh.github.io/cds/docs/actions/builtin-script/), you can add a replace CDS variables with the real value into a file:\n# create a file cat \u0026lt;\u0026lt; EOF \u0026gt; myFile this a a line in the file, with a CDS variable {{.cds.version}} EOF # worker tmpl \u0026lt;input file\u0026gt; \u0026lt;output file\u0026gt; worker tmpl {{.cds.workspace}}/myFile {{.cds.workspace}}/outputFile  The file outputFile will contain the string:\nthis a a line in the file, with a CDS variable 2  if it\u0026rsquo;s the RUN n°2 of the current workflow.\nworker tmpl SEE ALSO  worker\t- CDS Worker  "
},
{
	"uri": "/docs/components/cdsctl/tools/",
	"title": "tools",
	"tags": [],
	"description": "",
	"content": "cdsctl tools Some tooling for CDS\nSynopsis Some tooling for CDS\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl\t- CDS Command line utility cdsctl tools yaml-schema\t- Generate and install CDS yaml schema for given IDE  "
},
{
	"uri": "/docs/components/cdsctl/experimental/project/analysis/trigger/",
	"title": "trigger",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental project analysis trigger Trigger an analysis on the given branch\nSynopsis Trigger an analysis on the given branch\ncdsctl experimental project analysis trigger [ PROJECT-KEY ] VCS-NAME REPOSITORY-NAME [flags] Options  --branch string --commit string --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --format string Output format: plain|json|yaml (default \u0026quot;plain\u0026quot;) -q, --quiet Only display object's key --tag string --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl experimental project analysis\t- Manage repository analysis  "
},
{
	"uri": "/development/rest/ui/",
	"title": "ui",
	"tags": [],
	"description": "",
	"content": "GET /ui/navbar    URL /ui/navbar     Method GET   Permissions Auth: true   Scopes User   Code getNavbarHandler    GET /ui/project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/overview    URL /ui/project/\u0026lt;project-key\u0026gt;/application/\u0026lt;application-name\u0026gt;/overview     Method GET   Permissions Auth: true   Scopes Project   Code getApplicationOverviewHandler    "
},
{
	"uri": "/docs/components/engine/download/ui/",
	"title": "ui",
	"tags": [],
	"description": "",
	"content": "engine download ui Download ui files from the latest release on GitHub\nSynopsis Download ui files from the latest release on GitHub\nengine download ui [flags] Examples engine download ui Options  --config string config file --remote-config string (optional) consul configuration store --remote-config-key string (optional) consul configuration store key (default \u0026quot;cds/config.api.toml\u0026quot;) SEE ALSO  engine download\t- Download binaries  "
},
{
	"uri": "/docs/components/cdsctl/admin/cdn/unit/",
	"title": "unit",
	"tags": [],
	"description": "",
	"content": "cdsctl admin cdn unit Manage CDS CDN unit\nSynopsis Manage CDS CDN unit\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin cdn\t- Manage CDS CDN uService cdsctl admin cdn unit delete\t- delete the given unit cdsctl admin cdn unit delete-items\t- mark item as delete for given unit cdsctl admin cdn unit list\t- list storage unit  "
},
{
	"uri": "/docs/components/cdsctl/admin/database/unlock/",
	"title": "unlock",
	"tags": [],
	"description": "",
	"content": "cdsctl admin database unlock Unlock a pending migration (Use with caution)\nSynopsis Unlock a pending migration (Use with caution)\ncdsctl admin database unlock SERVICE ID Examples  $ cdsctl admin database unlock api id-to-unlock $ cdsctl admin database unlock cdn id-to-unlock Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin database\t- Manage CDS Database  "
},
{
	"uri": "/docs/components/cdsctl/application/variable/update/",
	"title": "update",
	"tags": [],
	"description": "",
	"content": "cdsctl application variable update Update CDS application variable value\nSynopsis Update CDS application variable value\ncdsctl application variable update [ PROJECT-KEY APPLICATION-NAME ] VARIABLE-OLDNAME VARIABLE-NAME VARIABLE-TYPE VARIABLE-VALUE Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl application variable\t- Manage CDS application variables  "
},
{
	"uri": "/docs/components/cdsctl/environment/variable/update/",
	"title": "update",
	"tags": [],
	"description": "",
	"content": "cdsctl environment variable update Update CDS environment variable value\nSynopsis Update CDS environment variable value\ncdsctl environment variable update [ PROJECT-KEY ] ENV-NAME VARIABLE-OLDNAME VARIABLE-NAME VARIABLE-TYPE VARIABLE-VALUE Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl environment variable\t- Manage CDS environment variables  "
},
{
	"uri": "/docs/components/cdsctl/experimental/project/variableset/item/update/",
	"title": "update",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental project variableset item update Update an item inside a variable set\nSynopsis Update an item inside a variable set\ncdsctl experimental project variableset item update [ PROJECT-KEY ] VARIABLESET-NAME ITEM-NAME ITEM-VALUE Examples cdsctl exp project variableset item update MY-PROJECT MY-VARIABLESET-NAME ITEM-NAME ITEM-VALUE Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental project variableset item\t- Manage item on a CDS project Variable Set  "
},
{
	"uri": "/docs/components/cdsctl/project/variable/update/",
	"title": "update",
	"tags": [],
	"description": "",
	"content": "cdsctl project variable update Update CDS project variable value\nSynopsis Update CDS project variable value\ncdsctl project variable update [ PROJECT-KEY ] VARIABLE-OLDNAME VARIABLE-NAME VARIABLE-TYPE [VARIABLE-VALUE] [flags] Options  --stdin read the variable value from stdin Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl project variable\t- Manage CDS project variables  "
},
{
	"uri": "/docs/components/cdsctl/update/",
	"title": "update",
	"tags": [],
	"description": "",
	"content": "cdsctl update Update cdsctl from CDS API or from CDS Release\nSynopsis Update cdsctl from CDS API or from CDS Release\ncdsctl update [flags] Options  --from-github Update binary from latest github release Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl\t- CDS Command line utility  "
},
{
	"uri": "/docs/components/engine/update/",
	"title": "update",
	"tags": [],
	"description": "",
	"content": "engine update Update engine binary\nSynopsis Update engine binary\nengine update [flags] Examples engine update --from-github Options  --api string Update binary from a CDS Engine API --from-github Update binary from latest github release SEE ALSO  engine\t- CDS Engine  "
},
{
	"uri": "/docs/components/engine/database/upgrade/",
	"title": "upgrade",
	"tags": [],
	"description": "",
	"content": "engine database upgrade Upgrade schema\nSynopsis Migrates the database to the most recent version available.\nengine database upgrade [flags] Examples engine database upgrade --db-password=your-password --db-sslmode=disable --db-name=cds --db-schema=public --migrate-dir=./sql/api # If the directory --migrate-dir is not up to date with the current version, this # directory will be automatically updated with the release from https://github.com/ovh/cds/releases Options  --db-connect-timeout int Maximum wait for connection, in seconds (default 10) --db-host string DB Host (default \u0026quot;localhost\u0026quot;) --db-maxconn int DB Max connection (default 20) --db-name string DB Name (default \u0026quot;cds\u0026quot;) --db-password string DB Password --db-port int DB Port (default 5432) --db-role string DB Role --db-schema string DB Schema (default \u0026quot;public\u0026quot;) --db-sslmode string DB SSL Mode: require (default), verify-full, or disable (default \u0026quot;require\u0026quot;) --db-timeout int Statement timeout value in milliseconds (default 3000) --db-user string DB User (default \u0026quot;cds\u0026quot;) --dry-run Dry run upgrade --limit int Max number of migrations to apply (0 = unlimited) --migrate-dir string CDS SQL Migration directory (default \u0026quot;./engine/sql/api\u0026quot;) SEE ALSO  engine database\t- Manage CDS database  "
},
{
	"uri": "/docs/components/worker/upload/",
	"title": "upload",
	"tags": [],
	"description": "",
	"content": "worker upload worker upload {{.cds.workspace}}/fileToUpload\nSynopsis Inside a job, there are two ways to upload an artifact:\n with a step using action Upload Artifacts with a step script (https://ovh.github.io/cds/docs/actions/builtin-script/), using the worker command: worker upload \u0026lt;path\u0026gt;  worker upload --tag={{.cds.version}} {{.cds.workspace}}/files*.yml\nYou can use you storage integration: worker upload \u0026ndash;destination=\u0026ldquo;yourStorageIntegrationName\u0026rdquo;\nworker upload [flags] Options  --destination string optional. Your storage integration name --tag string Tag for artifact Upload - Tag is mandatory SEE ALSO  worker\t- CDS Worker  "
},
{
	"uri": "/docs/actions/uploadartifact/",
	"title": "uploadArtifact",
	"tags": [],
	"description": "",
	"content": "This uploads artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete.\nParameters   if-no-files-found: The desired behavior if no files are found using the provided path. Available Options: warn: Output a warning but do not fail the action error: Fail the action with an error message ignore: Do not output any warnings or errors, the action does not fail\n  path: A file, directory or wildcard pattern that describes what to upload.\n  type: Type a run result to upload. It can be generic or coverage\n  "
},
{
	"uri": "/docs/components/engine/uptodate/",
	"title": "uptodate",
	"tags": [],
	"description": "",
	"content": "engine uptodate check if engine is uptodate\nSynopsis check if engine is uptodate with latest release on github (\u0026ndash;from-github) or from an existing API.\nThis command exit 0 if current binary is uptodate.\nengine uptodate [flags] Examples engine uptodate --from-github Options  --api string Update binary from a CDS Engine API --from-github Update binary from latest github release SEE ALSO  engine\t- CDS Engine  "
},
{
	"uri": "/docs/components/cdsctl/action/usage/",
	"title": "usage",
	"tags": [],
	"description": "",
	"content": "cdsctl action usage CDS action usage\nSynopsis CDS action usage\ncdsctl action usage ACTION-PATH [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl action\t- Manage CDS action  "
},
{
	"uri": "/docs/components/cdsctl/application/usage/",
	"title": "usage",
	"tags": [],
	"description": "",
	"content": "cdsctl application usage CDS application usage\nSynopsis PATH: Path or URL of application\ncdsctl application usage [ PROJECT-KEY APPLICATION-NAME ] [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl application\t- Manage CDS application  "
},
{
	"uri": "/docs/components/cdsctl/pipeline/usage/",
	"title": "usage",
	"tags": [],
	"description": "",
	"content": "cdsctl pipeline usage CDS pipeline usage\nSynopsis PATH: Path or URL of pipeline\ncdsctl pipeline usage [ PROJECT-KEY ] PIPELINE-NAME [flags] Options  --fields string Only display specified object fields. 'empty' will display all fields, 'all' will display all object fields, 'field1,field2' to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default \u0026quot;table\u0026quot;) -q, --quiet Only display object's key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl SEE ALSO  cdsctl pipeline\t- Manage CDS pipeline  "
},
{
	"uri": "/development/rest/user/",
	"title": "user",
	"tags": [],
	"description": "",
	"content": "DELETE /user/\u0026lt;username\u0026gt;/auth/consumer/\u0026lt;consumer-id\u0026gt;    URL /user/\u0026lt;username\u0026gt;/auth/consumer/\u0026lt;consumer-id\u0026gt;     Method DELETE   Permissions Auth: true   Scopes AccessToken   Code deleteConsumerByUserHandler    DELETE /user/\u0026lt;username\u0026gt;/auth/session/\u0026lt;session-id\u0026gt;    URL /user/\u0026lt;username\u0026gt;/auth/session/\u0026lt;session-id\u0026gt;     Method DELETE   Permissions Auth: true   Scopes AccessToken   Code deleteSessionByUserHandler    DELETE /user/\u0026lt;username\u0026gt;    URL /user/\u0026lt;username\u0026gt;     Method DELETE   Permissions Auth: true   Scopes User   Code deleteUserHandler    GET /user/\u0026lt;username\u0026gt;/auth/consumer    URL /user/\u0026lt;username\u0026gt;/auth/consumer     Method GET   Permissions Auth: true   Scopes AccessToken   Code getConsumersByUserHandler    GET /user/\u0026lt;username\u0026gt;/auth/session    URL /user/\u0026lt;username\u0026gt;/auth/session     Method GET   Permissions Auth: true   Scopes AccessToken   Code getSessionsByUserHandler    GET /user/\u0026lt;username\u0026gt;/contact    URL /user/\u0026lt;username\u0026gt;/contact     Method GET   Permissions Auth: true   Scopes User   Code getUserContactsHandler    GET /user/\u0026lt;username\u0026gt;/group    URL /user/\u0026lt;username\u0026gt;/group     Method GET   Permissions Auth: true   Scopes User   Code getUserGroupsHandler    GET /user/\u0026lt;username\u0026gt;/link    URL /user/\u0026lt;username\u0026gt;/link     Method GET   Permissions Auth: true   Scopes User   Code getUserLinksHandler    GET /user/\u0026lt;username\u0026gt;    URL /user/\u0026lt;username\u0026gt;     Method GET   Permissions Auth: true   Scopes User   Code getUserHandler    GET /user/schema    URL /user/schema     Method GET   Permissions Auth: true   Scopes User   Code getUserJSONSchema    GET /user/timeline/filter    URL /user/timeline/filter     Method GET   Permissions Auth: true   Scopes User   Code getTimelineFilterHandler    GET /user/timeline    URL /user/timeline     Method GET   Permissions Auth: true   Scopes User   Code getTimelineHandler    GET /user    URL /user     Method GET   Permissions Auth: true   Scopes User   Code getUsersHandler    POST /user/\u0026lt;username\u0026gt;/auth/consumer/\u0026lt;consumer-id\u0026gt;/regen    URL /user/\u0026lt;username\u0026gt;/auth/consumer/\u0026lt;consumer-id\u0026gt;/regen     Method POST   Permissions Auth: true   Scopes AccessToken   Code postConsumerRegenByUserHandler    POST /user/\u0026lt;username\u0026gt;/auth/consumer    URL /user/\u0026lt;username\u0026gt;/auth/consumer     Method POST   Permissions Auth: true   Scopes AccessToken   Code postConsumerByUserHandler    POST /user/favorite    URL /user/favorite     Method POST   Permissions Auth: true   Scopes User   Code postUserFavoriteHandler    POST /user/timeline/filter    URL /user/timeline/filter     Method POST   Permissions Auth: true   Scopes User   Code postTimelineFilterHandler    PUT /user/\u0026lt;username\u0026gt;    URL /user/\u0026lt;username\u0026gt;     Method PUT   Permissions Auth: true   Scopes User   Code putUserHandler    "
},
{
	"uri": "/docs/components/cdsctl/user/",
	"title": "user",
	"tags": [],
	"description": "",
	"content": "cdsctl user Manage CDS user\nSynopsis Manage CDS user\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl\t- CDS Command line utility cdsctl user favorite\t- Display all the user favorites cdsctl user gpg\t- Manage CDS user gpg keys cdsctl user list\t- List CDS users cdsctl user me\t- Show Current CDS user details cdsctl user show\t- Show CDS user details  "
},
{
	"uri": "/docs/components/cdsctl/admin/organization/user-migrate/",
	"title": "user-migrate",
	"tags": [],
	"description": "",
	"content": "cdsctl admin organization user-migrate Associate an organization to all empty without it\nSynopsis Associate an organization to all empty without it\ncdsctl admin organization user-migrate ORGANIZATION-NAME Examples cdsctl admin organization user-migrate \u0026lt;organization-name\u0026gt; Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin organization\t- Manage CDS Organization  "
},
{
	"uri": "/docs/components/cdsctl/admin/users/",
	"title": "users",
	"tags": [],
	"description": "",
	"content": "cdsctl admin users Manage CDS users\nSynopsis Manage CDS users\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin\t- Manage CDS (admin only) cdsctl admin users rename\t- Rename a given user cdsctl admin users set-organization\t- Set organization for given user  "
},
{
	"uri": "/development/rest/variable/",
	"title": "variable",
	"tags": [],
	"description": "",
	"content": "GET /variable/type    URL /variable/type     Method GET   Permissions Auth: true   Code getVariableTypeHandler    "
},
{
	"uri": "/docs/components/cdsctl/application/variable/",
	"title": "variable",
	"tags": [],
	"description": "",
	"content": "cdsctl application variable Manage CDS application variables\nSynopsis Manage CDS application variables\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl application\t- Manage CDS application cdsctl application variable add\t- Add a new variable on application. variable type can be one of password, text, string, key, boolean, number, repository cdsctl application variable delete\t- Delete CDS application variable cdsctl application variable list\t- List CDS application variables cdsctl application variable show\t- Show a CDS application variable cdsctl application variable update\t- Update CDS application variable value  "
},
{
	"uri": "/docs/components/cdsctl/environment/variable/",
	"title": "variable",
	"tags": [],
	"description": "",
	"content": "cdsctl environment variable Manage CDS environment variables\nSynopsis Manage CDS environment variables\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl environment\t- Manage CDS environment cdsctl environment variable add\t- Add a new variable on environment. variable type can be one of password, text, string, key, boolean, number, repository cdsctl environment variable delete\t- Delete CDS environment variable cdsctl environment variable list\t- List CDS environment variables cdsctl environment variable show\t- Show a CDS environment variable cdsctl environment variable update\t- Update CDS environment variable value  "
},
{
	"uri": "/docs/components/cdsctl/project/variable/",
	"title": "variable",
	"tags": [],
	"description": "",
	"content": "cdsctl project variable Manage CDS project variables\nSynopsis Manage CDS project variables\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl project\t- Manage CDS project cdsctl project variable add\t- Add a new variable on project. Variable type can be one of password, text, string, key, boolean, number, repository cdsctl project variable delete\t- Delete CDS project variable cdsctl project variable list\t- List CDS project variables cdsctl project variable show\t- Show a CDS project variable cdsctl project variable update\t- Update CDS project variable value  "
},
{
	"uri": "/docs/components/cdsctl/experimental/project/variableset/",
	"title": "variableset",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental project variableset Manage Variable Set on a CDS project\nSynopsis Manage Variable Set on a CDS project\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental project\t- CDS Experimental project commands cdsctl experimental project variableset add\t- Create a new variableset inside the given project cdsctl experimental project variableset delete\t- Delete a variable set on a project cdsctl experimental project variableset item\t- Manage item on a CDS project Variable Set cdsctl experimental project variableset list\t- List all variable sets in the given project cdsctl experimental project variableset show\t- Get the given variable set  "
},
{
	"uri": "/docs/components/cdsctl/project/vcs/",
	"title": "vcs",
	"tags": [],
	"description": "",
	"content": "cdsctl project vcs Manage VCS on a CDS project\nSynopsis Manage VCS on a CDS project\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl project\t- Manage CDS project cdsctl project vcs delete\t- Delete a VCS configuration on a project cdsctl project vcs export\t- Export a VCS configuration from a project to stdout cdsctl project vcs import\t- Import a VCS configuration on a project from a yaml file cdsctl project vcs list\t- List VCS available on a project  "
},
{
	"uri": "/docs/components/cdsctl/signup/verify/",
	"title": "verify",
	"tags": [],
	"description": "",
	"content": "cdsctl signup verify Verify local CDS signup.\nSynopsis For admin signup INIT_TOKEN environment variable must be set.\ncdsctl signup verify TOKEN [flags] Options  -H, --api-url string Url to your CDS api. --env Display the commands to set up the environment for the cds client. Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl signup\t- Signup on CDS  "
},
{
	"uri": "/docs/components/cdsctl/version/",
	"title": "version",
	"tags": [],
	"description": "",
	"content": "cdsctl version show cdsctl version\nSynopsis show cdsctl version\ncdsctl version [flags] Options  --format string Specify out format (json or yaml) Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl\t- CDS Command line utility  "
},
{
	"uri": "/docs/components/engine/version/",
	"title": "version",
	"tags": [],
	"description": "",
	"content": "engine version Display CDS version\nSynopsis Display CDS version\nengine version SEE ALSO  engine\t- CDS Engine  "
},
{
	"uri": "/docs/components/worker/version/",
	"title": "version",
	"tags": [],
	"description": "",
	"content": "worker version Print the version of the worker binary\nSynopsis Print the version of the worker binary\nworker version SEE ALSO  worker\t- CDS Worker  "
},
{
	"uri": "/docs/integrations/vsphere/",
	"title": "vSphere",
	"tags": [],
	"description": "",
	"content": "CDS build using VMware vSphere infrastructure to spawn each CDS Workers inside dedicated VM.\nPre-requisites This hatchery spawns VM which obtains IP from DHCP. So first you have to create a DHCP server on your host with NAT if you want to access to the internet. In order to create you have multiple possibilities like create your own VM with a DHCP server configured or if you are comfortable with the VMware tools you can use the NSX system. This system will create DHCP gateway for you.\nAlso we recommend you to create a VM base that the hatchery will use to linked clone your new VM to execute your jobs. For example in our case we create different VM base with a minimal debian installed in different versions. In order to save your host resources we advice you to turn these VMs off.\nStart vSphere hatchery Generate a token:\n$ cdsctl consumer new me \\ --scopes=Hatchery,RunExecution,Service,WorkerModel \\ --name=\u0026#34;hatchery.vsphere\u0026#34; \\ --description=\u0026#34;Consumer token for vsphere hatchery\u0026#34; \\ --groups=\u0026#34;\u0026#34; \\ --no-interactive Builtin consumer successfully created, use the following token to sign in: xxxxxxxx.xxxxxxx.4Bd9XJMIWrfe8Lwb-Au68TKUqflPorY2Fmcuw5vIoUs5gQyCLuxxxxxxxxxxxxxx Edit the section hatchery.vsphere in the CDS Configuration file. The token have to be set on the key hatchery.vsphere.commonConfiguration.api.http.token.\nThis hatchery will now start worker of model \u0026lsquo;vsphere\u0026rsquo; on vSphere infrastructure.\nSetup a worker model See Tutorial\n"
},
{
	"uri": "/development/rest/worker/",
	"title": "worker",
	"tags": [],
	"description": "",
	"content": "DELETE /worker/model/\u0026lt;group-name\u0026gt;/\u0026lt;model-name\u0026gt;    URL /worker/model/\u0026lt;group-name\u0026gt;/\u0026lt;model-name\u0026gt;     Method DELETE   Permissions Auth: true   Scopes WorkerModel   Code deleteWorkerModelHandler    GET /worker/\u0026lt;name\u0026gt;    URL /worker/\u0026lt;name\u0026gt;     Method GET   Permissions Auth: true   Scopes Service   Code getWorkerHandler    GET /worker/model/\u0026lt;group-name\u0026gt;/\u0026lt;model-name\u0026gt;/export    URL /worker/model/\u0026lt;group-name\u0026gt;/\u0026lt;model-name\u0026gt;/export     Method GET   Permissions Auth: true   Scopes WorkerModel   Code getWorkerModelExportHandler    GET /worker/model/\u0026lt;group-name\u0026gt;/\u0026lt;model-name\u0026gt;/secret    URL /worker/model/\u0026lt;group-name\u0026gt;/\u0026lt;model-name\u0026gt;/secret     Method GET   Permissions Auth: true   Scopes WorkerModel   Code getWorkerModelSecretHandler    GET /worker/model/\u0026lt;group-name\u0026gt;/\u0026lt;model-name\u0026gt;/usage    URL /worker/model/\u0026lt;group-name\u0026gt;/\u0026lt;model-name\u0026gt;/usage     Method GET   Permissions Auth: true   Scopes WorkerModel   Code getWorkerModelUsageHandler    GET /worker/model/\u0026lt;group-name\u0026gt;/\u0026lt;model-name\u0026gt;    URL /worker/model/\u0026lt;group-name\u0026gt;/\u0026lt;model-name\u0026gt;     Method GET   Permissions Auth: true   Scopes WorkerModel   Code getWorkerModelHandler    GET /worker/model/capability/type    URL /worker/model/capability/type     Method GET   Permissions Auth: true   Scopes WorkerModel   Code getRequirementTypesHandler    GET /worker/model/enabled    URL /worker/model/enabled     Method GET   Permissions Auth: true   Scopes WorkerModel   Code getWorkerModelsEnabledHandler    GET /worker/model/pattern/\u0026lt;type\u0026gt;/\u0026lt;name\u0026gt;    URL /worker/model/pattern/\u0026lt;type\u0026gt;/\u0026lt;name\u0026gt;     Method GET   Permissions Auth: true   Scopes WorkerModel   Code getWorkerModelPatternHandler    GET /worker/model/pattern    URL /worker/model/pattern     Method GET   Permissions Auth: true   Scopes WorkerModel   Code getWorkerModelPatternsHandler    GET /worker/model/type    URL /worker/model/type     Method GET   Permissions Auth: true   Scopes WorkerModel   Code getWorkerModelTypesHandler    GET /worker/model    URL /worker/model     Method GET   Permissions Auth: true   Code getWorkerModelsHandler    GET /worker    URL /worker     Method GET   Permissions Auth: true   Scopes Hatchery   Code getWorkersHandler    POST /worker/\u0026lt;id\u0026gt;/disable    URL /worker/\u0026lt;id\u0026gt;/disable     Method POST   Permissions Auth: true   Scopes Hatchery   Code disableWorkerHandler    POST /worker/model    URL /worker/model     Method POST   Permissions Auth: true   Code postWorkerModelHandler    POST /worker/refresh    URL /worker/refresh     Method POST   Permissions Auth: true   Code postRefreshWorkerHandler    POST /worker/waiting    URL /worker/waiting     Method POST   Permissions Auth: true   Code workerWaitingHandler    PUT /worker/model/\u0026lt;group-name\u0026gt;/\u0026lt;model-name\u0026gt;/book    URL /worker/model/\u0026lt;group-name\u0026gt;/\u0026lt;model-name\u0026gt;/book     Method PUT   Permissions Auth: true   Scopes WorkerModel   Code putBookWorkerModelHandler    PUT /worker/model/\u0026lt;group-name\u0026gt;/\u0026lt;model-name\u0026gt;/error    URL /worker/model/\u0026lt;group-name\u0026gt;/\u0026lt;model-name\u0026gt;/error     Method PUT   Permissions Auth: true   Scopes WorkerModel   Code putSpawnErrorWorkerModelHandler    PUT /worker/model/\u0026lt;group-name\u0026gt;/\u0026lt;model-name\u0026gt;    URL /worker/model/\u0026lt;group-name\u0026gt;/\u0026lt;model-name\u0026gt;     Method PUT   Permissions Auth: true   Scopes WorkerModel   Code putWorkerModelHandler    import a worker model yml/json file    URL /worker/model/import     Method POST   Query Parameter force=true or false. If false and if the worker model already exists, raise an error   Permissions Auth: true   Scopes WorkerModel   Code postWorkerModelImportHandler    Description import a worker model yml/json file with cdsctl worker model import mywm.yml\n"
},
{
	"uri": "/docs/components/cdsctl/experimental/worker/",
	"title": "worker",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental worker CDS Experimental worker commands\nSynopsis CDS Experimental worker commands\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental\t- CDS Experimental commands cdsctl experimental worker list\t-  "
},
{
	"uri": "/docs/components/cdsctl/worker/",
	"title": "worker",
	"tags": [],
	"description": "",
	"content": "cdsctl worker Manage CDS worker\nSynopsis Manage CDS worker\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl\t- CDS Command line utility cdsctl worker disable\t- Disable CDS workers cdsctl worker list\t- List CDS workers cdsctl worker model\t- Manage Worker Model  "
},
{
	"uri": "/docs/components/worker/",
	"title": "worker",
	"tags": [],
	"description": "",
	"content": "worker CDS Worker\nSynopsis A pipeline is structured in sequential stages containing one or multiple concurrent jobs. A Job will be executed by a worker.\nThe worker provides some useful commands that can be used in a step, as worker upload..., worker download...``worker cache...\nOn Windows OS, theses commands can be accessed with worker.exe [cmd] syntax.\nworker SEE ALSO  worker artifacts\t- worker artifacts [--workflow=\u0026lt;workflow-name\u0026gt;] [--number=\u0026lt;run-number\u0026gt;] [--tag=\u0026lt;tag\u0026gt;] [--pattern=\u0026lt;pattern\u0026gt;] worker cache\t- worker check-secret\t- worker check-secret fileA fileB worker completion\t- Generate the autocompletion script for the specified shell worker download\t- worker download [--workflow=\u0026lt;workflow-name\u0026gt;] [--number=\u0026lt;run-number\u0026gt;] [--tag=\u0026lt;tag\u0026gt;] [--pattern=\u0026lt;pattern\u0026gt;] worker exit\t- worker exit worker export\t- worker export \u0026lt;varname\u0026gt; \u0026lt;value\u0026gt; worker junit-parser\t- worker junit-parser worker key\t- worker run-result\t- worker run-result worker set-version\t- Override {{.cds.version}} value with given string. This value should be unique for the workflow and can't be changed when set. worker tag\t- worker tag key=value key=value worker tmpl\t- worker tmpl inputFile outputFile worker upload\t- worker upload {{.cds.workspace}}/fileToUpload worker version\t- Print the version of the worker binary  "
},
{
	"uri": "/docs/components/cdsctl/project/integration/worker-hooks-export/",
	"title": "worker-hooks-export",
	"tags": [],
	"description": "",
	"content": "cdsctl project integration worker-hooks-export Export integration worker hook configuration\nSynopsis Export integration worker hook configuration\ncdsctl project integration worker-hooks-export [ PROJECT-KEY ] INTEGRATION Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl project integration\t- Manage CDS integrations  "
},
{
	"uri": "/docs/components/cdsctl/project/integration/worker-hooks-import/",
	"title": "worker-hooks-import",
	"tags": [],
	"description": "",
	"content": "cdsctl project integration worker-hooks-import Import integration worker hook configuration\nSynopsis Import integration worker hook configuration\ncdsctl project integration worker-hooks-import [ PROJECT-KEY ] INTEGRATION FILENAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl project integration\t- Manage CDS integrations  "
},
{
	"uri": "/docs/components/cdsctl/experimental/worker-model/",
	"title": "worker-model",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental worker-model CDS Experimental worker model commands\nSynopsis CDS Experimental worker model commands\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental\t- CDS Experimental commands cdsctl experimental worker-model list\t-  "
},
{
	"uri": "/docs/components/engine/download/workers/",
	"title": "workers",
	"tags": [],
	"description": "",
	"content": "engine download workers Download workers binaries from the latest release on GitHub\nSynopsis Download workers binaries from the latest release on GitHub\nYou can also indicate a specific os or architecture to not download all binaries available with flag \u0026ndash;os and \u0026ndash;arch\nengine download workers [flags] Examples engine download workers Options  --api string Update binary from a CDS Engine API --arch string Download only for this arch --config string config file --os string Download only for this os --remote-config string (optional) consul configuration store --remote-config-key string (optional) consul configuration store key (default \u0026quot;cds/config.api.toml\u0026quot;) SEE ALSO  engine download\t- Download binaries  "
},
{
	"uri": "/development/rest/workflow/",
	"title": "workflow",
	"tags": [],
	"description": "",
	"content": "GET /workflow/hook/executions    URL /workflow/hook/executions     Method GET   Permissions Auth: true   Scopes Hooks   Code getWorkflowHookExecutionsHandler    GET /workflow/hook/model/\u0026lt;model\u0026gt;    URL /workflow/hook/model/\u0026lt;model\u0026gt;     Method GET   Permissions Auth: true   Code getWorkflowHookModelHandler    GET /workflow/hook    URL /workflow/hook     Method GET   Permissions Auth: true   Scopes Hooks   Code getWorkflowHooksHandler    GET /workflow/outgoinghook/model    URL /workflow/outgoinghook/model     Method GET   Permissions Auth: true   Code getWorkflowOutgoingHookModelsHandler    GET /workflow/search    URL /workflow/search     Method GET   Permissions Auth: true   Scopes Project   Code getSearchWorkflowHandler    PUT /workflow/hook/model/\u0026lt;model\u0026gt;    URL /workflow/hook/model/\u0026lt;model\u0026gt;     Method PUT   Permissions Auth: true   Code authAdminMiddleware    "
},
{
	"uri": "/docs/components/cdsctl/admin/metadata/workflow/",
	"title": "workflow",
	"tags": [],
	"description": "",
	"content": "cdsctl admin metadata workflow Manage CDS Workflow Metadata\nSynopsis Manage CDS Workflow Metadata\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin metadata\t- Manage CDS Metadata cdsctl admin metadata workflow export\t- export CDS Workflow Metadata  "
},
{
	"uri": "/docs/components/cdsctl/experimental/workflow/",
	"title": "workflow",
	"tags": [],
	"description": "",
	"content": "cdsctl experimental workflow CDS Experimental workflow commands\nSynopsis CDS Experimental workflow commands\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental\t- CDS Experimental commands cdsctl experimental workflow history\t- Display the run history for the given workflow cdsctl experimental workflow info\t- List run informations cdsctl experimental workflow jobs\t- CDS Experimental workflow job commands cdsctl experimental workflow lint\t- Lint workflow files cdsctl experimental workflow logs\t- CDS Experimental workflow run jobs logs commands cdsctl experimental workflow restart\t- Restart workflow failed jobs cdsctl experimental workflow run\t- Start a new workflow cdsctl experimental workflow status\t- Get the workflow run status cdsctl experimental workflow stop\t- Stop the workflow run  "
},
{
	"uri": "/docs/components/cdsctl/workflow/",
	"title": "workflow",
	"tags": [],
	"description": "",
	"content": "cdsctl workflow Manage CDS workflow\nSynopsis Manage CDS workflow\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl\t- CDS Command line utility cdsctl workflow advanced\t- Manage Workflow Advanced cdsctl workflow applyTemplate\t- Apply CDS workflow template cdsctl workflow artifact\t- Manage Workflow Artifact cdsctl workflow ascode\t- Transform an existing workflow to an as code workflow cdsctl workflow export\t- Export a workflow cdsctl workflow favorite\t- Add or delete a CDS workflow to your personal bookmarks cdsctl workflow history\t- Display CDS workflow runs history cdsctl workflow import\t- Import a workflow cdsctl workflow init\t- Init a workflow cdsctl workflow label\t- Manage Workflow Label cdsctl workflow list\t- List CDS workflows cdsctl workflow logs\t- Manage CDS Workflow Run Logs cdsctl workflow pull\t- Pull a workflow cdsctl workflow push\t- Push a workflow cdsctl workflow result\t- Manage Workflow Run Result cdsctl workflow run\t- Run a CDS workflow cdsctl workflow run-delete\t- Delete a workflow run cdsctl workflow show\t- Show a CDS workflow cdsctl workflow status\t- Check the status of the run cdsctl workflow stop\t- Stop a CDS workflow or a specific node name  "
},
{
	"uri": "/docs/components/cdsctl/admin/workflows/",
	"title": "workflows",
	"tags": [],
	"description": "",
	"content": "cdsctl admin workflows Manage CDS workflows\nSynopsis Manage CDS workflows\nOptions inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin\t- Manage CDS (admin only) cdsctl admin workflows maxrun\t- Update the maximum number of workflow executions  "
},
{
	"uri": "/docs/components/cdsctl/preview/workflowv3-convert/",
	"title": "workflowv3-convert",
	"tags": [],
	"description": "",
	"content": "cdsctl preview workflowv3-convert Convert existing workflow to Workflow V3 files.\nSynopsis Convert existing workflow to Workflow V3 files.\ncdsctl preview workflowv3-convert [ PROJECT-KEY WORKFLOW-NAME ] [flags] Options  --format string Specify export format (json or yaml) (default \u0026quot;yaml\u0026quot;) --full Set the flag to export pipeline, application and environment content. Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl preview\t- CDS feature preview  "
},
{
	"uri": "/docs/components/cdsctl/preview/workflowv3-validate/",
	"title": "workflowv3-validate",
	"tags": [],
	"description": "",
	"content": "cdsctl preview workflowv3-validate Parse and validate given Workflow V3 files.\nSynopsis Parse and validate given Workflow V3 files.\ncdsctl preview workflowv3-validate [ PROJECT-KEY ] YAML-FILE ... [flags] Options  --silent Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl preview\t- CDS feature preview  "
},
{
	"uri": "/development/rest/ws/",
	"title": "ws",
	"tags": [],
	"description": "",
	"content": "GET /ws    URL /ws     Method GET   Permissions Auth: true   Code getWebsocketHandler    "
},
{
	"uri": "/docs/components/cdsctl/tools/yaml-schema/",
	"title": "yaml-schema",
	"tags": [],
	"description": "",
	"content": "cdsctl tools yaml-schema Generate and install CDS yaml schema for given IDE\nSynopsis Generate and install CDS yaml schema for given IDE\ncdsctl tools yaml-schema IDE-NAME Examples cdsctl tools yaml-schema vscode Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl tools\t- Some tooling for CDS  "
},
{
	"uri": "/docs/components/cdsctl/completion/zsh/",
	"title": "zsh",
	"tags": [],
	"description": "",
	"content": "cdsctl completion zsh Generate the autocompletion script for zsh\nSynopsis Generate the autocompletion script for the zsh shell.\nIf shell completion is not already enabled in your environment you will need to enable it. You can execute the following once:\necho \u0026quot;autoload -U compinit; compinit\u0026quot; \u0026gt;\u0026gt; ~/.zshrc  To load completions in your current shell session:\nsource \u0026lt;(cdsctl completion zsh)  To load completions for every new session, execute once:\nLinux: cdsctl completion zsh \u0026gt; \u0026quot;${fpath[1]}/_cdsctl\u0026quot;  macOS: cdsctl completion zsh \u0026gt; $(brew --prefix)/share/zsh/site-functions/_cdsctl  You will need to start a new shell for this setup to take effect.\ncdsctl completion zsh [flags] Options  --no-descriptions disable completion descriptions Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform \u0026quot;insecure\u0026quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl completion\t- Generate the autocompletion script for the specified shell  "
},
{
	"uri": "/docs/components/engine/completion/zsh/",
	"title": "zsh",
	"tags": [],
	"description": "",
	"content": "engine completion zsh Generate the autocompletion script for zsh\nSynopsis Generate the autocompletion script for the zsh shell.\nIf shell completion is not already enabled in your environment you will need to enable it. You can execute the following once:\necho \u0026quot;autoload -U compinit; compinit\u0026quot; \u0026gt;\u0026gt; ~/.zshrc  To load completions in your current shell session:\nsource \u0026lt;(engine completion zsh)  To load completions for every new session, execute once:\nLinux: engine completion zsh \u0026gt; \u0026quot;${fpath[1]}/_engine\u0026quot;  macOS: engine completion zsh \u0026gt; $(brew --prefix)/share/zsh/site-functions/_engine  You will need to start a new shell for this setup to take effect.\nengine completion zsh [flags] Options  --no-descriptions disable completion descriptions SEE ALSO  engine completion\t- Generate the autocompletion script for the specified shell  "
},
{
	"uri": "/docs/components/worker/completion/zsh/",
	"title": "zsh",
	"tags": [],
	"description": "",
	"content": "worker completion zsh Generate the autocompletion script for zsh\nSynopsis Generate the autocompletion script for the zsh shell.\nIf shell completion is not already enabled in your environment you will need to enable it. You can execute the following once:\necho \u0026quot;autoload -U compinit; compinit\u0026quot; \u0026gt;\u0026gt; ~/.zshrc  To load completions in your current shell session:\nsource \u0026lt;(worker completion zsh)  To load completions for every new session, execute once:\nLinux: worker completion zsh \u0026gt; \u0026quot;${fpath[1]}/_worker\u0026quot;  macOS: worker completion zsh \u0026gt; $(brew --prefix)/share/zsh/site-functions/_worker  You will need to start a new shell for this setup to take effect.\nworker completion zsh [flags] Options  --no-descriptions disable completion descriptions SEE ALSO  worker completion\t- Generate the autocompletion script for the specified shell  "
}]
