<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Configuration files on CDS - Continuous Delivery Service</title>
    <link>/docs/concepts/files/</link>
    <description>Recent content in Configuration files on CDS - Continuous Delivery Service</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="/docs/concepts/files/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Workflow configuration file</title>
      <link>/docs/concepts/files/workflow-syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/files/workflow-syntax/</guid>
      <description>A CDS workflow file only contains the description of pipelines orchestration, hooks, run conditions, etc. Consider the following workflow which implements a basic two-stage workflow:
name: my-workflow workflow: build: pipeline: build application: my-application deploy: depends_on: - build when: - success pipeline: deploy application: my-application environment: my-production parameters: name: value one_at_a_time: true hooks: build: - type: RepositoryWebHook integrations: my-artifactory-integration-name: type: artifact_manager notifications: - type: email pipelines: - deploy settings: on_success: never recipients: - me@foo.</description>
    </item>
    
    <item>
      <title>Pipeline configuration file</title>
      <link>/docs/concepts/files/pipeline-syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/files/pipeline-syntax/</guid>
      <description>A CDS workflow file only contains the description of pipelines orchestration, hooks, run conditions, etc. Consider the following Pipeline which implements a basic two-stage continuous delivery pipeline:
version: v1.0 name: build parameters: param_name: type: string default: default_value stages: - Compile - Package jobs: - job: Build UI stage: Compile steps: - gitClone: branch: &amp;#39;{{.git.branch}}&amp;#39; commit: &amp;#39;{{.git.hash}}&amp;#39; directory: cds url: &amp;#39;{{.git.url}}&amp;#39; - script: - echo {{.cds.pip.param_name}}  - cd cds/ui - npm set registry https://registry.</description>
    </item>
    
    <item>
      <title>Worker Model configuration file</title>
      <link>/docs/concepts/files/worker_model-syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/files/worker_model-syntax/</guid>
      <description>Example:
name: go-official-1.17 group: shared.infra image: golang:1.17 description: official from https://hub.docker.com/_/golang/ type: docker pattern_name: basic_unix Import a worker model:
cdsctl worker model import ./go-official-1.17.yml or with a remote file:
cdsctl worker model import https://raw.githubusercontent.com/ovh/cds/v0.54.1/contrib/worker-models/go-official-1.17.yml   If you want to specify an image using a private registry or a private image, you need to fill credentials in field username and password to access your image. And if your image is not on docker hub but from a private registry, you need to fill the registry info (the registry api url, for example for docker hub it&amp;rsquo;s https://index.</description>
    </item>
    
    <item>
      <title>Action configuration file</title>
      <link>/docs/concepts/files/action-syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/files/action-syntax/</guid>
      <description>Hello World Action
version: v1.0 name: CDS_HelloWorld description: Hello World Action steps: - name: Initialization script: - echo &amp;#34;Hello World&amp;#34; With a real action CDS_SonarScanner: this action contains parameters with default values and some of them are advanced parameters. Two plugins are also used in the steps: plugin-download and plugin-archive
version: v1.0 name: CDS_SonarScanner description: Run Sonar analysis. You must have a file sonar-project.properties in your source directory. parameters: sonar-project.properties: type: text default: |-sonar.</description>
    </item>
    
    <item>
      <title>Application configuration file</title>
      <link>/docs/concepts/files/application-syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/files/application-syntax/</guid>
      <description>An Application allows you to enable some features of CDS within a workflow:
 Variables Keys VCS Deployment  The application configuration format is as following:
version: v1.0 name: my-application variables: artifact.name: type: string value: my-application docker.image: value: my-org/my-application docker.registry: value: hub.docker.com keys: app-mySSHKey: type: ssh repo: my-org/my-application vcs_server: github vcs_connection_type: ssh vcs_ssh_key: app-mySSHKey deployments: my-kubernetes-cluster: timeout: value: 180 namespace: my-namespace helm_chart: value: deploy/helm/ helm_values: type: deploy/helm/values.yaml helm_version: type: 2.12.2 Variables Define application scoped variables as a dictionary.</description>
    </item>
    
    <item>
      <title>Environment configuration file</title>
      <link>/docs/concepts/files/environment-syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/files/environment-syntax/</guid>
      <description>Definition An environment is a way to declare and manipulate sets of environment variables and attach them to pipelines within a workflow. It is also a way to organize your workflow and keep it clear and still readable.
Format name: MyEnvironment values: myBooleanVariable: type: boolean value: true myNumberVariable: type: number value: 1 mySecretVariable: type: password value: f1a2b3dd756e4db381d7a88631c67355 myStringVariable: value: myStringValue myTextVariable: type: text value: |This Is a multiline text value with a project variable inside {{.</description>
    </item>
    
  </channel>
</rss>
