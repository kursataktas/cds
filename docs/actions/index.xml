<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Actions on CDS - Continuous Delivery Service</title>
    <link>/docs/actions/</link>
    <description>Recent content in Actions on CDS - Continuous Delivery Service</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="/docs/actions/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Artifact Download</title>
      <link>/docs/actions/builtin-artifact-download/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/builtin-artifact-download/</guid>
      <description>Artifact Download is a builtin action, you can&amp;rsquo;t modify it.
This action can be used to retrieve an artifact previously uploaded by an Artifact Upload.
Parameters  path: Path where artifacts will be downloaded. pattern: (optional) Empty: download all files. Otherwise, enter regexp pattern to choose file: (fileA|fileB). tag: Artifact are uploaded with a tag, generally {{.cds.version}}.  Requirements No Requirement
YAML example Example of a pipeline using Artifact Download action:</description>
    </item>
    
    <item>
      <title>Artifact Upload</title>
      <link>/docs/actions/builtin-artifact-upload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/builtin-artifact-upload/</guid>
      <description>Artifact Upload is a builtin action, you can&amp;rsquo;t modify it.
This action can be used to upload artifacts in CDS. This is the recommended way to share files between pipelines or stages.
Parameters  destination: (optional) Destination of this artifact. Use the name of integration attached on your project. path: Path of file to upload, example: ./src/yourFile.json. tag: Artifact will be uploaded with a tag, generally {{.cds.version}}.  Requirements No Requirement</description>
    </item>
    
    <item>
      <title>artifactoryPromote</title>
      <link>/docs/actions/artifactorypromote/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/artifactorypromote/</guid>
      <description>Promote artifactory package from a repository to another
Parameters  artifacts: Artifact name or wilcard pattern. maturity: The maturity you want to promote in. properties: Properties to add on the promoted artifacts  </description>
    </item>
    
    <item>
      <title>artifactoryRelease</title>
      <link>/docs/actions/artifactoryrelease/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/artifactoryrelease/</guid>
      <description>Release artifactory package from a repository to another
Parameters  artifacts: Artifact name or wildcard pattern. maturity: The maturity you want to promote in. properties: Properties to add on the promoted artifacts releaseNotes: Notes associated to your Release.  </description>
    </item>
    
    <item>
      <title>checkout</title>
      <link>/docs/actions/checkout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/checkout/</guid>
      <description>This action execute a git checkout
Parameters  git-url: The repository url to clone path: Relative path under $CD_WORKSPACE to place the repository ref: The branch, tag to checkout sha: The commit sha to checkout ssh-key: The ssh-key used to fetch the repository submodules: Whether to checkout submodules: true to checkout submodules or recursive to recursively checkout submodules token: Token use for https authentication username: Username use for https authentication  </description>
    </item>
    
    <item>
      <title>CheckoutApplication</title>
      <link>/docs/actions/builtin-checkoutapplication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/builtin-checkoutapplication/</guid>
      <description>CheckoutApplication is a builtin action, you can&amp;rsquo;t modify it.
CDS Builtin Action. Checkout a repository into a new directory.
This action use the configuration from application vcs strategy to git clone the repository. The clone will be done with a depth of 50 and with submodules. If you want to modify theses options, you have to use gitClone action.
Parameters  directory: The name of a directory to clone into.  Requirements  git: type: binary Value: git  YAML example Example of a pipeline using CheckoutApplication action:</description>
    </item>
    
    <item>
      <title>Coverage</title>
      <link>/docs/actions/builtin-coverage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/builtin-coverage/</guid>
      <description>Coverage is a builtin action, you can&amp;rsquo;t modify it.
CDS Builtin Action. Upload you coverage file to CDS as a coverage run result.
Parameters  path: Path of the coverage report file.  Requirements No Requirement
YAML example Example of a pipeline using Coverage action:
version: v1.0 name: Pipeline1 stages: - Stage1 jobs: - job: Job1 stage: Stage1 steps: - coverage: path: ./coverage.xml </description>
    </item>
    
    <item>
      <title>debianPush</title>
      <link>/docs/actions/debianpush/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/debianpush/</guid>
      <description>This pushes Debian package on an artifactory debian repository.
Parameters  architectures: List of debian architectures (space separated) components: List of debian components (space separated) distributions: List of debian distributions (space separated) files: List of files (space separated) label: Fill the deb.release.label parameter origin: Fill the deb.release.origin parameter  </description>
    </item>
    
    <item>
      <title>DeployApplication</title>
      <link>/docs/actions/builtin-deployapplication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/builtin-deployapplication/</guid>
      <description>DeployApplication is a builtin action, you can&amp;rsquo;t modify it.
Deploy an application, useful only if you have a Deployment Plaftorm associated to your current application.
Parameters No Parameter
Requirements No Requirement
YAML example Example of a pipeline using DeployApplication action:
version: v1.0 name: Pipeline1 stages: - Stage1 jobs: - job: Job1 stage: Stage1 steps: - deploy: &amp;#39;{{.cds.application}}&amp;#39; Example  Add a deployment platform on your application.   Create a workflow, add a pipeline and an application linked to a platform.</description>
    </item>
    
    <item>
      <title>deployArsenal</title>
      <link>/docs/actions/deployarsenal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/deployarsenal/</guid>
      <description>This action trigger an arsenal deployment and retrieve the final status of it.
Parameters  alternative-config: Alternative configuration to push with the deployment retry-delay: Time between try of getting the deployment final status retry-max: Maximum number of retry to get the deployment status token: Deployment token version: The version to deploy  </description>
    </item>
    
    <item>
      <title>dockerPush</title>
      <link>/docs/actions/dockerpush/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/dockerpush/</guid>
      <description>This pushes Docker image
Parameters  image: Image name registry: Docker registry to push on.  This parameter can be empty when an Artifactory integration is set up.
 registryAuth: Docker base64url-encoded auth configuration.  See docker authentication section for more details: https://docs.docker.com/engine/api/v1.41/#section/Authentication.
This parameter can be empty when an Artifactory integration is set up.
 tags: The tags to associate with the image on the registry.  This parameter can be empty if you want to keep the same tag.</description>
    </item>
    
    <item>
      <title>downloadArtifact</title>
      <link>/docs/actions/downloadartifact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/downloadartifact/</guid>
      <description>Download a build artifact that was previously uploaded in the workflow by the upload-artifact action.
Parameters   name: Artifact name or wilcard pattern. If empty, all the artifacts identifed as &amp;ldquo;generic&amp;rdquo; result previously uploaded in the workflow will be downloaded.
  path: Destination path If empty, all the artifacts will be downloadded in the job workspace.
  </description>
    </item>
    
    <item>
      <title>GitClone</title>
      <link>/docs/actions/builtin-gitclone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/builtin-gitclone/</guid>
      <description>GitClone is a builtin action, you can&amp;rsquo;t modify it.
Clone a repository into a new directory.
Parameters  branch: (optional) Instead of pointing the newly created HEAD to the branch pointed to by the cloned repositoryâ€™s HEAD, point to {{.git.branch}} branch instead. commit: (optional) Set the current branch head (HEAD) to the commit. depth: (optional) Clone with a depth of 50 by default. You can remove &amp;ndash;depth with the value &amp;lsquo;false&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>GitTag</title>
      <link>/docs/actions/builtin-gittag/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/builtin-gittag/</guid>
      <description>GitTag is a builtin action, you can&amp;rsquo;t modify it.
Tag the current branch and push it. Use vcs config from your application. Semver used if fully compatible with https://semver.org.
Parameters  path: (optional) The path to your git directory. prefix: (optional) Add a prefix for tag name. tagLevel: Set the level of the tag. Must be &amp;lsquo;major&amp;rsquo; or &amp;lsquo;minor&amp;rsquo; or &amp;lsquo;patch&amp;rsquo;. tagMessage: (optional) Set a message for the tag. tagMetadata: (optional) Metadata of the tag.</description>
    </item>
    
    <item>
      <title>helmPush</title>
      <link>/docs/actions/helmpush/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/helmpush/</guid>
      <description>This push Helm chart on Chart Museum or Artifactory.
Parameters  appVersion: (Optional) Override the app version before push to registry. chartFolder: Relative path to chart folder to be published chartVersion: (Optional) Override the chart version before push to registry. registryAccessToken: Send token in Authorization header  This parameter can be empty when an Artifactory integration is set up.
 registryAuthHeader: Alternative header to use for token auth  This parameter can be empty when an Artifactory integration is set up.</description>
    </item>
    
    <item>
      <title>JUnit</title>
      <link>/docs/actions/builtin-junit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/builtin-junit/</guid>
      <description>JUnit is a builtin action, you can&amp;rsquo;t modify it.
This action parses a given Junit formatted XML file to extract its test results.
Parameters  path: Path to junit xml file.  Requirements No Requirement
YAML example Example of a pipeline using JUnit action:
version: v1.0 name: Pipeline1 stages: - Stage1 jobs: - job: Job1 stage: Stage1 steps: - jUnitReport: &amp;#39;{{.cds.workspace}}/report.xml&amp;#39; Example  Job Configuration.   Launch pipeline, check XUnit Result   And view details:  </description>
    </item>
    
    <item>
      <title>junit</title>
      <link>/docs/actions/junit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/junit/</guid>
      <description>Parse a junit report, create a run result of type test
Parameters  path: File path to the junit report  </description>
    </item>
    
    <item>
      <title>plugin-archive</title>
      <link>/docs/actions/plugin-archive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/plugin-archive/</guid>
      <description>This is a plugin to compress or uncompress an archive. Supported formats: .zip, .tar, .tar.gz, .tar.bz2, .tar.xz, .tar.zst, .tar.lz4, .tar.sz, and .rar (extract-only)
Parameters  action: &amp;ldquo;compress&amp;rdquo; or &amp;ldquo;uncompress&amp;rdquo; an archive destination: The destination path source: The source path  </description>
    </item>
    
    <item>
      <title>plugin-arsenal-delete-alternative</title>
      <link>/docs/actions/plugin-arsenal-delete-alternative/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/plugin-arsenal-delete-alternative/</guid>
      <description>OVH Arsenal Delete Alternative Plugin
Parameters  alternative_name: alternative name to delete, defaults to alternative from deployment integration if not set  </description>
    </item>
    
    <item>
      <title>plugin-artifactory-release-bundle-create</title>
      <link>/docs/actions/plugin-artifactory-release-bundle-create/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/plugin-artifactory-release-bundle-create/</guid>
      <description>Creates and sign a Artifactory Release Bundle from a specification.
Read more: https://www.jfrog.com/confluence/display/CLI/CLI+for+JFrog+Artifactory#CLIforJFrogArtifactory-UsingFileSpecs
Parameters  description: Release Bundle description name: Release Bundle name release_notes: Release Notes (markdown format) specification: Spec Schema (yaml or json). see https://www.jfrog.com/confluence/display/CLI/CLI+for+JFrog+Artifactory#CLIforJFrogArtifactory-UsingFileSpecs token_variable: JFrog Distribution token variable name. Leave empty to use integration. url: JFrog Artifactory URL. Leave empty to use integration. version: Release Bundle version  </description>
    </item>
    
    <item>
      <title>plugin-artifactory-release-bundle-distribute</title>
      <link>/docs/actions/plugin-artifactory-release-bundle-distribute/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/plugin-artifactory-release-bundle-distribute/</guid>
      <description>Distributes a Artifactory Release Bundle on all the Jfrog Platform.
Parameters  name: Release Bundle name token_variable: JFrog Distribution token variable name. Leave empty to use integration. url: JFrog Artifactory URL. Leave empty to use integration. version: Release Bundle version  </description>
    </item>
    
    <item>
      <title>plugin-tmpl</title>
      <link>/docs/actions/plugin-tmpl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/plugin-tmpl/</guid>
      <description>This action helps you generates a file using a template file and text/template golang package.
Check documentation on text/template for more information https://golang.org/pkg/text/template.
Parameters  file: Template file to use output: Output path for generated file (default to .out or just trimming .tpl extension) params: Parameters to pass on the template file (key=value newline separated list)  </description>
    </item>
    
    <item>
      <title>Promote</title>
      <link>/docs/actions/builtin-promote/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/builtin-promote/</guid>
      <description>Promote is a builtin action, you can&amp;rsquo;t modify it.
This action promote artifacts in an artifact manager
Parameters  artifacts: (optional) Set a list of artifacts, separate by &amp;lsquo;,&amp;rsquo;. You can also use regexp. destMaturity: Repository suffix in which the artifact will be moved setProperties: Properties to add on the promoted artifacts srcMaturity: Repository suffix from which the artifact will be moved  Requirements No Requirement
YAML example Example of a pipeline using Promote action:</description>
    </item>
    
    <item>
      <title>PushBuildInfo</title>
      <link>/docs/actions/builtin-pushbuildinfo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/builtin-pushbuildinfo/</guid>
      <description>PushBuildInfo is a builtin action, you can&amp;rsquo;t modify it.
Push build info into an artifact manager, useful only if you have an artifact manager linked to your workflow.
Parameters No Parameter
Requirements No Requirement
YAML example Example of a pipeline using PushBuildInfo action:
version: v1.0 name: Pipeline1 stages: - Stage1 jobs: - job: Job1 stage: Stage1 steps: - pushBuildInfo: &amp;#39;{{.cds.workflow}}&amp;#39; Note Implementation for artifactory can be found on GitHub</description>
    </item>
    
    <item>
      <title>pythonPush</title>
      <link>/docs/actions/pythonpush/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/pythonpush/</guid>
      <description>This pushes python package
Parameters  directory: Directory of the package package: The name of the package password: Password used to push the package  This parameter can be empty when an Artifactory integration is set up.
 url: Python repository url to push on.  This parameter can be empty when an Artifactory integration is set up.
 username: Username used to push the package  This parameter can be empty when an Artifactory integration is set up.</description>
    </item>
    
    <item>
      <title>Release</title>
      <link>/docs/actions/builtin-release/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/builtin-release/</guid>
      <description>Release is a builtin action, you can&amp;rsquo;t modify it.
This action creates a release on a artifact manager. It promotes artifacts.
Parameters  artifacts: (optional) Set a list of artifacts, separate by &amp;lsquo;,&amp;rsquo;. You can also use regexp. destMaturity: Repository suffix in which the artifact will be moved releaseNote: (optional) Set a release note for the release. setProperties: Properties to add on the released artifacts srcMaturity: Repository suffix from which the artifact will be moved  Requirements No Requirement</description>
    </item>
    
    <item>
      <title>ReleaseVCS</title>
      <link>/docs/actions/builtin-releasevcs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/builtin-releasevcs/</guid>
      <description>ReleaseVCS is a builtin action, you can&amp;rsquo;t modify it.
This action creates a release on the git repository linked to the application, if repository manager implements it.
Parameters  artifacts: (optional) Set a list of artifacts, separate by &amp;lsquo;,&amp;rsquo;. You can also use regexp. releaseNote: (optional) Set a release note for the release. tag: Tag attached to the release. title: Set a title for the release.  Requirements No Requirement</description>
    </item>
    
    <item>
      <title>Script</title>
      <link>/docs/actions/builtin-script/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/builtin-script/</guid>
      <description>Script is a builtin action, you can&amp;rsquo;t modify it.
This action executes a given script with a given interpreter.
Parameters  script: Content of your script. You can put #!/bin/bash, or #!/bin/perl at first line. Make sure that the binary used is in the pre-requisites of action.  Requirements No Requirement
YAML example Example of a pipeline using Script action:
version: v1.0 name: Pipeline1 stages: - Stage1 jobs: - job: Job1 stage: Stage1 steps: - script: - &amp;#39;#!</description>
    </item>
    
    <item>
      <title>script</title>
      <link>/docs/actions/script/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/script/</guid>
      <description>This action execute a script
Parameters  content: The script to execute  </description>
    </item>
    
    <item>
      <title>uploadArtifact</title>
      <link>/docs/actions/uploadartifact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/uploadartifact/</guid>
      <description>This uploads artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete.
Parameters   if-no-files-found: The desired behavior if no files are found using the provided path. Available Options: warn: Output a warning but do not fail the action error: Fail the action with an error message ignore: Do not output any warnings or errors, the action does not fail</description>
    </item>
    
  </channel>
</rss>
