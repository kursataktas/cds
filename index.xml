<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Enterprise-Grade Continuous Delivery &amp; DevOps Automation Open Source Platform on CDS - Continuous Delivery Service</title>
    <link>/</link>
    <description>Recent content in Enterprise-Grade Continuous Delivery &amp; DevOps Automation Open Source Platform on CDS - Continuous Delivery Service</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Authentication</title>
      <link>/docs/concepts/authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/authentication/</guid>
      <description>Consumer Two type of consumer:
 first level: GitLab, GitHub, CorporateSSO, LDAP, Local. n level: Builtin.  A builtin consumer can be created by a user. Every builtin consumer should have a parent consumer that can also be another builtin consumer. Using a child consumer you can give permission for all or a part of what its parent can access.
Groups A consumer includes a list of groups. Wildcard for a first level.</description>
    </item>
    
    <item>
      <title>CDS - The origins</title>
      <link>/about/why_cds/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/about/why_cds/</guid>
      <description>To build CDS, the development team took their inspiration from the Continuous Delivery principles:
 The process for releasing/deploying software MUST be repeatable and reliable. Automate everything! If somethings difficult or painful, do it more often Keep everything in source control Dev Done means “released” Build quality in! Everybody has responsibility for the release process Improve continuously Build binaries only once Use precisely the same mechanism to deploy to every environment Smoke test your deployment If anything fails, stop the line  ref.</description>
    </item>
    
    <item>
      <title>Docker Compose</title>
      <link>/hosting/ready-to-run/docker-compose/docker-compose/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hosting/ready-to-run/docker-compose/docker-compose/</guid>
      <description>Run with Docker-Compose This tutorial allows you to start a CDS locally quickly.
 Do not use this docker-compose installation to run it in production without modification. For production purpose, please read CDS Services   The docker-compose.yml contains:
 cds-db service with a PostgreSQL cds-cache service with a Redis elasticsearch service with an Elasticsearch dockerhost allows cds-hatchery-swarm service to communicate with the local docker daemon cds-migrate service to prepare databases for API and CDN cds-api service cds-ui service cds-elasticsearch service cds-hatchery-swarm service cds-vcs service cds-repositories service cds-cdn service  Docker compose is very convenient to launch CDS for testing it.</description>
    </item>
    
    <item>
      <title>Global roles</title>
      <link>/docs/concepts/cds_as_code/rbac/global/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/cds_as_code/rbac/global/</guid>
      <description>The global section allows users/groups to manage global CDS configuration:
 users groups organization region hatcheries project creation  Available roles:
 manage-permission: Allow users/groups to create/update/delete an permission manage-organization: Allow users/groups to create/delete an organization manage-region: Allow users/groups to create/delete a region manage-hatchery: Allow users/groups to create/update/delete a hatchery create-project: Allow users/groups to create a project  Yaml example:
name: my-permission-name global: - role: manage-permission users: [foo,bar] groups: [grpFoo] List of fields:</description>
    </item>
    
    <item>
      <title>Hatchery Local</title>
      <link>/docs/components/hatchery/local/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/hatchery/local/</guid>
      <description>Use case If you are a CDS user, you can use shared.infra Worker to run your job.
But, if you want to use your host for various good reasons as OS, Network, etc&amp;hellip; you can launch CDS Worker on your host.
Two prerequisites:
 your host must reach your CDS API on HTTP port defined on your CDS Configuration the basedir (default is /var/lib/cds-engine) must allow to execute binaries.  The worker binary is downloaded from CDS API at the start of the hatchery, it&amp;rsquo;s placed into basedir directory.</description>
    </item>
    
    <item>
      <title>Init a CDS Workflow from a repository</title>
      <link>/docs/tutorials/init_workflow_with_cdsctl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/tutorials/init_workflow_with_cdsctl/</guid>
      <description>In this tutorial, you will create a CDS Workflow from an existing git repository.
 This will creates you some files inside your local git repository. Then you&amp;rsquo;ll can push them to get a CDS workflow lives with his configuration &amp;lsquo;as code&amp;rsquo;.   Prerequisites  Have an account on your CDS instance Have a Repository manager as GitHub, Bitbucket Server or GitLab set up on your CDS Instance. Have cdsctl command line, you can download it from here  To get started with CDS  In a terminal, go into your git repository and login with cdsctl  $ cd &amp;lt;path-to-repo&amp;gt; $ cdsctl login -H &amp;lt;cds-api-url&amp;gt; # you will be ask for your username and password  Create your first workflow  $ cdsctl workflow init This will ask you to choose:</description>
    </item>
    
    <item>
      <title>Job</title>
      <link>/docs/concepts/job/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/job/</guid>
      <description>A job is composed of steps, which will be run sequentially. A job is executed in a dedicated workspace (i.e. filesystem). A new workspace is assigned for each new run of a job.
A standard build job looks like this:
You can use « built-in » actions, such as checkoutApplication, script, jUnit, artifact upload/download.
 The checkoutApplication action clones your Git repository The Script action executes your build command as “make build” The artifactUpload action uploads previously-built binaries The jUnit action parses a given Junit-formatted XML file to extract its test results  Notice: you cannot share a workspace between jobs or between two runs of the same job.</description>
    </item>
    
    <item>
      <title>Migrate 0.48</title>
      <link>/hosting/upgrade/migrate_0.48/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hosting/upgrade/migrate_0.48/</guid>
      <description>CDN service The release 0.48 introduced a new CDS service called CDN. This service is dedicated to receive and store CDS’s job logs.
We created this service to be able to move out job&amp;rsquo;s logs from CDS database to an object storage provider (more information about this list of providers here).
In this release, logs are stored both in CDN storage units and CDS database to facilitate migration. Old log data and database table will be removed in a future release.</description>
    </item>
    
    <item>
      <title>Migrate 0.49</title>
      <link>/hosting/upgrade/migrate_0.49/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hosting/upgrade/migrate_0.49/</guid>
      <description>CDN service The release 0.49 introduced a new parameter in CDN configuration to disable and remove a CDN unit. In the previous version 0.48, you migrate log from CDS to CDN, by adding a temporary CDN Unit here. Time is coming to disabled it. In the next release (0.50), all logs data in CDS will be deleted, and CDN will become the only way to manage logs.
Disable CDS Unit Add in your cdn configuration, the property &amp;ldquo;disableSync = true&amp;rdquo; for the CDS Unit</description>
    </item>
    
    <item>
      <title>Migrate 0.50</title>
      <link>/hosting/upgrade/migrate_0.50/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hosting/upgrade/migrate_0.50/</guid>
      <description>Migrate an existing instance Before upgrading your CDS Instance:
 You have to backup your databases: cds and cdn databases. You have to install the version 0.49.0 if you use the 0.48 version. The backend cds-backend have to be removed from the cdn configuration.  PostgreSQL PostgreSQL 14 is now recommended
CDN Service This release introduced the CDN Artifacts. This means that all artifacts upload / download will be done through the CDN service.</description>
    </item>
    
    <item>
      <title>Migrate 0.51</title>
      <link>/hosting/upgrade/migrate_0.51/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hosting/upgrade/migrate_0.51/</guid>
      <description>Migrate an existing instance Before upgrading your CDS Instance:
 You have to backup your databases: cds and cdn databases. You have to install the version 0.50.0 if you use the &amp;lt;= 0.49 version.  CDN Service All artifacts upload / download will be done through the CDN service, this is now enabled by default.
The feature flipping cdn-artifact to enable cdn artifact is now obsolete, you can remove it.</description>
    </item>
    
    <item>
      <title>Migrate 0.53</title>
      <link>/hosting/upgrade/migrate_0.53/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hosting/upgrade/migrate_0.53/</guid>
      <description>Migrate an existing instance Before upgrading your CDS Instance:
 You have to backup your databases: cds and cdn databases. You have to install the version 0.52.0. You must follow the following step before upgrading to 0.53.0.  Before upgrading Organization The version 0.52.0 introduced the notion of Organization in CDS for all authentication drivers. In 0.53.0, organizations are now mandatory so you need to add them before upgrading to 0.</description>
    </item>
    
    <item>
      <title>Payload</title>
      <link>/docs/concepts/workflow/payload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/workflow/payload/</guid>
      <description>A CDS Workflow can be launched:
 manually, user can enter a Payload by webhooks / repository webhooks, payload contains the value sent by initiator of the hook scheduler, the payload contains the value of the default payload. You can edit the default payload on the root pipeline (on roadmap) listener, as a Kafka listener. The payload will contain the content of the Kafka message  A payload is a JSON value.</description>
    </item>
    
    <item>
      <title>Webhook</title>
      <link>/docs/concepts/workflow/hooks/webhook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/workflow/hooks/webhook/</guid>
      <description>On a Root Pipeline, you can add a &amp;ldquo;Webhook&amp;rdquo;. Click on the created icon to get the WebHook URL.
In order to trigger this one you just have to make a HTTP call on the given URL with the selected method. If the selected method is POST you can also send a payload from your workflow inside the request body or if you use GET method you can write your payload using query parameters.</description>
    </item>
    
    <item>
      <title>Workflow configuration file</title>
      <link>/docs/concepts/files/workflow-syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/files/workflow-syntax/</guid>
      <description>A CDS workflow file only contains the description of pipelines orchestration, hooks, run conditions, etc. Consider the following workflow which implements a basic two-stage workflow:
name: my-workflow workflow: build: pipeline: build application: my-application deploy: depends_on: - build when: - success pipeline: deploy application: my-application environment: my-production parameters: name: value one_at_a_time: true hooks: build: - type: RepositoryWebHook integrations: my-artifactory-integration-name: type: artifact_manager notifications: - type: email pipelines: - deploy settings: on_success: never recipients: - me@foo.</description>
    </item>
    
    <item>
      <title>Docker Compose Full Tutorial</title>
      <link>/hosting/ready-to-run/docker-compose/full-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hosting/ready-to-run/docker-compose/full-example/</guid>
      <description>Run with Docker-Compose - Full Tutorial This page will help you to create a public instance of CDS:
 installed on a Virtual Machine with a Public Cloud Instance on Openstack with a domain name and SSL configured installed with docker-compose  The whole tutorial of docker-compose is duplicated here. This article contains additional details on HAPRoxy, SSL configuration, IP Restriction.
At the end of this tutorial, you will have a CDS running with all CDS Services and a Swarm Hatchery.</description>
    </item>
    
    <item>
      <title>Hatchery roles</title>
      <link>/docs/concepts/cds_as_code/rbac/hatchery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/cds_as_code/rbac/hatchery/</guid>
      <description> start-worker: Allow the hatchery to spawn a worker in the given region  Yaml example:
name: my-permission-name hatcheries: - role: start-worker region: nyc-infra hatchery: my-swarm-hatchery List of fields:
 role: [mandatory]role to applied region: [mandatory]the region name hatchery: [mandatory]the hatchery name  </description>
    </item>
    
    <item>
      <title>Import a CDS Workflow from a repository</title>
      <link>/docs/tutorials/import_workflow_with_webui/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/tutorials/import_workflow_with_webui/</guid>
      <description>In this tutorial, you will create a CDS Workflow from an existing git repository.
 The repository have to add .cds/ directory. With the web UI, on will create a CDS Workflow &amp;lsquo;as code&amp;rsquo;.   Prerequisites  Have an account on your CDS instance Have a Repository manager as GitHub, Bitbucket Server or GitLab set up on your CDS Instance.  Prepare your git repository The easiest way to initialize cds files in your repository is to follow first tutorial</description>
    </item>
    
    <item>
      <title>Pipeline configuration file</title>
      <link>/docs/concepts/files/pipeline-syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/files/pipeline-syntax/</guid>
      <description>A CDS workflow file only contains the description of pipelines orchestration, hooks, run conditions, etc. Consider the following Pipeline which implements a basic two-stage continuous delivery pipeline:
version: v1.0 name: build parameters: param_name: type: string default: default_value stages: - Compile - Package jobs: - job: Build UI stage: Compile steps: - gitClone: branch: &amp;#39;{{.git.branch}}&amp;#39; commit: &amp;#39;{{.git.hash}}&amp;#39; directory: cds url: &amp;#39;{{.git.url}}&amp;#39; - script: - echo {{.cds.pip.param_name}}  - cd cds/ui - npm set registry https://registry.</description>
    </item>
    
    <item>
      <title>Pipeline Context</title>
      <link>/docs/concepts/workflow/pipeline-context/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/workflow/pipeline-context/</guid>
      <description>After adding the pipeline, you can &amp;ldquo;Edit the pipeline Context&amp;rdquo; (sidebar).
Then, you can:
 add or remove application. Jobs can use cds.app.* configuration and or remove an environment. Jobs can use cds.env.* configuration enable / disable Pipeline Mutex  </description>
    </item>
    
    <item>
      <title>Project</title>
      <link>/docs/concepts/project/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/project/</guid>
      <description>A CDS Project brings together several entities such as pipelines, applications, workflows, environments. A project also allows to link one or more repository manager such as github, bitbucket, gitlab&amp;hellip;
A project is often associated with one or more groups with differents ACLs.
Metadata In a company, a project is a collection of a team&amp;rsquo;s workflows. This allows to release some statistics of use with metadata.
A metadata is composed by a key and a value.</description>
    </item>
    
    <item>
      <title>Project roles</title>
      <link>/docs/concepts/cds_as_code/rbac/project/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/cds_as_code/rbac/project/</guid>
      <description>These roles allow users/groups to manage resources on a project
 read: Allow users/groups to list all resources defined inside a project manage: Allow users/groups to manage VCS and repository on a project manage-worker-model: Allow users/groups to create/update/delete a worker model manage-action: Allow users/groups to create/update/delete an action manage-workflow: Allow users/groups to create/update/delete a workflow  Yaml example:
name: my-permission-name projects: - role: read all: true users: [foo,bar] groups: [grpFoo] - role: manage-worker-model users: [foo] projects: [PROJ_KEY1, PROJ_KEY2] List of fields:</description>
    </item>
    
    <item>
      <title>Region roles</title>
      <link>/docs/concepts/cds_as_code/rbac/region/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/cds_as_code/rbac/region/</guid>
      <description>These roles allow users/groups to manage a region or start job on a region
 list: Allow users/groups to list/get the given region manage: Allow users/groups to manage the given region execute: Allow users/groups to start jobs on the given region  Yaml example:
name: my-permission-name regions: - role: execute region: nyc-infra all_users: true organization: US List of fields:
 role: [mandatory]role to applied region: [mandatory]the region name all_users: applied the permission for all users organizations: organization allowed users: list of usernames groups: list of groups  </description>
    </item>
    
    <item>
      <title>Repository Manager</title>
      <link>/docs/concepts/cds_as_code/project/repository_manager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/cds_as_code/project/repository_manager/</guid>
      <description>Description A repository manager is needed by your CDS project to link repositories.
A project can be linked to one or more repository manager:
 github bitbucket server gitlab  Permission To be able to manage repository manager you will need the permission manage on your project
Add a repository manager with CLI cdsctl experimental project vcs import &amp;lt;PROJECT-KEY&amp;gt; &amp;lt;vcs_file.yaml&amp;gt;  PROJECT-KEY: The project key  Full CLI documentation here</description>
    </item>
    
    <item>
      <title>Requirements</title>
      <link>/hosting/requirements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hosting/requirements/</guid>
      <description>CDS API is the core component of CDS. To start CDS API, the only mandatory dependencies are a PostgreSQL database, a Redis server and a path to the directory containing other CDS binaries.
There is are two ways to set up CDS:
 as toml configuration over environment variables.  CDS API Third-parties At the minimum, CDS needs a PostgreSQL database &amp;gt;= 9.6 (version 14.0 recommended) and Redis &amp;gt;= 3.2. But for serious usage your may need:</description>
    </item>
    
    <item>
      <title>Scheduler</title>
      <link>/docs/concepts/workflow/hooks/scheduler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/workflow/hooks/scheduler/</guid>
      <description>On a Root Pipeline, you can add a &amp;ldquo;Hook Scheduler&amp;rdquo;. This kind of hook is useful when you want to launch a workflow periodically (for example each day at 1AM). You can use the Crontab Expression Format to configure your scheduler&amp;rsquo;s period. You can also configure a specific payload for your scheduler.</description>
    </item>
    
    <item>
      <title>Service Requirement NGINX</title>
      <link>/docs/tutorials/service-requirement-nginx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/tutorials/service-requirement-nginx/</guid>
      <description>Add the service requirement  Name: mynginx. This will be the service hostname Type: service Docker Image: nginx:1.11.1. This is the name of Docker image to link to current job  Add a step of type script Docker image nginx:1.11.1 start a nginx at startup. So, it&amp;rsquo;s now available on http://mynginx
curl -v -X GET http://mynginx Execute Pipeline
See output:</description>
    </item>
    
    <item>
      <title>Understand the CDS µServices</title>
      <link>/hosting/cds_services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hosting/cds_services/</guid>
      <description>CDS is composed of two binaries: engine and worker, you can find them on CDS Releases for your os/architecture.
 worker is the binary used to run a CDS Job. engine is the binary used to run all CDS µServices.  CDS µServices A CDS µService is a process that can be launch by the engine binary.
 api: this is the main µService.  Each api must shared the same PostgreSQL and redis databases.</description>
    </item>
    
    <item>
      <title>With your own Docker image</title>
      <link>/docs/tutorials/worker_model-docker/docker-customized/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/tutorials/worker_model-docker/docker-customized/</guid>
      <description>A worker model of type docker can be spawned by a Hatchery Docker Swarm
Setup Docker Worker Model with your own image In this example, we will build a Docker model able to build an AngularJS application with webfonts. To create webfonts, a grunt task (optionally) requires fontforge and ttfautohint.
The following tools must be included in the model:
 Node.js and npm bower grunt-cli gulp-cli fontforge ttfautohint  We will use the official nodejs image from Docker.</description>
    </item>
    
    <item>
      <title>Worker Model configuration file</title>
      <link>/docs/concepts/files/worker_model-syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/files/worker_model-syntax/</guid>
      <description>Example:
name: go-official-1.17 group: shared.infra image: golang:1.17 description: official from https://hub.docker.com/_/golang/ type: docker pattern_name: basic_unix Import a worker model:
cdsctl worker model import ./go-official-1.17.yml or with a remote file:
cdsctl worker model import https://raw.githubusercontent.com/ovh/cds/v0.54.1/contrib/worker-models/go-official-1.17.yml   If you want to specify an image using a private registry or a private image, you need to fill credentials in field username and password to access your image. And if your image is not on docker hub but from a private registry, you need to fill the registry info (the registry api url, for example for docker hub it&amp;rsquo;s https://index.</description>
    </item>
    
    <item>
      <title>Workflow</title>
      <link>/docs/concepts/cds_as_code/entities/workflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/cds_as_code/entities/workflow/</guid>
      <description>Description The workflow is the main entity in CDS. It allows you to chain jobs, using conditional branching.
As Code directory A workflow is described directly on your repository inside the directory .cds/workflows/.
Permission The permission manage-workflow on your project is mandatory to manage a workflow.
Fields name: cds repository: vcs: github name: ovh/cds commit-status: ... on: [push]  integrations: [my-artifactory] stages: ... jobs: ... env: VAR_1: value VAR_2: value2 gates: .</description>
    </item>
    
    <item>
      <title>Workflow roles</title>
      <link>/docs/concepts/cds_as_code/rbac/workflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/cds_as_code/rbac/workflow/</guid>
      <description>These roles allow users/groups to realize action on workflows
 trigger: Allow users/groups to trigger workflows  Yaml example:
name: my-permission-name workflows: - role: trigger all_users: true project: MYPROJECT workflows: [wkf1,wkf2] all_workflows: false users: [foo,bar] groups: [grpFoo] List of fields:
 role: [mandatory]role to applied all_users: applied the permission for all users project: [mandatory]the key of the project that contains the workflows workflows: list of workflows inside the given project all_workflows: applied the permission on all workflow inside the given project users: list of usernames groups: list of groups  </description>
    </item>
    
    <item>
      <title>Write documentation</title>
      <link>/development/contribute/documentation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/contribute/documentation/</guid>
      <description>Documentation https://ovh.github.io/cds is generated with Hugo. Source are under https://github.com/ovh/cds/tree/v0.54.1/docs/content
Write / Generate / Test documentation:
 Download release Hugo Version Extended v0.54.0 https://github.com/gohugoio/hugo/releases/tag/v0.54.0 - put hugo binary in your PATH Download CDS Binaries: cdsctl, engine, worker from https://github.com/ovh/cds/releases/latest Clone CDS repository: git clone https://github.com/ovh/cds.git inside ${CDS_SOURCES} Generate documentation with Hugo  cd ${CDS_SOURCES} make install # to recompile all CDS binaries GEN_PATH=${CDS_SOURCES}/docs/content/docs/components make doc cd ${CDS_SOURCES}/docs hugo server  go to http://localhost:1313/  </description>
    </item>
    
    <item>
      <title>[Experimental] Ascode Worker Model</title>
      <link>/docs/concepts/worker-model/ascode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/worker-model/ascode/</guid>
      <description>Description Worker model can be defined ascode. That&amp;rsquo;s mean the definition of the worker model will be in a git repository, and each time you will push something, CDS will update it.
Prerequisite  You must use the new CDS permission system RBAC  Files To be detected by CDS, your worker model files must be in this directory .cds/worker-models/
*: mandatory field
Docker name: my-worker-model-name description: my description osarch: linux/amd64 type: docker spec: image: myregistry.</description>
    </item>
    
    <item>
      <title>Action</title>
      <link>/docs/concepts/cds_as_code/entities/action/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/cds_as_code/entities/action/</guid>
      <description>Description An action is a sequence of steps that can be used within a job
As Code directory An action is described directly on your repository inside the directory .cds/actions
Permission To be able to manage actions you will need the permission manage-action on your project
Fields name: test-parent-action2 description: simple parent action as code inputs: name: description: my description required: true default: Steven workflow: description: event receive default: ${{ cds.</description>
    </item>
    
    <item>
      <title>Action configuration file</title>
      <link>/docs/concepts/files/action-syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/files/action-syntax/</guid>
      <description>Hello World Action
version: v1.0 name: CDS_HelloWorld description: Hello World Action steps: - name: Initialization script: - echo &amp;#34;Hello World&amp;#34; With a real action CDS_SonarScanner: this action contains parameters with default values and some of them are advanced parameters. Two plugins are also used in the steps: plugin-download and plugin-archive
version: v1.0 name: CDS_SonarScanner description: Run Sonar analysis. You must have a file sonar-project.properties in your source directory. parameters: sonar-project.properties: type: text default: |-sonar.</description>
    </item>
    
    <item>
      <title>Application configuration file</title>
      <link>/docs/concepts/files/application-syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/files/application-syntax/</guid>
      <description>An Application allows you to enable some features of CDS within a workflow:
 Variables Keys VCS Deployment  The application configuration format is as following:
version: v1.0 name: my-application variables: artifact.name: type: string value: my-application docker.image: value: my-org/my-application docker.registry: value: hub.docker.com keys: app-mySSHKey: type: ssh repo: my-org/my-application vcs_server: github vcs_connection_type: ssh vcs_ssh_key: app-mySSHKey deployments: my-kubernetes-cluster: timeout: value: 180 namespace: my-namespace helm_chart: value: deploy/helm/ helm_values: type: deploy/helm/values.yaml helm_version: type: 2.12.2 Variables Define application scoped variables as a dictionary.</description>
    </item>
    
    <item>
      <title>Build &amp; Deploy a standard application</title>
      <link>/docs/tutorials/step_by_step_build_deploy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/tutorials/step_by_step_build_deploy/</guid>
      <description>In this tutorial, you will create a CDS Workflow with the Web UI.
 Create a workflow using two pipelines: one for building, another for deploying Discover application and environments concepts. Discover Run Conditions.   This tutorial seems very long, don&amp;rsquo;t worry, it&amp;rsquo;s very detailed and it will take you about 10-15 minutes to try it.
You will play with many CDS Concepts, discover the reuse of pipelines, how to play with CDS Variables.</description>
    </item>
    
    <item>
      <title>CDN</title>
      <link>/docs/components/cdn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdn/</guid>
      <description>What&amp;rsquo;s CDN CDN is a service dedicated to receive and store CDS&amp;rsquo;s logs and artifacts.
CDN stores the list of all known log or artifact items in a Postgres database and communicates with storage backends to store the contents of those items. These backends are call units and there are two types of units in CDN:
  Buffer unit: To store logs and artifacts of incoming jobs, these units are designed to be fast for read / write operations, but with limited capacity.</description>
    </item>
    
    <item>
      <title>Develop a hatchery</title>
      <link>/development/contribute/hatchery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/contribute/hatchery/</guid>
      <description>Example with a creation of a vSphere hatchery   First of all you need to create a new package like the other into the hatchery package. Let&amp;rsquo;s call this package vSphere for our example.
  You have to implement the Service interface (see here) in order to configure launch this new hatchery mode via CDS engine CLI.
  Your have to create a Configuration structure composed of the hatchery.</description>
    </item>
    
    <item>
      <title>Development Environment</title>
      <link>/development/contribute/development/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/contribute/development/</guid>
      <description>Before contributing to CDS, you&amp;rsquo;ll need to install your development environment.
 PostgreSQL Redis Node.js Golang CDS  If you are familiar with these different tools, you probably will not need to read this page :-)
PostgreSQL Download PostgreSQL from https://www.postgresql.org/download/, version &amp;gt;= 9.6. Version 14.0 recommended
You can easily use only PostgreSQL binaries, downloaded from https://www.enterprisedb.com/download-postgresql-binaries.
Initialize DB by running:
$ mkdir -p ~/data/postgres/data $ initdb -D ~/data/postgres/data Create user cds and database cds</description>
    </item>
    
    <item>
      <title>Download</title>
      <link>/hosting/download/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hosting/download/</guid>
      <description>You&amp;rsquo;ll find the latest release of CDS on GitHub Releases
CDSCTL cdsctl Documentation
   OS 386 amd64 arm arm64 ppc64le     darwin        freebsd        linux        openbsd        windows         CDS Engine CDS Engine Documentation</description>
    </item>
    
    <item>
      <title>Git Repository Webhook</title>
      <link>/docs/concepts/workflow/hooks/git-repo-webhook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/workflow/hooks/git-repo-webhook/</guid>
      <description>Do you want to run a workflow after a git push on a repository? This kind of hook is for you.
You have to:
 link your project to a Repository Manager, on Advanced Section link an application to a git repository add a Repository Webhook on the root pipeline, this pipeline have the application linked in the context  GitHub / GitHub Enterprise / Bitbucket Cloud / Bitbucket Server / GitLab are supported by CDS.</description>
    </item>
    
    <item>
      <title>Permissions - ACLs</title>
      <link>/docs/concepts/permissions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/permissions/</guid>
      <description>There are 3 types of permissions:
 Read (as code value: 4) Read / Execute (as code value: 5) Read / Write / Execute (as code value: 7)  These permissions can be attached to different objects:
 Project Workflow Workflow node      Project Workflow Workflow node     Create a workflow RWX - -   Edit a workflow (change run conditions, add nodes, edit payload, notifications, &amp;hellip;) RO RWX -   Create/edit an environment/pipeline/application RWX - -   Manage permissions on project RWX - -   Manage permissions on a workflow RO RWX    Run a workflow RO RX / - OR RX (if there is some groups on node)    Permissions cannot be attached directly to users, they need to be attached to groups of users.</description>
    </item>
    
    <item>
      <title>Pipeline</title>
      <link>/docs/concepts/pipeline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/pipeline/</guid>
      <description>A pipeline describes how things need to be executed in order to obtain the expected result. In CDS, a pipeline belongs to a single project and can be used with the applications of that project.
A pipeline is structured in sequential stages containing one or multiple concurrent jobs.
CDS pipelines can be parametrized. This allows you to reuse the same pipeline when you have similar workloads. For example, you could use the same pipeline to deploy in your pre-production environment first and then to your production environment.</description>
    </item>
    
    <item>
      <title>Repository</title>
      <link>/docs/concepts/cds_as_code/project/repository/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/cds_as_code/project/repository/</guid>
      <description>Description A repository represents a link between your CDS project and a git repository.
A repository is analyzed by CDS on each push event in order to detect cds files that represent CDS as code entities. During this analysis, CDS will retrieve the user and create/update found entities regarding his permissions.
Permission To be able to manage repositories you will need the permission manage on your project
Add a repository using CLI cdsctl experimental project repository add &amp;lt;PROJECT-KEY&amp;gt; &amp;lt;VCS-NAME&amp;gt; &amp;lt;REPOSITORY-NAME&amp;gt;  PROJECT-KEY: The project key VCS-NAME: The vcs name in which the repository is located.</description>
    </item>
    
    <item>
      <title>Run with binaries</title>
      <link>/hosting/ready-to-run/from-binaries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hosting/ready-to-run/from-binaries/</guid>
      <description>This article contains the steps to start CDS locally, with API, UI and a local Hatchery.
 Download CDS from GitHub Prepare Database Launch CDS API, CDS UI and a Local Hatchery  Prerequisite  a Redis a PostgreSQL 9.6 min (Version 14.0 recommended)  Get the latest release from GitHub mkdir $HOME/cds cd cds LAST_RELEASE=$(curl -s https://api.github.com/repos/ovh/cds/releases | grep tag_name | head -n 1 | cut -d &amp;#39;&amp;#34;&amp;#39; -f 4) OS=linux # could be linux, darwin, windows, freebsd, openbsd ARCH=amd64 # could be 386, arm, amd64, arm64, ppc64le # GET Binaries from GitHub curl -L https://github.</description>
    </item>
    
    <item>
      <title>Service Requirement PostgreSQL</title>
      <link>/docs/tutorials/service-requirement-pg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/tutorials/service-requirement-pg/</guid>
      <description>Add the service requirement Requirement Service
 Type: service Hostname: mypg. This will be the service hostname Docker Image: postgres:9.5.3. This is the name of Docker image to link to current job Options:  POSTGRES_USER=myuser POSTGRES_PASSWORD=mypassword And a requirement model which allow you to execute apt-get install -y postgresql-client, see HowTo
Add a step of type script Docker image postgres:9.5.3 start a PostgreSQL at startup. So, it&amp;rsquo;s now available on mypg</description>
    </item>
    
    <item>
      <title>Worker Model</title>
      <link>/docs/concepts/cds_as_code/entities/worker_model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/cds_as_code/entities/worker_model/</guid>
      <description>Description Worker model can be defined ascode. That&amp;rsquo;s mean the definition of the worker model will be in a git repository, and each time you will push something, CDS will update it.
As Code directory A workflow is described directly on your repository inside the directory .cds/worker-models
Permission To be able to manage a workflow you will need the permission manage-worker-model on your project
Files *: mandatory field
Docker name: my-worker-model-name description: my description osarch: linux/amd64 type: docker spec: image: myregistry.</description>
    </item>
    
    <item>
      <title>Worker Model patterns</title>
      <link>/docs/concepts/worker-model/patterns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/worker-model/patterns/</guid>
      <description>In CDS you can use worker model on any platform, distribution and arch you want. To permit that you need to indicate what will be executed on the worker vm or image before the execution of the worker binary itself. For example, before launching the worker binary you need to download that binary with curl or wget or anything else, depends on which OS you are.
To not copy/paste each time the same script for each worker model on the same OS and also to give the ability for a no CDS administrator to create their own worker model you can create worker model patterns.</description>
    </item>
    
    <item>
      <title>Worker Model Variables</title>
      <link>/docs/concepts/worker-model/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/worker-model/variables/</guid>
      <description>When you want to add a new worker model or a new worker model pattern, you have to use some variables that CDS gives you with interpolation. To use them for example for the --api flag, CDS provides a variable named API that you can use like this --api={{.API}}.
Here is the list of available variables:
 API string &amp;ndash;&amp;gt; URI of the CDS API set in the hatchery configuration Token string &amp;ndash;&amp;gt; token set in the hatchery configuration Name string &amp;ndash;&amp;gt; Name of the worker BaseDir string &amp;ndash;&amp;gt; basedir configuration set in the hatchery configuration HTTPInsecure bool &amp;ndash;&amp;gt; http insecure configuration set in the hatchery configuration Model int64 &amp;ndash;&amp;gt; ID of the model that the hatchery want to spawn Hatchery int64 &amp;ndash;&amp;gt; ID of the hatchery HatcheryName string PipelineBuildJobID int64 WorkflowJobID int64 &amp;ndash;&amp;gt; Useful to know which workflow job the hatchery will launch spawning this worker TTL int FromWorkerImage bool GraylogHost string GraylogPort int GraylogExtraKey string GraylogExtraValue string  </description>
    </item>
    
    <item>
      <title>Build, tag and release an application</title>
      <link>/docs/tutorials/step_by_step_build_tag_release/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/tutorials/step_by_step_build_tag_release/</guid>
      <description>In this tutorial, you will create a CDS Workflow with the Web UI.
 Create a workflow using two pipelines: one for building, a second for tagging You will discover the GitTag action, which create tag compatible which Semantic Verstionning 2.0.0   1 - Create your CDS project Let&amp;rsquo;s create a project. On the top navbar, click on &amp;lsquo;Create a project&amp;rsquo;.
 Enter a Project Name The project key will be useful when you want to use cdsctl.</description>
    </item>
    
    <item>
      <title>Environment configuration file</title>
      <link>/docs/concepts/files/environment-syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/files/environment-syntax/</guid>
      <description>Definition An environment is a way to declare and manipulate sets of environment variables and attach them to pipelines within a workflow. It is also a way to organize your workflow and keep it clear and still readable.
Format name: MyEnvironment values: myBooleanVariable: type: boolean value: true myNumberVariable: type: number value: 1 mySecretVariable: type: password value: f1a2b3dd756e4db381d7a88631c67355 myStringVariable: value: myStringValue myTextVariable: type: text value: |This Is a multiline text value with a project variable inside {{.</description>
    </item>
    
    <item>
      <title>Git Repository Poller</title>
      <link>/docs/concepts/workflow/hooks/git-repo-poller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/workflow/hooks/git-repo-poller/</guid>
      <description>Do you want to run a workflow after a git push on a repository BUT your CDS instance isn&amp;rsquo;t accessible from the internet? This kind of hook is for you. (If your CDS instance is accessible from the internet please check the Git Repository Webhook).
This kind of hook will poll periodically the GitHub API to know the push and pull-request events on your repository.
You have to:
 link your project to a Repository Manager, on Advanced Section link an application to a git repository add a Git Poller on the root pipeline, this pipeline have the application linked in the context  For now, only GitHub are supported for git poller by CDS.</description>
    </item>
    
    <item>
      <title>Region Requirement</title>
      <link>/docs/concepts/requirement/requirement_region/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/requirement/requirement_region/</guid>
      <description>The Region prerequisite allows you to require a worker to have access to a specific region.
A Region can be configured on each hatchery. With a free text as myregion in hatchery configuration, user can set a prerequisite &amp;lsquo;region&amp;rsquo; with value myregion on CDS Job.
Example of job configuration:
jobs: - job: build requirements: - region: myregion steps: ... </description>
    </item>
    
    <item>
      <title>Run conditions on pipeline</title>
      <link>/docs/concepts/workflow/run-conditions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/workflow/run-conditions/</guid>
      <description>In CDS if you want to launch a pipeline in your workflow only in specific cases you can add conditions. For example, if you want to run a pipeline automatically only if the value of git.branch is master.
To edit your pipeline condition on the user interface, you have to select a node under edition mode of your workflow and click on Edit run conditions like this:
There are 2 types of conditions:</description>
    </item>
    
    <item>
      <title>Secret Requirement</title>
      <link>/docs/concepts/requirement/requirement_secret/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/requirement/requirement_secret/</guid>
      <description>The Secret prerequisite allows you to require a worker to start with some project&amp;rsquo;s secrets when those secrets are not automatically injected.
Secret automatic injection can be disabled if a job requires to run in a specific region (using a &amp;ldquo;Region&amp;rdquo; prerequisite) that was added in CDS API configuration (key: skipProjectSecretsOnRegion).
The value for the requirement should be a valid regex. In the following example it is used to match both default SSH and PGP keys for a CDS project.</description>
    </item>
    
    <item>
      <title>VariableSet</title>
      <link>/docs/concepts/cds_as_code/project/variableset/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/cds_as_code/project/variableset/</guid>
      <description>Description A variableSet represent a list a variables provided to the jobs during the workflow execution.
A variable can be a:
 string secret  For each type of variable it&amp;rsquo;s possible to provide a JSON value.
Permission To be able to manage repository manager you will need the permission manage on your project
Add a variableset using CLI cdsctl experimental project variableset add &amp;lt;PROJECT-KEY&amp;gt; &amp;lt;VARIABLESET-NAME&amp;gt;  PROJECT-KEY: The project key VARIABLESET-NAME: The name of the variableset  Full CLI documentation here</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>/hosting/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hosting/configuration/</guid>
      <description>The toml configuration can be provided by a file, via consul k/v store or via vault.
Start CDS with local configuration file You can also generate a configuration file template with the following command.
$ $PATH_TO_CDS/engine config new &amp;gt; my_conf_file.toml Edit this file.
Check your configuration file with
$ $PATH_TO_CDS/engine config check my_conf_file.toml Reading configuration file my_new_file.toml Configuration file OK Create your database relations
$ $PATH_TO_CDS/engine database upgrade --db-host &amp;lt;host&amp;gt; --db-port &amp;lt;port&amp;gt; --db-user &amp;lt;user&amp;gt; --db-password &amp;lt;password&amp;gt; --db-name &amp;lt;database&amp;gt; --db-schema=public --migrate-dir $PATH_TO_CDS/engine/sql/api --limit 0 $ PGPASSWORD=&amp;lt;password&amp;gt; psql -h &amp;lt;host&amp;gt; -p &amp;lt;port&amp;gt; -U &amp;lt;user&amp;gt; -d &amp;lt;database&amp;gt; -c &amp;#34;CREATE SCHEMA IF NOT EXISTS cdn AUTHORIZATION &amp;lt;user&amp;gt;;&amp;#34; $ $PATH_TO_CDS/engine database upgrade --db-host &amp;lt;host&amp;gt; --db-port &amp;lt;port&amp;gt; --db-user &amp;lt;user&amp;gt; --db-password &amp;lt;password&amp;gt; --db-name &amp;lt;database&amp;gt; --db-schema=cdn --migrate-dir $PATH_TO_CDS/engine/sql/cdn --limit 0 Download workers binaries</description>
    </item>
    
    <item>
      <title>Contexts</title>
      <link>/docs/concepts/cds_as_code/contexts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/cds_as_code/contexts/</guid>
      <description>Contexts Contexts are a way to access information inside a workflow run. Data can be access like this inside a job
${{ &amp;lt;contextName&amp;gt;.data }} Contexts available:
 cds: contains all the information about the workflow run git: contains the git information vars: contains the project variableset used by the current job env: contains environment variables jobs: contains all parent jobs results and outputs needs: contains all direct parents ( job.needs ) results and outputs inputs: contains all job inputs steps: contains all previous step status matrix: contains the curent value for each matrix variable integrations: contains data of integration linked to the current job gate: contains all gate inputs  Context CDS It contains all cds data related to the workflow execution</description>
    </item>
    
    <item>
      <title>Develop a plugin</title>
      <link>/development/contribute/plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/contribute/plugin/</guid>
      <description>A CDS worker executes job, and job is composed of steps.
A step is an action
A Plugin is simply an executable which expose a GRPC server corresponding to the right proto file. You can use the programming language of your choice. The CDS worker will simply query the GRPC server of the plugin.
In order to communicate with a CDS worker, a plugin MUST fill the following requirements:
 Expose a GRPC server Implement methods and messages coming from this proto file Display this message at the launch of your plugin XXX is ready to accept new connection where XXX is your ip address with port or your Unix socket (example: 127.</description>
    </item>
    
    <item>
      <title>Join</title>
      <link>/docs/concepts/workflow/join/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/workflow/join/</guid>
      <description>A join lets workflow to await the end of two or more parent pipelines.
You can trigger one or many pipelines after a join.</description>
    </item>
    
    <item>
      <title>Kafka hook</title>
      <link>/docs/concepts/workflow/hooks/kafka-hook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/workflow/hooks/kafka-hook/</guid>
      <description>Do you want to run a workflow from a Kafka message? This kind of hook is for you.
This kind of hook will connect to a Kafka topic and consume messages. For each message, it will trigger your workflow.
The Kafka message have to be in JSON format. It will be used as a payload for your workflow. See payload documentation.
Notice that Kafka communication is done using SASL and TLS enable only.</description>
    </item>
    
    <item>
      <title>Notification</title>
      <link>/docs/concepts/cds_as_code/project/notification/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/cds_as_code/project/notification/</guid>
      <description>Description Each action on CDS triggers an event. It&amp;rsquo;s possible at the project level to setup notification through a webhook, filtering by event.
Permission To be able to manage notification you will need the permission manage on your project
Add a notification using CLI cdsctl experimental project notification import &amp;lt;PROJECT-KEY&amp;gt; &amp;lt;notification.yaml&amp;gt;  PROJECT-KEY: The project key notification.yaml: The path to a yaml file name containing the webhook configuration.  Example of webhook configuration name: my-notif webhook_url: https://myserver/notif filters: workflowRun: events: [Run.</description>
    </item>
    
    <item>
      <title>Organization</title>
      <link>/docs/concepts/organization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/organization/</guid>
      <description>Organization represents an organizational group that contains a set of people.
 a project belongs to only one organization, its value is computed based on the groups that have R/W/E permissions on the project.  you&amp;rsquo;ll be able to add a group from another organization only with R permission.   a group belongs to only one organization. You cannot have users from different organizations in the same group.  Configuration  You must defined a list of allowed organization in your CDS configuration file  ############################## # CDS Authentication Settings# ############################## [api.</description>
    </item>
    
    <item>
      <title>Service Link</title>
      <link>/docs/concepts/requirement/requirement_service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/requirement/requirement_service/</guid>
      <description>The Service Link prerequisite allow you to use any Docker image as a dependency of a job.
This is useful when you want to make some tests with a real database, or put your built application as a job prerequisite for doing some tests.
How to use service requirement When editing a pipeline job, choose your model as usual, then add a new service requirement (the name you set will be the service&amp;rsquo;s hostname) and set the Docker image for the service as the value.</description>
    </item>
    
    <item>
      <title>Database Management</title>
      <link>/hosting/database/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hosting/database/</guid>
      <description>CDS provides all needed tools scripts to perform Schema creation and auto-migration. Those tools are embedded inside the engine binary.
The migration files are available to download on GitHub Releases and the archive is named sql.tar.gz. You have to download it and untar (tar xvzf sql.tar.gz).
Creation On a brand new database run the following command:
$ $PATH_TO_CDS/engine database upgrade --db-host &amp;lt;host&amp;gt; --db-port &amp;lt;port&amp;gt; --db-user &amp;lt;user&amp;gt; --db-password &amp;lt;password&amp;gt; --db-name &amp;lt;database&amp;gt; --db-schema=public --migrate-dir $PATH_TO_CDS/engine/sql/api --limit 0 $ PGPASSWORD=&amp;lt;password&amp;gt; psql -h &amp;lt;host&amp;gt; -p &amp;lt;port&amp;gt; -U &amp;lt;user&amp;gt; -d &amp;lt;database&amp;gt; -c &amp;#34;CREATE SCHEMA IF NOT EXISTS cdn AUTHORIZATION &amp;lt;user&amp;gt;;&amp;#34; $ $PATH_TO_CDS/engine database upgrade --db-host &amp;lt;host&amp;gt; --db-port &amp;lt;port&amp;gt; --db-user &amp;lt;user&amp;gt; --db-password &amp;lt;password&amp;gt; --db-name &amp;lt;database&amp;gt; --db-schema=cdn --migrate-dir $PATH_TO_CDS/engine/sql/cdn --limit 0 Upgrade On an existing database, run the following command on each CDS update:</description>
    </item>
    
    <item>
      <title>Error management</title>
      <link>/development/contribute/error_management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/contribute/error_management/</guid>
      <description>This page explains how to deal with errors in CDS code. Error returned from CDS contains a message, an HTTP status code, a stack trace and a unique id.
Errors can be forwarded to a Graylog instance then retrieved directly from the ctl (see api.graylog and log.graylog sections in cds configuration file to setup).
cdsctl admin errors get &amp;lt;error_uuid&amp;gt; Usage in code All errors from lib should be wrapped like sdk.</description>
    </item>
    
    <item>
      <title>Events</title>
      <link>/docs/concepts/cds_as_code/events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/cds_as_code/events/</guid>
      <description>Description Each action on CDS triggers an event.
Analysis events  AnalysisStart AnalysisDone  AsCode entity events  EntityCreated EntityUpdated EntityDeleted  Hachery events  HatcheryCreated HatcheryUpdated HatcheryDeleted  Integration model events  IntegrationModelCreated IntegrationModelUpdated IntegrationModelDeleted  Integration events  IntegrationCreated IntegrationUpdated IntegrationDeleted  Notification events  NotificationCreated NotificationUpdated NotificationDeleted  Organization events  OrganizationCreated OrganizationDeleted  Permission events  PermissionCreated PermissionUpdated PermissionDeleted  Plugin events  PluginCreated PluginUpdated PluginDeleted  Project events  ProjectCreated ProjectUpdated ProjectDeleted  Region events  RegionCreated RegionDeleted  Repository events  RepositoryCreated RepositoryDeleted  User events  UserCreated UserUpdated UserDeleted  User gpg events  UserGPGKeyCreated UserGPGKeyDeleted  VariableSet events  VariableSetCreated VariableSetDeleted  VariableSet item events  VariableSetItemCreated VariableSetItemUpdated VariableSetItemDeleted  Workflow Run events  RunCrafted RunBuilding RunEnded RunRestartFailedJob  Workflow Run Job events  RunJobEnqueued RunJobScheduled RunJobBuilding RunJobManualTriggered RunJobRunResultAdded RunJobRunResultUpdated RunJobEnded  </description>
    </item>
    
    <item>
      <title>Memory</title>
      <link>/docs/concepts/requirement/requirement_memory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/requirement/requirement_memory/</guid>
      <description>The Memory requirement allows you to require a worker to have a specific number of MiB of RAM.
For example if you need 2 GiB of RAM for your worker you can put 2048 in your memory requirement.</description>
    </item>
    
    <item>
      <title>Mutex</title>
      <link>/docs/concepts/workflow/mutex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/workflow/mutex/</guid>
      <description>By default, the same pipeline can be run multiple times at once.
In a CDS Workflow, you can limit running a pipeline to one at a time.
Click on the pipeline → Edit the pipeline context → enable &amp;ldquo;Limit one run at run time&amp;rdquo;
Examplary use case: run an integration test once on a particular environment.
To configure a Mutex with the configuration as code, use the boolean property one_at_a_time in the workflow definition file, in a pipeline context section: Mutex configuration as code example.</description>
    </item>
    
    <item>
      <title>RabbitMQ hook</title>
      <link>/docs/concepts/workflow/hooks/rabbitmq-hook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/workflow/hooks/rabbitmq-hook/</guid>
      <description>Do you want to run a workflow from a RabbitMQ message? This kind of hook is for you.
This kind of hook will connect to a RabbitMQ queue and consume messages. For each message, it will trigger your workflow.
The RabbitMQ message have to be in JSON format. It will be used as a payload for your workflow. See payload documentation.
Link your project to a RabbitMQ platform On your CDS Project, select the platforms section then add a RabbitMQ platform.</description>
    </item>
    
    <item>
      <title>Update your hatchery</title>
      <link>/docs/components/hatchery/update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/hatchery/update/</guid>
      <description>If you run manually a Hatchery, you probably want to update it when CDS Engine is updated with a new release.
Update your hatchery from CDS API:
./engine update --api https://your.cds.instance Update your hatchery from latest Release from GitHub:
./engine update --from-github </description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>/docs/concepts/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/variables/</guid>
      <description>In CDS, it is possible to define variables at different levels:
 Project Environment Application  Variable types Existing variable types:
 String Text Boolean Number Password Key  Placeholder format All variables in CDS can be invoked using the simple {{.VAR}} format. To simplify the use between all the variable sources, we have defined the following prefixes:
 Action variable: {{.VAR}} Builtin CDS: {{.cds.VAR}} Git: {{.git.VAR}} Pipeline: {{.cds.pip.VAR}} Application: {{.</description>
    </item>
    
    <item>
      <title>Worker Model OpenStack</title>
      <link>/docs/tutorials/worker_model-openstack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/tutorials/worker_model-openstack/</guid>
      <description>CDS build using OVH.com OpenStack infrastructure
Create OpenStack user In OVH manager, in cloud section, click on the menu on the Servers&amp;gt;OpenStack item.
You will be able to create a worker model OpenStack user, enter description (name and password will be generated).
Add OpenStack worker model We need to define an OpenStack worker model to have OpenStack hatchery booting workers.
We will create a model called testopenstack:
 With low hardware capacity (vps-ssd-1) On Debian 8 With Docker ready to use Git installed  You need to configure:</description>
    </item>
    
    <item>
      <title>Gerrit Hook</title>
      <link>/docs/concepts/workflow/hooks/gerrit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/workflow/hooks/gerrit/</guid>
      <description>Do you want to trigger a workflow from a gerrit event? This kind of hook is for you.
You have to:
 link your project to a Gerrit Server, on Advanced Section link an application to a Gerrit repository add a Gerrit Hook on the root pipeline, this pipeline have the application linked in the context  With this hook, you will have access to specific variables:
 gerrit.change.id: ID of the change gerrit.</description>
    </item>
    
    <item>
      <title>OS &amp; Architecture</title>
      <link>/docs/concepts/requirement/requirement_os_arch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/requirement/requirement_os_arch/</guid>
      <description>The OS-Architecture prerequisite allow you to require a worker with a specific OS &amp;amp; Architecture.
Beware about default value: there is a default value for OS &amp;amp; Architecture, it&amp;rsquo;s specified in CDS API Configuration.
If user does not specify a prerequisite os-architecture, the default value is applied when the job is in CDS Queue.
Then, a hatchery will spawn a worker compiled with the specified os-architecture prerequisite.
Beware about launching job: if you put a prerequisite os-architecture with value linux/386, the job won&amp;rsquo;t be launched by a worker linux/amd64 even if technically speaking, the worker could launch this job without issue.</description>
    </item>
    
    <item>
      <title>Sidebar</title>
      <link>/docs/concepts/workflow/sidebar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/workflow/sidebar/</guid>
      <description>On the left sidebar, there is only one select box for filter on CDS Tags.
So, what&amp;rsquo;s a tag? A tag is a CDS Variable, exported as a tag. There are default tags as git.branch, git.hash, triggered_by and environment. For example, if you want to know on which branch the build was launched, you just have to filter on a specific CDS tag (in this case git.branch)
Inside a job, a user can add a Tag with the worker command</description>
    </item>
    
    <item>
      <title>Worker Model vSphere</title>
      <link>/docs/tutorials/worker_model-vsphere/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/tutorials/worker_model-vsphere/</guid>
      <description>CDS build using vSphere infrastructure
Add vSphere worker model We need to define a vSphere worker model to have vSphere hatchery booting workers.
We will create a worker model called debian8-docker:
 On Debian 8 With Docker ready to use Git installed  You need to configure:
 The image is the name of your virtual machine that you have created before on your host to clone (See Advanced) Pattern If you aren&amp;rsquo;t an administrator you have to choose a configuration pattern in order to fill pre command, worker command and post command with a pattern that an administrator have already fill for you.</description>
    </item>
    
    <item>
      <title>Monitoring</title>
      <link>/hosting/monitoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hosting/monitoring/</guid>
      <description>Status Handler on API https://your.cds.instance/mon/status returns the status of CDS Engine.
If status != OK, something is wrong on your CDS Instance.
Example:
{ &amp;#34;now&amp;#34;: &amp;#34;2018-01-09T20:24:20.481193492Z&amp;#34;, &amp;#34;lines&amp;#34;: [ { &amp;#34;status&amp;#34;: &amp;#34;OK&amp;#34;, &amp;#34;component&amp;#34;: &amp;#34;Version&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;0.25.1-snapshot+1455.cds&amp;#34; }, ... { &amp;#34;status&amp;#34;: &amp;#34;OK&amp;#34;, &amp;#34;component&amp;#34;: &amp;#34;Database&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;20 conns&amp;#34; }, { &amp;#34;status&amp;#34;: &amp;#34;OK&amp;#34;, &amp;#34;component&amp;#34;: &amp;#34;LastUpdate Connected&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;14&amp;#34; }, { &amp;#34;status&amp;#34;: &amp;#34;OK&amp;#34;, &amp;#34;component&amp;#34;: &amp;#34;Worker Model Errors&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;0&amp;#34; } ... } Monitoring with Command Line # display the current job&amp;#39;s queue .</description>
    </item>
    
    <item>
      <title>Run Number</title>
      <link>/docs/concepts/workflow/run-number/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/workflow/run-number/</guid>
      <description>workflow -&amp;gt; advanced section. You can edit the run number to set you old cds.version value.
{{cds.version}} is always usable, and equals to {{.cds.run.number}}</description>
    </item>
    
    <item>
      <title>Token creation</title>
      <link>/development/sdk/token/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/sdk/token/</guid>
      <description>There are two types of token in CDS:
  signin token: can also be named &amp;ldquo;token&amp;rdquo; when using CDS command line. This token is like a scoped &amp;ldquo;password&amp;rdquo; and can be used to sign-in to CDS. You can generate a sign-in token with the web ui or with CDS command line.
  session token: you should not manipulate it directly as its life is limited. This token is used to authenticate an API call and will be created when you successfully sign-in to CDS.</description>
    </item>
    
    <item>
      <title>Notifications</title>
      <link>/docs/concepts/workflow/notifications/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/workflow/notifications/</guid>
      <description>On a workflow you can have 2 kinds of notifications:
 User notifications: they are useful to notify users by email or with a message of an event on your workflow (success, fail, change, etc&amp;hellip;). Events: linked to event integrations to let you write microservices which can interact with these events plugged on your event integrations.  User notifications You can configure user notifications to send email with different parameters. Inside the body of the notification you can customise the message thanks to the CDS variable templating with syntax like {{.</description>
    </item>
    
    <item>
      <title>Workflow Template</title>
      <link>/docs/concepts/template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/template/</guid>
      <description>What is a workflow template? A workflow template is useful to easily create a new workflow for a project. Also if you need to manage multiple workflows, you can use a template to create one unique and generic workflow then apply it on each workflow.
Templates are versioned, so you can easily improve your template then re-apply it on a workflow.
A template contains a workflow, pipelines, applications, environments in yaml format.</description>
    </item>
    
    <item>
      <title>Retention</title>
      <link>/docs/concepts/workflow/retention/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/concepts/workflow/retention/</guid>
      <description>You can configure two options in Workflow advanced section on the CDS UI:
 Workflow run retention policy. A lua rule to check if a run should be kept or not. Maximum number of Workflow Runs. The maximum number of run to keep for the Workflow.  The dry run button allows you to test your lua expression. The result is a table filled with all runs that would be kept</description>
    </item>
    
    <item>
      <title>User Authentication</title>
      <link>/hosting/user_authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/hosting/user_authentication/</guid>
      <description>CDS can use several authentication backends:
 local LDAP GitHub GitLab  All backends can be enabled at the same time, ie. a user can authenticate both with GitHub, GitLab, Ldap or with local authentication at the same time.
Local Authentication Edit the toml configuration file:
 section [api.auth.local]  enable the signin with enabled = true if you want to disable signup, set signupDisabled = true you can authorize only some domains with the key signupAllowedDomains    [api.</description>
    </item>
    
    <item>
      <title>action</title>
      <link>/development/rest/action/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/rest/action/</guid>
      <description>DELETE /action/&amp;lt;group-name&amp;gt;/&amp;lt;action-name&amp;gt;    URL /action/&amp;lt;group-name&amp;gt;/&amp;lt;action-name&amp;gt;     Method DELETE   Permissions Auth: true   Scopes Action   Code deleteActionHandler    GET /action/&amp;lt;group-name&amp;gt;/&amp;lt;action-name&amp;gt;/audit    URL /action/&amp;lt;group-name&amp;gt;/&amp;lt;action-name&amp;gt;/audit     Method GET   Permissions Auth: true   Scopes Action   Code getActionAuditHandler    GET /action/&amp;lt;group-name&amp;gt;/&amp;lt;action-name&amp;gt;/export    URL /action/&amp;lt;group-name&amp;gt;/&amp;lt;action-name&amp;gt;/export     Method GET   Permissions Auth: true   Scopes Action   Code getActionExportHandler    GET /action/&amp;lt;group-name&amp;gt;/&amp;lt;action-name&amp;gt;/usage    URL /action/&amp;lt;group-name&amp;gt;/&amp;lt;action-name&amp;gt;/usage     Method GET   Permissions Auth: true   Scopes Action   Code getActionUsageHandler    GET /action/&amp;lt;group-name&amp;gt;/&amp;lt;action-name&amp;gt;    URL /action/&amp;lt;group-name&amp;gt;/&amp;lt;action-name&amp;gt;     Method GET   Permissions Auth: true   Scopes Action   Code getActionHandler    GET /action    URL /action     Method GET   Permissions Auth: true   Scopes Action   Code getActionsHandler    POST /action/&amp;lt;group-name&amp;gt;/&amp;lt;action-name&amp;gt;/audit/&amp;lt;audit-id&amp;gt;/rollback    URL /action/&amp;lt;group-name&amp;gt;/&amp;lt;action-name&amp;gt;/audit/&amp;lt;audit-id&amp;gt;/rollback     Method POST   Permissions Auth: true   Scopes Action   Code postActionAuditRollbackHandler    POST /action/import    URL /action/import     Method POST   Permissions Auth: true   Scopes Action   Code importActionHandler    POST /action    URL /action     Method POST   Permissions Auth: true   Scopes Action   Code postActionHandler    PUT /action/&amp;lt;group-name&amp;gt;/&amp;lt;action-name&amp;gt;    URL /action/&amp;lt;group-name&amp;gt;/&amp;lt;action-name&amp;gt;     Method PUT   Permissions Auth: true   Scopes Action   Code putActionHandler    </description>
    </item>
    
    <item>
      <title>actionBuiltin</title>
      <link>/development/rest/actionbuiltin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/rest/actionbuiltin/</guid>
      <description>GET /actionBuiltin/&amp;lt;action-name&amp;gt;/usage    URL /actionBuiltin/&amp;lt;action-name&amp;gt;/usage     Method GET   Permissions Auth: true   Scopes Admin   Code getActionBuiltinUsageHandler    GET /actionBuiltin/&amp;lt;action-name&amp;gt;    URL /actionBuiltin/&amp;lt;action-name&amp;gt;     Method GET   Permissions Auth: true   Code getActionBuiltinHandler    GET /actionBuiltin    URL /actionBuiltin     Method GET   Permissions Auth: true   Code getActionsBuiltinHandler    </description>
    </item>
    
    <item>
      <title>add</title>
      <link>/docs/components/cdsctl/admin/organization/add/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/organization/add/</guid>
      <description>cdsctl admin organization add Add a new Organization on CDS
Synopsis Add a new Organization on CDS
cdsctl admin organization add ORGANIZATION-NAME Examples cdsctl admin organization add &amp;lt;organization-name&amp;gt; Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin organization	- Manage CDS Organization  </description>
    </item>
    
    <item>
      <title>add</title>
      <link>/docs/components/cdsctl/application/keys/add/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/application/keys/add/</guid>
      <description>cdsctl application keys add Add a new key on application. key type can be ssh or pgp
Synopsis Add a new key on application. key type can be ssh or pgp
cdsctl application keys add [ PROJECT-KEY APPLICATION-NAME ] KEY-NAME KEY-TYPE Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>add</title>
      <link>/docs/components/cdsctl/application/variable/add/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/application/variable/add/</guid>
      <description>cdsctl application variable add Add a new variable on application. variable type can be one of password, text, string, key, boolean, number, repository
Synopsis Add a new variable on application. variable type can be one of password, text, string, key, boolean, number, repository
cdsctl application variable add [ PROJECT-KEY APPLICATION-NAME ] VARIABLE-NAME VARIABLE-TYPE VARIABLE-VALUE Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>add</title>
      <link>/docs/components/cdsctl/environment/keys/add/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/environment/keys/add/</guid>
      <description>cdsctl environment keys add Add a new key on environment. key-type can be ssh or pgp
Synopsis Add a new key on environment. key-type can be ssh or pgp
cdsctl environment keys add [ PROJECT-KEY ] ENV-NAME KEY-NAME KEY-TYPE Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>add</title>
      <link>/docs/components/cdsctl/environment/variable/add/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/environment/variable/add/</guid>
      <description>cdsctl environment variable add Add a new variable on environment. variable type can be one of password, text, string, key, boolean, number, repository
Synopsis Add a new variable on environment. variable type can be one of password, text, string, key, boolean, number, repository
cdsctl environment variable add [ PROJECT-KEY ] ENV-NAME VARIABLE-NAME VARIABLE-TYPE VARIABLE-VALUE Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>add</title>
      <link>/docs/components/cdsctl/experimental/hatchery/add/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/hatchery/add/</guid>
      <description>cdsctl experimental hatchery add Create a new hatchery
Synopsis Create a new hatchery
cdsctl experimental hatchery add HATCHERYIDENTIFIER [flags] Examples cdsctl hatchery add &amp;lt;hatchery_name&amp;gt; Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --format string Output format: plain|json|yaml (default &amp;quot;plain&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>add</title>
      <link>/docs/components/cdsctl/experimental/organization/add/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/organization/add/</guid>
      <description>cdsctl experimental organization add Create a new organization
Synopsis Create a new organization
cdsctl experimental organization add ORGANIZATIONIDENTIFIER Examples cdsctl organization add &amp;lt;organization_name&amp;gt; Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental organization	- CDS Experimental organization commands  </description>
    </item>
    
    <item>
      <title>add</title>
      <link>/docs/components/cdsctl/experimental/project/repository/add/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/project/repository/add/</guid>
      <description>cdsctl experimental project repository add Add a repository on the project
Synopsis Add a repository on the project
cdsctl experimental project repository add [ PROJECT-KEY ] VCS-NAME REPOSITORY-NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental project repository	- Manage repositories on a CDS project  </description>
    </item>
    
    <item>
      <title>add</title>
      <link>/docs/components/cdsctl/experimental/project/variableset/add/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/project/variableset/add/</guid>
      <description>cdsctl experimental project variableset add Create a new variableset inside the given project
Synopsis Create a new variableset inside the given project
cdsctl experimental project variableset add [ PROJECT-KEY ] NAME Examples cdsctl exp project variableset add MY-PROJECT MY-VARIABLESET-NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>add</title>
      <link>/docs/components/cdsctl/experimental/project/variableset/item/add/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/project/variableset/item/add/</guid>
      <description>cdsctl experimental project variableset item add Create a new item inside a variable set
Synopsis Create a new item inside a variable set
cdsctl experimental project variableset item add [ PROJECT-KEY ] VARIABLESET-NAME ITEM-NAME ITEM-VALUE ITEM-TYPE [flags] Examples cdsctl exp project variableset item add MY-PROJECT MY-VARIABLESET-NAME ITEM-NAME ITEM-VALUE ITEM-TYPE(secret|string) Options  --force create the variable set if it not exists Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>add</title>
      <link>/docs/components/cdsctl/experimental/region/add/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/region/add/</guid>
      <description>cdsctl experimental region add Create a new region
Synopsis Create a new region
cdsctl experimental region add REGIONIDENTIFIER Examples cdsctl region add &amp;lt;region_name&amp;gt; Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental region	- CDS Experimental region commands  </description>
    </item>
    
    <item>
      <title>add</title>
      <link>/docs/components/cdsctl/group/member/add/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/group/member/add/</guid>
      <description>cdsctl group member add Add or edit a member for a group
Synopsis Add or edit a member for a group
cdsctl group member add GROUP-NAME USERNAME ADMIN Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl group member	- Manage group&#39;s member  </description>
    </item>
    
    <item>
      <title>add</title>
      <link>/docs/components/cdsctl/project/keys/add/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/project/keys/add/</guid>
      <description>cdsctl project keys add Add a new key on project. key-type can be ssh or pgp
Synopsis Add a new key on project. key-type can be ssh or pgp
cdsctl project keys add [ PROJECT-KEY ] KEY-NAME KEY-TYPE Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl project keys	- Manage CDS project keys  </description>
    </item>
    
    <item>
      <title>add</title>
      <link>/docs/components/cdsctl/project/variable/add/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/project/variable/add/</guid>
      <description>cdsctl project variable add Add a new variable on project. Variable type can be one of password, text, string, key, boolean, number, repository
Synopsis Add a new variable on project. Variable type can be one of password, text, string, key, boolean, number, repository
cdsctl project variable add [ PROJECT-KEY ] VARIABLE-NAME VARIABLE-TYPE [VARIABLE-VALUE] [flags] Options  --stdin read the variable value from stdin Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>add</title>
      <link>/docs/components/cdsctl/workflow/label/add/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/workflow/label/add/</guid>
      <description>cdsctl workflow label add Add label on one workflow
Synopsis Add label on one workflow
cdsctl workflow label add [ PROJECT-KEY WORKFLOW-NAME ] LABEL Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl workflow label	- Manage Workflow Label  </description>
    </item>
    
    <item>
      <title>admin</title>
      <link>/development/rest/admin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/rest/admin/</guid>
      <description>GET /admin/services/call    URL /admin/services/call     Method GET   Permissions Auth: true   Scopes Admin   Code authMaintainerMiddleware    </description>
    </item>
    
    <item>
      <title>apply</title>
      <link>/docs/components/cdsctl/template/apply/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/template/apply/</guid>
      <description>cdsctl template apply Apply CDS workflow template
Synopsis Apply CDS workflow template
cdsctl template apply [ PROJECT-KEY WORKFLOW-NAME ] [TEMPLATE-PATH] [flags] Examples cdsctl template apply project-key workflow-name group-name/template-slug Options  --detach Set to generate a workflow detached from the template --force Force, may override files --import-as-code If true, will import the generated workflow as code on given project --import-push If true, will push the generated workflow on given project -d, --output-dir string Output directory (default &amp;quot;.</description>
    </item>
    
    <item>
      <title>applyTemplate</title>
      <link>/docs/components/cdsctl/workflow/applytemplate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/workflow/applytemplate/</guid>
      <description>cdsctl workflow applyTemplate Apply CDS workflow template
Synopsis Apply CDS workflow template
cdsctl workflow applyTemplate [ PROJECT-KEY WORKFLOW-NAME ] [TEMPLATE-PATH] [flags] Examples cdsctl template apply project-key workflow-name group-name/template-slug Options  --detach Set to generate a workflow detached from the template --force Force, may override files --import-as-code If true, will import the generated workflow as code on given project --import-push If true, will push the generated workflow on given project -d, --output-dir string Output directory (default &amp;quot;.</description>
    </item>
    
    <item>
      <title>Artifact Download</title>
      <link>/docs/actions/builtin-artifact-download/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/builtin-artifact-download/</guid>
      <description>Artifact Download is a builtin action, you can&amp;rsquo;t modify it.
This action can be used to retrieve an artifact previously uploaded by an Artifact Upload.
Parameters  path: Path where artifacts will be downloaded. pattern: (optional) Empty: download all files. Otherwise, enter regexp pattern to choose file: (fileA|fileB). tag: Artifact are uploaded with a tag, generally {{.cds.version}}.  Requirements No Requirement
YAML example Example of a pipeline using Artifact Download action:</description>
    </item>
    
    <item>
      <title>Artifact Upload</title>
      <link>/docs/actions/builtin-artifact-upload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/builtin-artifact-upload/</guid>
      <description>Artifact Upload is a builtin action, you can&amp;rsquo;t modify it.
This action can be used to upload artifacts in CDS. This is the recommended way to share files between pipelines or stages.
Parameters  destination: (optional) Destination of this artifact. Use the name of integration attached on your project. path: Path of file to upload, example: ./src/yourFile.json. tag: Artifact will be uploaded with a tag, generally {{.cds.version}}.  Requirements No Requirement</description>
    </item>
    
    <item>
      <title>artifact-manager</title>
      <link>/docs/components/worker/run-result/add/artifact-manager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/worker/run-result/add/artifact-manager/</guid>
      <description>worker run-result add artifact-manager worker run-result add artifact-manager &amp;lt;artifact_name&amp;gt; &amp;lt;repository_name&amp;gt; &amp;lt;path_inside_repository&amp;gt;
Synopsis Inside a job, add a run result of type artifact manager: Worker Command:
worker run-result add artifact-manager &amp;lt;artifact_name&amp;gt; &amp;lt;repository_name&amp;gt; &amp;lt;path_inside_repository&amp;gt;  Example:
worker run-result add artifact-manager custom/debian:10 my-docker-repository-name custom/debian/10  worker run-result add artifact-manager SEE ALSO  worker run-result add	- worker run-result add  </description>
    </item>
    
    <item>
      <title>Artifactory</title>
      <link>/docs/integrations/artifact-manager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/integrations/artifact-manager/</guid>
      <description>The Artifactory integration uses the builtin integration model &amp;ldquo;Artifact Manager&amp;rdquo; and can be configured on every project by users
This integration allows you:
 to upload/download artifact into artifactory to create a new artifactory build from your workflow run results to create a release bundle using artifacts previously uploaded in artifactory  Recommendations To take full advantage of this integration, we recommend a few things:
 Naming your local repositories like this: [team]-[technology]-[maturity] Having virtual repositories named like this: [team]-[technology]  For example, you need a generic repository for CDS artifacts.</description>
    </item>
    
    <item>
      <title>artifactoryPromote</title>
      <link>/docs/actions/artifactorypromote/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/artifactorypromote/</guid>
      <description>Promote artifactory package from a repository to another
Parameters  artifacts: Artifact name or wilcard pattern. maturity: The maturity you want to promote in. properties: Properties to add on the promoted artifacts  </description>
    </item>
    
    <item>
      <title>artifactoryRelease</title>
      <link>/docs/actions/artifactoryrelease/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/artifactoryrelease/</guid>
      <description>Release artifactory package from a repository to another
Parameters  artifacts: Artifact name or wildcard pattern. maturity: The maturity you want to promote in. properties: Properties to add on the promoted artifacts releaseNotes: Notes associated to your Release.  </description>
    </item>
    
    <item>
      <title>artifacts</title>
      <link>/docs/components/worker/artifacts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/worker/artifacts/</guid>
      <description>worker artifacts worker artifacts [--workflow=&amp;lt;workflow-name&amp;gt;] [--number=&amp;lt;run-number&amp;gt;] [--tag=&amp;lt;tag&amp;gt;] [--pattern=&amp;lt;pattern&amp;gt;]
Synopsis Inside a job, you can list artifacts of a workflow:
worker artifacts --pattern=&amp;quot;files.*.yml&amp;quot; #theses two commands have the same result: worker artifacts worker artifacts --workflow={{.cds.workflow}} --number={{.cds.run.number}}  worker artifacts [flags] Options  --number string Workflow Number. Optional, default: current workflow run --pattern string Pattern matching files to list. Optional, default: * --tag string Tag matching files to list. Optional --workflow string Workflow name.</description>
    </item>
    
    <item>
      <title>ascode</title>
      <link>/docs/components/cdsctl/workflow/ascode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/workflow/ascode/</guid>
      <description>cdsctl workflow ascode Transform an existing workflow to an as code workflow
Synopsis Transform an existing workflow to an as code workflow
cdsctl workflow ascode [ PROJECT-KEY WORKFLOW-NAME ] [flags] Options  --branch string --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --format string Output format: plain|json|yaml (default &amp;quot;plain&amp;quot;) --message string -q, --quiet Only display object&#39;s key --silent --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>auth</title>
      <link>/development/rest/auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/rest/auth/</guid>
      <description>GET /auth/me    URL /auth/me     Method GET   Permissions Auth: true   Scopes User   Code getAuthMe    GET /auth/session/&amp;lt;session-id&amp;gt;    URL /auth/session/&amp;lt;session-id&amp;gt;     Method GET   Permissions Auth: true   Scopes Service   Code getAuthSession    POST /auth/consumer/&amp;lt;consumer-type&amp;gt;/detach    URL /auth/consumer/&amp;lt;consumer-type&amp;gt;/detach     Method POST   Permissions Auth: true   Scopes AccessToken   Code postAuthDetachHandler    POST /auth/consumer/signout    URL /auth/consumer/signout     Method POST   Permissions Auth: true   Code postAuthSignoutHandler    POST /auth/consumer/worker/signout    URL /auth/consumer/worker/signout     Method POST   Permissions Auth: true   Code postUnregisterWorkerHandler    </description>
    </item>
    
    <item>
      <title>AWS S3</title>
      <link>/docs/integrations/aws/aws_s3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/integrations/aws/aws_s3/</guid>
      <description>The AWS S3 Integration is a Self-Service integration that can be configured on a CDS Project.
With this integration, you can use a dedicated AWS S3 Bucket Storage on :
 action Artifact Upload action Artifact Download worker cache command  Notice: by default, the storage is configured in CDS Configuration. This integration allows user to use their own AWS S3 Storage and not use the shared storage.
Configure with WebUI You can add a AWS S3 on your CDS Project.</description>
    </item>
    
    <item>
      <title>bash</title>
      <link>/docs/components/cdsctl/completion/bash/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/completion/bash/</guid>
      <description>cdsctl completion bash Generate the autocompletion script for bash
Synopsis Generate the autocompletion script for the bash shell.
This script depends on the &amp;lsquo;bash-completion&amp;rsquo; package. If it is not installed already, you can install it via your OS&amp;rsquo;s package manager.
To load completions in your current shell session:
source &amp;lt;(cdsctl completion bash)  To load completions for every new session, execute once:
Linux: cdsctl completion bash &amp;gt; /etc/bash_completion.d/cdsctl  macOS: cdsctl completion bash &amp;gt; $(brew --prefix)/etc/bash_completion.</description>
    </item>
    
    <item>
      <title>bash</title>
      <link>/docs/components/engine/completion/bash/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/engine/completion/bash/</guid>
      <description>engine completion bash Generate the autocompletion script for bash
Synopsis Generate the autocompletion script for the bash shell.
This script depends on the &amp;lsquo;bash-completion&amp;rsquo; package. If it is not installed already, you can install it via your OS&amp;rsquo;s package manager.
To load completions in your current shell session:
source &amp;lt;(engine completion bash)  To load completions for every new session, execute once:
Linux: engine completion bash &amp;gt; /etc/bash_completion.d/engine  macOS: engine completion bash &amp;gt; $(brew --prefix)/etc/bash_completion.</description>
    </item>
    
    <item>
      <title>bash</title>
      <link>/docs/components/worker/completion/bash/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/worker/completion/bash/</guid>
      <description>worker completion bash Generate the autocompletion script for bash
Synopsis Generate the autocompletion script for the bash shell.
This script depends on the &amp;lsquo;bash-completion&amp;rsquo; package. If it is not installed already, you can install it via your OS&amp;rsquo;s package manager.
To load completions in your current shell session:
source &amp;lt;(worker completion bash)  To load completions for every new session, execute once:
Linux: worker completion bash &amp;gt; /etc/bash_completion.d/worker  macOS: worker completion bash &amp;gt; $(brew --prefix)/etc/bash_completion.</description>
    </item>
    
    <item>
      <title>binary-add</title>
      <link>/docs/components/cdsctl/admin/plugins/binary-add/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/plugins/binary-add/</guid>
      <description>cdsctl admin plugins binary-add Add a binary
Synopsis Add a binary
cdsctl admin plugins binary-add NAME DESCRIPTOR FILENAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin plugins	- Manage CDS Plugins  </description>
    </item>
    
    <item>
      <title>Bitbucket Cloud</title>
      <link>/docs/integrations/bitbucketcloud/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/integrations/bitbucketcloud/</guid>
      <description>The Bitbucket Cloud Integration have to be configured on your CDS by a CDS Administrator.
This integration allows you to link a Git Repository hosted by your Bitbucket Cloud to a CDS Application.
This integration enables some features:
 Git Repository Webhook Easy to use action CheckoutApplication and GitClone for advanced usage Send build notifications on your Pull-Requests and Commits on Bitbucket Cloud. More informations  How to configure Bitbucket Cloud integration  Follow the section Create a consumer on documentation https://support.</description>
    </item>
    
    <item>
      <title>Bitbucket Server</title>
      <link>/docs/integrations/bitbucket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/integrations/bitbucket/</guid>
      <description>The Bitbucket Server Integration have to be configured on your CDS by a CDS Administrator.
This integration allows you to link a Git Repository hosted by your Bitbucket Server to a CDS Application.
This integration enables some features:
 Git Repository Webhook Easy to use action CheckoutApplication and GitClone for advanced usage Send build notifications on your Pull-Requests and Commits on Bitbucket. More informations Send comments on your Pull-Requests when a workflow is failed  Create the Personal Access Token on Bitbucket Datacenter Generate a new token on https://your-bitbucket-datacenter/plugins/servlet/access-tokens/manage with the following scopes:</description>
    </item>
    
    <item>
      <title>Blog Posts, Podcasts and Talks</title>
      <link>/about/articles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/about/articles/</guid>
      <description>Blog Posts February 14, 2019 - How does OVH manage the CI/CD at scale?
March 1, 2019 - Continuous Delivery and Deployment Workflows with CDS
Podcasts February 14, 2019 - DataBuzzWord podcast - French - Understanding CI/CD for Big Data and Machine Learning 
Talks March 22, 2019 - Talk at conference Breizhcamp to introduce CDS (French): CI/CD FIVE MILLION WORKERS</description>
    </item>
    
    <item>
      <title>bookmarks</title>
      <link>/development/rest/bookmarks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/rest/bookmarks/</guid>
      <description>GET /bookmarks    URL /bookmarks     Method GET   Permissions Auth: true   Scopes User   Code getBookmarksHandler    </description>
    </item>
    
    <item>
      <title>bulk</title>
      <link>/docs/components/cdsctl/template/bulk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/template/bulk/</guid>
      <description>cdsctl template bulk Bulk apply CDS workflow template and push all given workflows
Synopsis Bulk apply CDS workflow template and push all given workflows
cdsctl template bulk [TEMPLATE-PATH] [flags] Examples cdsctl template bulk group-name/template-slug -i PROJ1/workflow1 -i PROJ1/workflow2 -p PROJ1/workflow1:repo=github.com/ovh/cds Options  --detach stringArray Set to generate a workflow detached from the template like --detach PROJ1/workflow1 -i, --instances stringArray Specify instances path --instances-file string Specify path|url of a json|yaml file that contains instances with params --parallel Apply template on workflow in parallel -p, --params stringArray Specify parameters for template like --params PROJ1/workflow1:paramKey=paramValue --track Wait the bulk to be over Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>cancel</title>
      <link>/docs/components/cdsctl/admin/migration/cancel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/migration/cancel/</guid>
      <description>cdsctl admin migration cancel Cancel a CDS migration (USE WITH CAUTION)
Synopsis Cancel a CDS migration (USE WITH CAUTION)
cdsctl admin migration cancel ID Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin migration	- Manage CDS Migrations  </description>
    </item>
    
    <item>
      <title>check</title>
      <link>/docs/components/engine/config/check/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/engine/config/check/</guid>
      <description>engine config check Check CDS configuration file
Synopsis $ engine config check engine config check SEE ALSO  engine config	- Manage CDS Configuration  </description>
    </item>
    
    <item>
      <title>check-secret</title>
      <link>/docs/components/worker/check-secret/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/worker/check-secret/</guid>
      <description>worker check-secret worker check-secret fileA fileB
Synopsis Inside a step script (https://ovh.github.io/cds/docs/actions/builtin-script/), you can add check if a file contains a CDS variable of type password or private key:
#!/bin/bash  set -ex # create a file cat &amp;lt;&amp;lt; EOF &amp;gt; myFile this a a line in the file, with a CDS variable of type password {{.cds.app.password}} EOF # worker check-secret myFile worker check-secret {{.cds.workspace}}/myFile This command will exit 1 and a log is displayed, as:</description>
    </item>
    
    <item>
      <title>checkout</title>
      <link>/docs/actions/checkout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/checkout/</guid>
      <description>This action execute a git checkout
Parameters  git-url: The repository url to clone path: Relative path under $CD_WORKSPACE to place the repository ref: The branch, tag to checkout sha: The commit sha to checkout ssh-key: The ssh-key used to fetch the repository submodules: Whether to checkout submodules: true to checkout submodules or recursive to recursively checkout submodules token: Token use for https authentication username: Username use for https authentication  </description>
    </item>
    
    <item>
      <title>CheckoutApplication</title>
      <link>/docs/actions/builtin-checkoutapplication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/builtin-checkoutapplication/</guid>
      <description>CheckoutApplication is a builtin action, you can&amp;rsquo;t modify it.
CDS Builtin Action. Checkout a repository into a new directory.
This action use the configuration from application vcs strategy to git clone the repository. The clone will be done with a depth of 50 and with submodules. If you want to modify theses options, you have to use gitClone action.
Parameters  directory: The name of a directory to clone into.  Requirements  git: type: binary Value: git  YAML example Example of a pipeline using CheckoutApplication action:</description>
    </item>
    
    <item>
      <title>clear</title>
      <link>/docs/components/cdsctl/admin/cdn/cache/clear/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/cdn/cache/clear/</guid>
      <description>cdsctl admin cdn cache clear clear the cache log
Synopsis clear the cache log
cdsctl admin cdn cache clear Examples cdsctl admin cdn cache clear Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin cdn cache	- Manage CDS CDN Cache  </description>
    </item>
    
    <item>
      <title>config</title>
      <link>/development/rest/config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/rest/config/</guid>
      <description>GET /config/api    URL /config/api     Method GET   Permissions Auth: true   Code configAPIHandler    GET /config/cdn    URL /config/cdn     Method GET   Permissions Auth: true   Code configCDNHandler    GET /config/vcsgerrit    URL /config/vcsgerrit     Method GET   Permissions Auth: true   Code configVCSGerritHandler    </description>
    </item>
    
    <item>
      <title>confirm</title>
      <link>/docs/components/cdsctl/reset-password/confirm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/reset-password/confirm/</guid>
      <description>cdsctl reset-password confirm Synopsis cdsctl reset-password confirm TOKEN [flags] Options  -H, --api-url string Url to your CDS api. --env Display the commands to set up the environment for the cds client. -p, --password string Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl reset-password	- Reset CDS user password  </description>
    </item>
    
    <item>
      <title>Contact us</title>
      <link>/about/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/about/contact/</guid>
      <description>François SAMIN - @francoissamin Steven GUIHEUX - @sguiheux Richard LE TERRIER - @richardlte Yvonnick ESNAULT - @yesnault  A remark / question / suggestion, feel free to join us on https://github.com/ovh/cds/discussions
All CDS Contributors: https://github.com/ovh/cds/graphs/contributors</description>
    </item>
    
    <item>
      <title>Coverage</title>
      <link>/docs/actions/builtin-coverage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/builtin-coverage/</guid>
      <description>Coverage is a builtin action, you can&amp;rsquo;t modify it.
CDS Builtin Action. Upload you coverage file to CDS as a coverage run result.
Parameters  path: Path of the coverage report file.  Requirements No Requirement
YAML example Example of a pipeline using Coverage action:
version: v1.0 name: Pipeline1 stages: - Stage1 jobs: - job: Job1 stage: Stage1 steps: - coverage: path: ./coverage.xml </description>
    </item>
    
    <item>
      <title>create</title>
      <link>/docs/components/cdsctl/application/create/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/application/create/</guid>
      <description>cdsctl application create Create a CDS application
Synopsis Create a CDS application
cdsctl application create [ PROJECT-KEY ] APPLICATION-NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl application	- Manage CDS application  </description>
    </item>
    
    <item>
      <title>create</title>
      <link>/docs/components/cdsctl/environment/create/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/environment/create/</guid>
      <description>cdsctl environment create Create a CDS environment
Synopsis Create a CDS environment
cdsctl environment create [ PROJECT-KEY ] ENVIRONMENT-NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl environment	- Manage CDS environment  </description>
    </item>
    
    <item>
      <title>create</title>
      <link>/docs/components/cdsctl/group/create/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/group/create/</guid>
      <description>cdsctl group create Create a CDS group
Synopsis Create a CDS group
cdsctl group create GROUP-NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl group	- Manage CDS group  </description>
    </item>
    
    <item>
      <title>create</title>
      <link>/docs/components/cdsctl/project/create/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/project/create/</guid>
      <description>cdsctl project create Create a CDS project
Synopsis Create a CDS project
cdsctl project create [ PROJECT-KEY PROJECT-NAME ] [GROUP-NAME] Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl project	- Manage CDS project  </description>
    </item>
    
    <item>
      <title>curl</title>
      <link>/docs/components/cdsctl/admin/curl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/curl/</guid>
      <description>cdsctl admin curl Execute request to CDS api
Synopsis Execute request to CDS api
cdsctl admin curl PATH [flags] Options  -d, --data string -X, --request string (default &amp;quot;GET&amp;quot;) Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin	- Manage CDS (admin only)  </description>
    </item>
    
    <item>
      <title>current</title>
      <link>/docs/components/cdsctl/context/current/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/context/current/</guid>
      <description>cdsctl context current Show the current context
Synopsis Show the current context
cdsctl context current Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl context	- Manage cdsctl config file  </description>
    </item>
    
    <item>
      <title>dbmigrate</title>
      <link>/docs/components/cdsctl/health/dbmigrate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/health/dbmigrate/</guid>
      <description>cdsctl health dbmigrate Show DB Migrate status
Synopsis Show DB Migrate status
cdsctl health dbmigrate [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>debianPush</title>
      <link>/docs/actions/debianpush/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/debianpush/</guid>
      <description>This pushes Debian package on an artifactory debian repository.
Parameters  architectures: List of debian architectures (space separated) components: List of debian components (space separated) distributions: List of debian distributions (space separated) files: List of files (space separated) label: Fill the deb.release.label parameter origin: Fill the deb.release.origin parameter  </description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/action/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/action/delete/</guid>
      <description>cdsctl action delete Delete a CDS action
Synopsis Useful to delete a CDS action
cdsctl action delete myAction # this will not fail if action does not exist cdsctl action delete myActionNotExist --force  cdsctl action delete ACTION-PATH [flags] Options  --force if true, do not fail if action does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/admin/cdn/unit/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/cdn/unit/delete/</guid>
      <description>cdsctl admin cdn unit delete delete the given unit
Synopsis delete the given unit
cdsctl admin cdn unit delete UNIT_ID Examples cdsctl admin cdn unit delete &amp;lt;unit_id&amp;gt; Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin cdn unit	- Manage CDS CDN unit  </description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/admin/database/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/database/delete/</guid>
      <description>cdsctl admin database delete Delete a database migration from table gorp_migration (use with caution)
Synopsis Delete a database migration from table gorp_migration (use with caution)
cdsctl admin database delete SERVICE ID Examples  $ cdsctl admin database delete api id-migration-to-delete $ cdsctl admin database delete cdn id-migration-to-delete Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/admin/features/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/features/delete/</guid>
      <description>cdsctl admin features delete Delete
Synopsis Delete
cdsctl admin features delete NAME [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin features	- Manage CDS feature flipping rules  </description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/admin/hooks/repository/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/hooks/repository/delete/</guid>
      <description>cdsctl admin hooks repository delete Remove repository
Synopsis Remove repository
cdsctl admin hooks repository delete VCS-SERVER REPOSITORY [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin hooks repository	- Manage repositories where there were events  </description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/admin/integration-model/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/integration-model/delete/</guid>
      <description>cdsctl admin integration-model delete Delete a CDS Integration model
Synopsis Delete a CDS Integration model
cdsctl admin integration-model delete NAME [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin integration-model	- Manage CDS Integration models  </description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/admin/organization/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/organization/delete/</guid>
      <description>cdsctl admin organization delete Delete an organization
Synopsis Delete an organization
cdsctl admin organization delete ORGANIZATION-NAME [flags] Examples cdsctl admin organization delete &amp;lt;organization-name&amp;gt; Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin organization	- Manage CDS Organization  </description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/admin/plugins/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/plugins/delete/</guid>
      <description>cdsctl admin plugins delete Delete a CDS Plugin
Synopsis Delete a CDS Plugin
cdsctl admin plugins delete NAME [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin plugins	- Manage CDS Plugins  </description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/admin/services/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/services/delete/</guid>
      <description>cdsctl admin services delete Delete a CDS service from registered service
Synopsis Delete a CDS service from registered service
cdsctl admin services delete NAME ... [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/application/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/application/delete/</guid>
      <description>cdsctl application delete Delete a CDS application
Synopsis Delete a CDS application
cdsctl application delete [ PROJECT-KEY APPLICATION-NAME ] [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl application	- Manage CDS application  </description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/application/keys/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/application/keys/delete/</guid>
      <description>cdsctl application keys delete Delete CDS an application key
Synopsis Delete CDS an application key
cdsctl application keys delete [ PROJECT-KEY APPLICATION-NAME ] KEY-NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl application keys	- Manage CDS application keys  </description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/application/variable/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/application/variable/delete/</guid>
      <description>cdsctl application variable delete Delete CDS application variable
Synopsis Delete CDS application variable
cdsctl application variable delete [ PROJECT-KEY APPLICATION-NAME ] VARIABLE-NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl application variable	- Manage CDS application variables  </description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/consumer/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/consumer/delete/</guid>
      <description>cdsctl consumer delete Delete an auth consumer
Synopsis Delete an auth consumer
cdsctl consumer delete CONSUMER-ID [USERNAME] Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl consumer	- Manage CDS auth consumers  </description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/encrypt/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/encrypt/delete/</guid>
      <description>cdsctl encrypt delete Delete the given encrypted variable of your CDS project
Synopsis Delete the given encrypted variable of your CDS project
cdsctl encrypt delete [ PROJECT-KEY ] NAME [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/environment/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/environment/delete/</guid>
      <description>cdsctl environment delete Delete a CDS environment
Synopsis Delete a CDS environment
cdsctl environment delete [ PROJECT-KEY ] ENVIRONMENT-NAME [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl environment	- Manage CDS environment  </description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/environment/keys/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/environment/keys/delete/</guid>
      <description>cdsctl environment keys delete Delete CDS environment key
Synopsis Delete CDS environment key
cdsctl environment keys delete [ PROJECT-KEY ] ENV-NAME KEY-NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl environment keys	- Manage CDS environment keys  </description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/environment/variable/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/environment/variable/delete/</guid>
      <description>cdsctl environment variable delete Delete CDS environment variable
Synopsis Delete CDS environment variable
cdsctl environment variable delete [ PROJECT-KEY ] ENV-NAME VARIABLE-NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl environment variable	- Manage CDS environment variables  </description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/experimental/hatchery/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/hatchery/delete/</guid>
      <description>cdsctl experimental hatchery delete Remove hatchery
Synopsis Remove hatchery
cdsctl experimental hatchery delete HATCHERYIDENTIFIER [flags] Examples cdsctl hatchery delete Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental hatchery	- CDS Experimental hatchery commands  </description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/experimental/organization/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/organization/delete/</guid>
      <description>cdsctl experimental organization delete Remove organization
Synopsis Remove organization
cdsctl experimental organization delete ORGANIZATIONIDENTIFIER [flags] Examples cdsctl organization delete Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental organization	- CDS Experimental organization commands  </description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/experimental/project/notification/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/project/notification/delete/</guid>
      <description>cdsctl experimental project notification delete Delete a notification on a project
Synopsis Delete a notification on a project
cdsctl experimental project notification delete [ PROJECT-KEY ] NAME [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/experimental/project/repository/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/project/repository/delete/</guid>
      <description>cdsctl experimental project repository delete Remove a repository from on a project
Synopsis Remove a repository from on a project
cdsctl experimental project repository delete [ PROJECT-KEY ] VCS-NAME REPOSITORY-NAME [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/experimental/project/variableset/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/project/variableset/delete/</guid>
      <description>cdsctl experimental project variableset delete Delete a variable set on a project
Synopsis Delete a variable set on a project
cdsctl experimental project variableset delete [ PROJECT-KEY ] NAME [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist --with-items Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/experimental/project/variableset/item/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/project/variableset/item/delete/</guid>
      <description>cdsctl experimental project variableset item delete Delete an item from a variable set
Synopsis Delete an item from a variable set
cdsctl experimental project variableset item delete [ PROJECT-KEY ] VARIABLESET-NAME ITEM-NAME [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/experimental/rbac/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/rbac/delete/</guid>
      <description>cdsctl experimental rbac delete Delete a permission
Synopsis Delete a permission
cdsctl experimental rbac delete PERMISSION_IDENTIFIER [flags] Examples cdsctl rbac delete &amp;lt;permission_identifier&amp;gt; Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental rbac	- CDS Experimental rbac commands  </description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/experimental/region/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/region/delete/</guid>
      <description>cdsctl experimental region delete Remove region
Synopsis Remove region
cdsctl experimental region delete REGIONIDENTIFIER [flags] Examples cdsctl region delete Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental region	- CDS Experimental region commands  </description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/group/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/group/delete/</guid>
      <description>cdsctl group delete Delete a CDS group
Synopsis Delete a CDS group
cdsctl group delete GROUP-NAME [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl group	- Manage CDS group  </description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/group/member/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/group/member/delete/</guid>
      <description>cdsctl group member delete Delete a member of a group
Synopsis Delete a member of a group
cdsctl group member delete GROUP-NAME USERNAME [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/pipeline/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/pipeline/delete/</guid>
      <description>cdsctl pipeline delete Delete a CDS pipeline
Synopsis Delete a CDS pipeline
cdsctl pipeline delete [ PROJECT-KEY ] PIPELINE-NAME [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl pipeline	- Manage CDS pipeline  </description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/project/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/project/delete/</guid>
      <description>cdsctl project delete Delete a CDS project
Synopsis Delete a CDS project
cdsctl project delete [ PROJECT-KEY ] [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl project	- Manage CDS project  </description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/project/integration/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/project/integration/delete/</guid>
      <description>cdsctl project integration delete Delete a integration configuration on a project
Synopsis Delete a integration configuration on a project
cdsctl project integration delete [ PROJECT-KEY ] NAME [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/project/keys/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/project/keys/delete/</guid>
      <description>cdsctl project keys delete Delete CDS project key
Synopsis Delete CDS project key
cdsctl project keys delete [ PROJECT-KEY ] KEY-NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl project keys	- Manage CDS project keys  </description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/project/variable/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/project/variable/delete/</guid>
      <description>cdsctl project variable delete Delete CDS project variable
Synopsis Delete CDS project variable
cdsctl project variable delete [ PROJECT-KEY ] VARIABLE-NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl project variable	- Manage CDS project variables  </description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/project/vcs/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/project/vcs/delete/</guid>
      <description>cdsctl project vcs delete Delete a VCS configuration on a project
Synopsis Delete a VCS configuration on a project
cdsctl project vcs delete [ PROJECT-KEY ] NAME [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/session/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/session/delete/</guid>
      <description>cdsctl session delete Delete an auth session
Synopsis Delete an auth session
cdsctl session delete SESSION-ID [USERNAME] Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl session	- Manage CDS auth sessions  </description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/template/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/template/delete/</guid>
      <description>cdsctl template delete Delete a workflow template
Synopsis Delete a workflow template
cdsctl template delete [TEMPLATE-PATH] [flags] Examples cdsctl template delete group-name/template-slug Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl template	- Manage CDS workflow template  </description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/user/gpg/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/user/gpg/delete/</guid>
      <description>cdsctl user gpg delete Delete CDS user gpg key
Synopsis Delete CDS user gpg key
cdsctl user gpg delete KEYID [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl user gpg	- Manage CDS user gpg keys  </description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/worker/model/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/worker/model/delete/</guid>
      <description>cdsctl worker model delete Delete a CDS worker model
Synopsis Delete a CDS worker model
cdsctl worker model delete WORKER-MODEL-PATH [flags] Examples cdsctl worker model delete shared.infra/myModel Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/workflow/advanced/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/workflow/advanced/delete/</guid>
      <description>cdsctl workflow advanced delete Delete a CDS workflow
Synopsis Delete a CDS workflow
cdsctl workflow advanced delete [ PROJECT-KEY WORKFLOW-NAME ] [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist -d, --with-dependencies delete and clean workflow dependencies Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>delete</title>
      <link>/docs/components/cdsctl/workflow/label/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/workflow/label/delete/</guid>
      <description>cdsctl workflow label delete Delete label from one workflow
Synopsis Delete label from one workflow
cdsctl workflow label delete [ PROJECT-KEY WORKFLOW-NAME ] LABEL Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl workflow label	- Manage Workflow Label  </description>
    </item>
    
    <item>
      <title>delete-items</title>
      <link>/docs/components/cdsctl/admin/cdn/unit/delete-items/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/cdn/unit/delete-items/</guid>
      <description>cdsctl admin cdn unit delete-items mark item as delete for given unit
Synopsis mark item as delete for given unit
cdsctl admin cdn unit delete-items UNIT_ID Examples cdsctl admin cdn unit delete-items &amp;lt;unit_id&amp;gt; Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin cdn unit	- Manage CDS CDN unit  </description>
    </item>
    
    <item>
      <title>DeployApplication</title>
      <link>/docs/actions/builtin-deployapplication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/builtin-deployapplication/</guid>
      <description>DeployApplication is a builtin action, you can&amp;rsquo;t modify it.
Deploy an application, useful only if you have a Deployment Plaftorm associated to your current application.
Parameters No Parameter
Requirements No Requirement
YAML example Example of a pipeline using DeployApplication action:
version: v1.0 name: Pipeline1 stages: - Stage1 jobs: - job: Job1 stage: Stage1 steps: - deploy: &amp;#39;{{.cds.application}}&amp;#39; Example  Add a deployment platform on your application.   Create a workflow, add a pipeline and an application linked to a platform.</description>
    </item>
    
    <item>
      <title>deployArsenal</title>
      <link>/docs/actions/deployarsenal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/deployarsenal/</guid>
      <description>This action trigger an arsenal deployment and retrieve the final status of it.
Parameters  alternative-config: Alternative configuration to push with the deployment retry-delay: Time between try of getting the deployment final status retry-max: Maximum number of retry to get the deployment status token: Deployment token version: The version to deploy  </description>
    </item>
    
    <item>
      <title>detach</title>
      <link>/docs/components/cdsctl/template/detach/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/template/detach/</guid>
      <description>cdsctl template detach Detach a workflow from template
Synopsis Detach a workflow from template
cdsctl template detach [ PROJECT-KEY WORKFLOW-NAME ] Examples cdsctl template detach project-key workflow-name Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl template	- Manage CDS workflow template  </description>
    </item>
    
    <item>
      <title>disable</title>
      <link>/docs/components/cdsctl/admin/maintenance/disable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/maintenance/disable/</guid>
      <description>cdsctl admin maintenance disable Disable CDS maintenance
Synopsis Disable CDS maintenance
cdsctl admin maintenance disable [flags] Options  --hooks provided to propagate to the hooks services Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin maintenance	- Manage CDS maintenance  </description>
    </item>
    
    <item>
      <title>disable</title>
      <link>/docs/components/cdsctl/project/keys/disable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/project/keys/disable/</guid>
      <description>cdsctl project keys disable Disable CDS project key
Synopsis Disable CDS project key
cdsctl project keys disable [ PROJECT-KEY ] KEY-NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl project keys	- Manage CDS project keys  </description>
    </item>
    
    <item>
      <title>disable</title>
      <link>/docs/components/cdsctl/worker/disable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/worker/disable/</guid>
      <description>cdsctl worker disable Disable CDS workers
Synopsis Disable one on more CDS worker by their names.
For example if your want to disable all CDS workers you can run:
$ cdsctl worker disable $(cdsctl worker list)
cdsctl worker disable NAME ... Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>doc</title>
      <link>/docs/components/cdsctl/action/builtin/doc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/action/builtin/doc/</guid>
      <description>cdsctl action builtin doc Generate Builtin action documentation: cdsctl action builtin doc &amp;lt;name&amp;gt;
Synopsis Generate Builtin action documentation: cdsctl action builtin doc &amp;lt;name&amp;gt;
cdsctl action builtin doc NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl action builtin	- Manage CDS builtin action  </description>
    </item>
    
    <item>
      <title>doc</title>
      <link>/docs/components/cdsctl/action/doc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/action/doc/</guid>
      <description>cdsctl action doc Generate action documentation: cdsctl action doc &amp;lt;path-to-file&amp;gt;
Synopsis Generate action documentation: cdsctl action doc &amp;lt;path-to-file&amp;gt;
cdsctl action doc PATH Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl action	- Manage CDS action  </description>
    </item>
    
    <item>
      <title>doc</title>
      <link>/docs/components/cdsctl/admin/plugins/doc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/plugins/doc/</guid>
      <description>cdsctl admin plugins doc Generate documentation in markdown for a plugin
Synopsis Generate documentation in markdown for a plugin
cdsctl admin plugins doc PATH Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin plugins	- Manage CDS Plugins  </description>
    </item>
    
    <item>
      <title>Docker Swarm</title>
      <link>/docs/integrations/swarm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/integrations/swarm/</guid>
      <description>The Docker Swarm integration have to be configured by CDS administrator.
This integration allows you to run the Swarm Hatchery to start CDS Workers.
As an end-users, this integration allows:
 to use Worker Models of type &amp;ldquo;Docker&amp;rdquo; to use Service Prerequisite on your CDS Jobs.  Start Swarm hatchery Generate a token:
$ cdsctl consumer new me \ --scopes=Hatchery,RunExecution,Service,WorkerModel \ --name=&amp;#34;hatchery.swarm&amp;#34; \ --description=&amp;#34;Consumer token for swarm hatchery&amp;#34; \ --groups=&amp;#34;&amp;#34; \ --no-interactive Builtin consumer successfully created, use the following token to sign in: xxxxxxxx.</description>
    </item>
    
    <item>
      <title>dockerPush</title>
      <link>/docs/actions/dockerpush/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/dockerpush/</guid>
      <description>This pushes Docker image
Parameters  image: Image name registry: Docker registry to push on.  This parameter can be empty when an Artifactory integration is set up.
 registryAuth: Docker base64url-encoded auth configuration.  See docker authentication section for more details: https://docs.docker.com/engine/api/v1.41/#section/Authentication.
This parameter can be empty when an Artifactory integration is set up.
 tags: The tags to associate with the image on the registry.  This parameter can be empty if you want to keep the same tag.</description>
    </item>
    
    <item>
      <title>downgrade</title>
      <link>/docs/components/engine/database/downgrade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/engine/database/downgrade/</guid>
      <description>engine database downgrade Downgrade schema
Synopsis Undo a database migration.
engine database downgrade [flags] Options  --db-connect-timeout int Maximum wait for connection, in seconds (default 10) --db-host string DB Host (default &amp;quot;localhost&amp;quot;) --db-maxconn int DB Max connection (default 20) --db-name string DB Name (default &amp;quot;cds&amp;quot;) --db-password string DB Password --db-port int DB Port (default 5432) --db-role string DB Role --db-schema string DB Schema (default &amp;quot;public&amp;quot;) --db-sslmode string DB SSL Mode: require (default), verify-full, or disable (default &amp;quot;require&amp;quot;) --db-timeout int Statement timeout value in milliseconds (default 3000) --db-user string DB User (default &amp;quot;cds&amp;quot;) --dry-run Dry run downgrade --limit int Max number of migrations to apply (0 = unlimited) (default 1) --migrate-dir string CDS SQL Migration directory (default &amp;quot;.</description>
    </item>
    
    <item>
      <title>download</title>
      <link>/development/rest/download/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/rest/download/</guid>
      <description>GET /download/plugin/&amp;lt;name&amp;gt;/binary/&amp;lt;os&amp;gt;/&amp;lt;arch&amp;gt;/infos    URL /download/plugin/&amp;lt;name&amp;gt;/binary/&amp;lt;os&amp;gt;/&amp;lt;arch&amp;gt;/infos     Method GET   Permissions Auth: true   Code getGRPCluginBinaryInfosHandler    GET /download    URL /download     Method GET   Permissions Auth: true   Code downloadsHandler    </description>
    </item>
    
    <item>
      <title>download</title>
      <link>/docs/components/cdsctl/experimental/workflow/logs/download/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/workflow/logs/download/</guid>
      <description>cdsctl experimental workflow logs download Get the workflow run job status
Synopsis Get the workflow run job status
cdsctl experimental workflow logs download PROJ_KEY RUN_IDENTIFIER [flags] Examples cdsctl experimental workflow logs download &amp;lt;proj_key&amp;gt; &amp;lt;run_identifier&amp;gt; Options  --pattern string Filter on job name Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>download</title>
      <link>/docs/components/cdsctl/workflow/artifact/download/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/workflow/artifact/download/</guid>
      <description>cdsctl workflow artifact download Download artifacts of one Workflow Run
Synopsis Download artifacts of one Workflow Run
cdsctl workflow artifact download [ PROJECT-KEY WORKFLOW-NAME ] NUMBER [ARTIFACT-NAME] [flags] Options  --cdn-url string overwrite cdn url (deprecated) --exclude string exclude files from download - could be a regex: *.log Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>download</title>
      <link>/docs/components/cdsctl/workflow/logs/download/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/workflow/logs/download/</guid>
      <description>cdsctl workflow logs download Download logs from a workflow run.
Synopsis Download logs from a workflow run. You can download all logs files or just one log if you want.
# download all logs files on latest run $ cdsctl workflow logs download KEY WF # download all logs files on run number 1 $ cdsctl workflow logs download KEY WF 1 # download only one file: $ cdsctl workflow logs download KEY WF 1 --pattern=&amp;quot;MyStage&amp;quot; # this will download WF-1.</description>
    </item>
    
    <item>
      <title>download</title>
      <link>/docs/components/cdsctl/workflow/result/download/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/workflow/result/download/</guid>
      <description>cdsctl workflow result download download workflow run result
Synopsis download workflow run result
cdsctl workflow result download [ PROJECT-KEY WORKFLOW-NAME ] RUN-NUMBER RESULT-ID Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl workflow result	- Manage Workflow Run Result  </description>
    </item>
    
    <item>
      <title>download</title>
      <link>/docs/components/worker/download/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/worker/download/</guid>
      <description>worker download worker download [--workflow=&amp;lt;workflow-name&amp;gt;] [--number=&amp;lt;run-number&amp;gt;] [--tag=&amp;lt;tag&amp;gt;] [--pattern=&amp;lt;pattern&amp;gt;]
Synopsis Inside a job, there are two ways to download an artifact:
 with a step using action Download Artifacts with a step script (https://ovh.github.io/cds/docs/actions/builtin-script/), using the worker command.  Worker Command:
worker download --tag=&amp;lt;tag&amp;gt; &amp;lt;path&amp;gt;  Example:
worker download --pattern=&amp;quot;files.*.yml&amp;quot;  Theses two commands have the same result:
worker download worker download --workflow={{.cds.workflow}} --number={{.cds.run.number}}  worker download [flags] Options  --number string Workflow Number to download from.</description>
    </item>
    
    <item>
      <title>downloadArtifact</title>
      <link>/docs/actions/downloadartifact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/downloadartifact/</guid>
      <description>Download a build artifact that was previously uploaded in the workflow by the upload-artifact action.
Parameters   name: Artifact name or wilcard pattern. If empty, all the artifacts identifed as &amp;ldquo;generic&amp;rdquo; result previously uploaded in the workflow will be downloaded.
  path: Destination path If empty, all the artifacts will be downloadded in the job workspace.
  </description>
    </item>
    
    <item>
      <title>edit</title>
      <link>/docs/components/engine/config/edit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/engine/config/edit/</guid>
      <description>engine config edit Edit a CDS configuration file
Synopsis $ engine config edit key=value key=value
engine config edit [flags] Examples $ engine config edit conf.toml log.level=debug hatchery.swarm.commonConfiguration.name=hatchery-swarm-name Options  --env Print configuration as environment variable --output string output file SEE ALSO  engine config	- Manage CDS Configuration  </description>
    </item>
    
    <item>
      <title>enable</title>
      <link>/docs/components/cdsctl/admin/maintenance/enable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/maintenance/enable/</guid>
      <description>cdsctl admin maintenance enable Enable CDS maintenance
Synopsis Enable CDS maintenance
cdsctl admin maintenance enable [flags] Options  --hooks provided to propagate to the hooks services Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin maintenance	- Manage CDS maintenance  </description>
    </item>
    
    <item>
      <title>enable</title>
      <link>/docs/components/cdsctl/project/keys/enable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/project/keys/enable/</guid>
      <description>cdsctl project keys enable Enable CDS project key
Synopsis Enable CDS project key
cdsctl project keys enable [ PROJECT-KEY ] KEY-NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl project keys	- Manage CDS project keys  </description>
    </item>
    
    <item>
      <title>executions</title>
      <link>/docs/components/cdsctl/admin/hooks/executions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/hooks/executions/</guid>
      <description>cdsctl admin hooks executions List CDS Executions for one task
Synopsis List CDS Executions for one task
cdsctl admin hooks executions UUID [flags] Examples cdsctl admin hooks executions 5178ce1f-2f76-45c5-a203-58c10c3e2c73 Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>exit</title>
      <link>/docs/components/worker/exit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/worker/exit/</guid>
      <description>worker exit worker exit
Synopsis worker exit command lets job finish current step with exit code 0 (success) and disabled all further steps
worker exit SEE ALSO  worker	- CDS Worker  </description>
    </item>
    
    <item>
      <title>export</title>
      <link>/docs/components/cdsctl/action/export/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/action/export/</guid>
      <description>cdsctl action export Export a CDS action
Synopsis Export a CDS action
cdsctl action export ACTION-PATH [flags] Options  --format string Specify export format (json or yaml) (default &amp;quot;yaml&amp;quot;) Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl action	- Manage CDS action  </description>
    </item>
    
    <item>
      <title>export</title>
      <link>/docs/components/cdsctl/admin/features/export/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/features/export/</guid>
      <description>cdsctl admin features export Export a feature as a yaml file
Synopsis Export a feature as a yaml file
cdsctl admin features export NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin features	- Manage CDS feature flipping rules  </description>
    </item>
    
    <item>
      <title>export</title>
      <link>/docs/components/cdsctl/admin/integration-model/export/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/integration-model/export/</guid>
      <description>cdsctl admin integration-model export Export a CDS Integration model
Synopsis Export a CDS Integration model
cdsctl admin integration-model export NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin integration-model	- Manage CDS Integration models  </description>
    </item>
    
    <item>
      <title>export</title>
      <link>/docs/components/cdsctl/admin/metadata/application/export/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/metadata/application/export/</guid>
      <description>cdsctl admin metadata application export export CDS Application Metadata
Synopsis export CDS Application Metadata
cdsctl admin metadata application export [flags] Options  --export-file string Filename of file created (default &amp;quot;export_metadata_applications.csv&amp;quot;) Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin metadata application	- Manage CDS Application Metadata  </description>
    </item>
    
    <item>
      <title>export</title>
      <link>/docs/components/cdsctl/admin/metadata/project/export/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/metadata/project/export/</guid>
      <description>cdsctl admin metadata project export export CDS Project Metadata
Synopsis export CDS Project Metadata
cdsctl admin metadata project export [flags] Options  --export-file string Filename of file created (default &amp;quot;export_metadata_projects.csv&amp;quot;) Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin metadata project	- Manage CDS Project Metadata  </description>
    </item>
    
    <item>
      <title>export</title>
      <link>/docs/components/cdsctl/admin/metadata/workflow/export/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/metadata/workflow/export/</guid>
      <description>cdsctl admin metadata workflow export export CDS Workflow Metadata
Synopsis export CDS Workflow Metadata
cdsctl admin metadata workflow export [flags] Options  --export-file string Filename of file created (default &amp;quot;export_metadata_workflows.csv&amp;quot;) Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin metadata workflow	- Manage CDS Workflow Metadata  </description>
    </item>
    
    <item>
      <title>export</title>
      <link>/docs/components/cdsctl/admin/plugins/export/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/plugins/export/</guid>
      <description>cdsctl admin plugins export Export a CDS Plugin
Synopsis Export a CDS Plugin
cdsctl admin plugins export NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin plugins	- Manage CDS Plugins  </description>
    </item>
    
    <item>
      <title>export</title>
      <link>/docs/components/cdsctl/application/export/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/application/export/</guid>
      <description>cdsctl application export Export an application
Synopsis Export an application
cdsctl application export [ PROJECT-KEY APPLICATION-NAME ] [flags] Options  --format string Specify export format (json or yaml) (default &amp;quot;yaml&amp;quot;) Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl application	- Manage CDS application  </description>
    </item>
    
    <item>
      <title>export</title>
      <link>/docs/components/cdsctl/environment/export/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/environment/export/</guid>
      <description>cdsctl environment export Export an environment
Synopsis Export an environment
cdsctl environment export [ PROJECT-KEY ] ENVIRONMENT-NAME [flags] Options  --format string Specify export format (json or yaml) (default &amp;quot;yaml&amp;quot;) Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl environment	- Manage CDS environment  </description>
    </item>
    
    <item>
      <title>export</title>
      <link>/docs/components/cdsctl/experimental/project/notification/export/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/project/notification/export/</guid>
      <description>cdsctl experimental project notification export Export notification settings from a project
Synopsis Export notification settings from a project
cdsctl experimental project notification export [ PROJECT-KEY ] NAME Examples cdsctl notification export MY-PROJECT Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental project notification	- Manage Notification on a CDS project  </description>
    </item>
    
    <item>
      <title>export</title>
      <link>/docs/components/cdsctl/pipeline/export/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/pipeline/export/</guid>
      <description>cdsctl pipeline export Export CDS pipeline
Synopsis Export CDS pipeline
cdsctl pipeline export [ PROJECT-KEY ] PIPELINE-NAME [flags] Options  --format string Specify export format (json or yaml) (default &amp;quot;yaml&amp;quot;) Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl pipeline	- Manage CDS pipeline  </description>
    </item>
    
    <item>
      <title>export</title>
      <link>/docs/components/cdsctl/project/integration/export/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/project/integration/export/</guid>
      <description>cdsctl project integration export Export a integration configuration from a project to stdout
Synopsis Export a integration configuration from a project to stdout
cdsctl project integration export [ PROJECT-KEY ] NAME Examples cdsctl project integration export MY-PROJECT MY-INTEGRATION-NAME &amp;gt; file.yaml Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>export</title>
      <link>/docs/components/cdsctl/project/vcs/export/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/project/vcs/export/</guid>
      <description>cdsctl project vcs export Export a VCS configuration from a project to stdout
Synopsis Export a VCS configuration from a project to stdout
cdsctl project vcs export [ PROJECT-KEY ] NAME Examples cdsctl vcs export MY-PROJECT MY-VCS-SERVER-NAME &amp;gt; file.yaml Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>export</title>
      <link>/docs/components/cdsctl/template/instances/export/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/template/instances/export/</guid>
      <description>cdsctl template instances export Get instances for a CDS workflow template as yaml file
Synopsis Get instances for a CDS workflow template as yaml file
cdsctl template instances export [TEMPLATE-PATH] [flags] Examples cdsctl template instances group-name/template-slug Options  --filter-params stringArray Specify filter on params for template like --filter-params paramKey=paramValue, wil return only instances that have params that match. Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>export</title>
      <link>/docs/components/cdsctl/worker/model/export/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/worker/model/export/</guid>
      <description>cdsctl worker model export Export a worker model
Synopsis Export a worker model
cdsctl worker model export WORKER-MODEL-PATH [flags] Examples cdsctl worker model export myGroup/myModel Options  --format string Specify export format (json or yaml) (default &amp;quot;yaml&amp;quot;) Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl worker model	- Manage Worker Model  </description>
    </item>
    
    <item>
      <title>export</title>
      <link>/docs/components/cdsctl/workflow/export/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/workflow/export/</guid>
      <description>cdsctl workflow export Export a workflow
Synopsis Export a workflow
cdsctl workflow export [ PROJECT-KEY WORKFLOW-NAME ] [flags] Options  --format string Specify export format (json or yaml) (default &amp;quot;yaml&amp;quot;) --with-permissions Export permissions Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl workflow	- Manage CDS workflow  </description>
    </item>
    
    <item>
      <title>export</title>
      <link>/docs/components/worker/export/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/worker/export/</guid>
      <description>worker export worker export &amp;lt;varname&amp;gt; &amp;lt;value&amp;gt;
Synopsis Inside a step script (https://ovh.github.io/cds/docs/actions/builtin-script/), you can create a build variable with the worker command:
worker export foo bar  then, you can use new build variable:
echo &amp;quot;{{.cds.build.foo}}&amp;quot;  Scope You can use the build variable in :
 another step of the current job with {{.cds.build.varname}} the next stages in same pipeline {{.cds.build.varname}} the next pipelines {{.workflow.pipelineName.build.varname}} with pipelineName the name of the pipeline in your workflow  worker export SEE ALSO  worker	- CDS Worker  </description>
    </item>
    
    <item>
      <title>favorite</title>
      <link>/docs/components/cdsctl/project/favorite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/project/favorite/</guid>
      <description>cdsctl project favorite Add or delete a CDS project to your personal bookmarks
Synopsis Add or delete a CDS project to your personal bookmarks
cdsctl project favorite [ PROJECT-KEY ] Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl project	- Manage CDS project  </description>
    </item>
    
    <item>
      <title>favorite</title>
      <link>/docs/components/cdsctl/user/favorite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/user/favorite/</guid>
      <description>cdsctl user favorite Display all the user favorites
Synopsis Display all the user favorites
cdsctl user favorite Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl user	- Manage CDS user  </description>
    </item>
    
    <item>
      <title>favorite</title>
      <link>/docs/components/cdsctl/workflow/favorite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/workflow/favorite/</guid>
      <description>cdsctl workflow favorite Add or delete a CDS workflow to your personal bookmarks
Synopsis Add or delete a CDS workflow to your personal bookmarks
cdsctl workflow favorite [ PROJECT-KEY WORKFLOW-NAME ] Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl workflow	- Manage CDS workflow  </description>
    </item>
    
    <item>
      <title>feature</title>
      <link>/development/rest/feature/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/rest/feature/</guid>
      <description>POST /feature/enabled/&amp;lt;name&amp;gt;    URL /feature/enabled/&amp;lt;name&amp;gt;     Method POST   Permissions Auth: true   Code isFeatureEnabledHandler    </description>
    </item>
    
    <item>
      <title>fish</title>
      <link>/docs/components/cdsctl/completion/fish/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/completion/fish/</guid>
      <description>cdsctl completion fish Generate the autocompletion script for fish
Synopsis Generate the autocompletion script for the fish shell.
To load completions in your current shell session:
cdsctl completion fish | source  To load completions for every new session, execute once:
cdsctl completion fish &amp;gt; ~/.config/fish/completions/cdsctl.fish  You will need to start a new shell for this setup to take effect.
cdsctl completion fish [flags] Options  --no-descriptions disable completion descriptions Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>fish</title>
      <link>/docs/components/engine/completion/fish/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/engine/completion/fish/</guid>
      <description>engine completion fish Generate the autocompletion script for fish
Synopsis Generate the autocompletion script for the fish shell.
To load completions in your current shell session:
engine completion fish | source  To load completions for every new session, execute once:
engine completion fish &amp;gt; ~/.config/fish/completions/engine.fish  You will need to start a new shell for this setup to take effect.
engine completion fish [flags] Options  --no-descriptions disable completion descriptions SEE ALSO  engine completion	- Generate the autocompletion script for the specified shell  </description>
    </item>
    
    <item>
      <title>fish</title>
      <link>/docs/components/worker/completion/fish/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/worker/completion/fish/</guid>
      <description>worker completion fish Generate the autocompletion script for fish
Synopsis Generate the autocompletion script for the fish shell.
To load completions in your current shell session:
worker completion fish | source  To load completions for every new session, execute once:
worker completion fish &amp;gt; ~/.config/fish/completions/worker.fish  You will need to start a new shell for this setup to take effect.
worker completion fish [flags] Options  --no-descriptions disable completion descriptions SEE ALSO  worker completion	- Generate the autocompletion script for the specified shell  </description>
    </item>
    
    <item>
      <title>Gerrit Repository Manager</title>
      <link>/docs/integrations/gerrit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/integrations/gerrit/</guid>
      <description>The Gerrit Repository Manager integration have to be configured on your CDS by a CDS Administrator.
This integration allows you to link a Git Repository hosted by Gerrit to a CDS application.
This integration enables some features:
 Gerrit Hooks Easy to use action CheckoutApplication and GitClone for advanced usage Send comments on your Pull-Requests when a workflow is failed Add a vote -1/+1 on a change  How to configure Gerrit integration You will have to create 2 users on gerrit: [How to] An Administrator User ( with SSH KEY ), to get event from Gerrit Server An User on gerrit ( with httpPassword ), to comment changes with workflow result  Import configuration Create a yml file:</description>
    </item>
    
    <item>
      <title>GitClone</title>
      <link>/docs/actions/builtin-gitclone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/builtin-gitclone/</guid>
      <description>GitClone is a builtin action, you can&amp;rsquo;t modify it.
Clone a repository into a new directory.
Parameters  branch: (optional) Instead of pointing the newly created HEAD to the branch pointed to by the cloned repository’s HEAD, point to {{.git.branch}} branch instead. commit: (optional) Set the current branch head (HEAD) to the commit. depth: (optional) Clone with a depth of 50 by default. You can remove &amp;ndash;depth with the value &amp;lsquo;false&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>GitHub Authentication</title>
      <link>/docs/integrations/github/github_authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/integrations/github/github_authentication/</guid>
      <description>The GitHub Authentication Integration have to be configured on your CDS by a CDS Administrator.
This integration allows you to authenticate user with the GitHub Authentication.
Resume on what you have to do before using the GitHub Authentication Integration  As a CDS Administrator: Create a CDS application on GitHub Complete CDS Configuration File  How to configure GitHub Authentication integration Create a CDS application on GitHub As a CDS Administrator</description>
    </item>
    
    <item>
      <title>GitHub Repository Manager</title>
      <link>/docs/integrations/github/github_repository_manager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/integrations/github/github_repository_manager/</guid>
      <description>The GitHub Repository Manager Integration have to be configured on your CDS by a CDS Administrator.
This integration allows you to link a Git Repository hosted by GitHub to a CDS Application.
This integration enables some features:
 Git Repository Webhook Git Repository Poller Easy to use action CheckoutApplication and GitClone for advanced usage Send build notifications on your Pull-Requests and Commits on GitHub. More informations Send comments on your Pull-Requests when a workflow is failed.</description>
    </item>
    
    <item>
      <title>GitLab Authentication</title>
      <link>/docs/integrations/gitlab/gitlab_authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/integrations/gitlab/gitlab_authentication/</guid>
      <description>The GitHub Authentication Integration have to be configured on your CDS by a CDS Administrator.
This integration allows you to authenticate user with the GitHub Authentication.
Resume on what you have to do before using the GitHub Authentication Integration  As a CDS Administrator: Create a CDS application on GitLab Complete CDS Configuration File  How to configure GitLab integration What you need to perform the following steps:
 GitLab admin privileges  Create a CDS application on GitLab Notice: if you have already a CDS Application in GitLab for Repository Manager, you can&amp;rsquo;t reuse it for Authentication.</description>
    </item>
    
    <item>
      <title>GitLab Repository Manager</title>
      <link>/docs/integrations/gitlab/gitlab_repository_manager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/integrations/gitlab/gitlab_repository_manager/</guid>
      <description>The GitLab Repository Manager Integration have to be configured on your CDS by a CDS Administrator.
This integration allows you to link a Git Repository hosted by GitLab to a CDS Application.
This integration enables some features:
 Git Repository Webhook Easy to use action CheckoutApplication and GitClone for advanced usage Send build notifications on your Pull-Requests and Commits on GitLab. More informations  Create the Personal Access Token on GitLab Generate a new token on https://gitlab.</description>
    </item>
    
    <item>
      <title>GitTag</title>
      <link>/docs/actions/builtin-gittag/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/builtin-gittag/</guid>
      <description>GitTag is a builtin action, you can&amp;rsquo;t modify it.
Tag the current branch and push it. Use vcs config from your application. Semver used if fully compatible with https://semver.org.
Parameters  path: (optional) The path to your git directory. prefix: (optional) Add a prefix for tag name. tagLevel: Set the level of the tag. Must be &amp;lsquo;major&amp;rsquo; or &amp;lsquo;minor&amp;rsquo; or &amp;lsquo;patch&amp;rsquo;. tagMessage: (optional) Set a message for the tag. tagMetadata: (optional) Metadata of the tag.</description>
    </item>
    
    <item>
      <title>grant</title>
      <link>/docs/components/cdsctl/group/grant/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/group/grant/</guid>
      <description>cdsctl group grant Grant a CDS group in a project or workflow
Synopsis Grant a CDS group in a project or workflow
cdsctl group grant [ PROJECT-KEY ] GROUP-NAME PERMISSION [flags] Options  -p, --only-project Indicate if the group must be added only on project or also on all workflows in project -w, --workflow string Workflow name Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>group</title>
      <link>/development/rest/group/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/rest/group/</guid>
      <description>DELETE /group/&amp;lt;group-name&amp;gt;/user/&amp;lt;username&amp;gt;    URL /group/&amp;lt;group-name&amp;gt;/user/&amp;lt;username&amp;gt;     Method DELETE   Permissions Auth: true   Scopes Group   Code deleteGroupUserHandler    DELETE /group/&amp;lt;group-name&amp;gt;    URL /group/&amp;lt;group-name&amp;gt;     Method DELETE   Permissions Auth: true   Scopes Group   Code deleteGroupHandler    GET /group/&amp;lt;group-name&amp;gt;/action    URL /group/&amp;lt;group-name&amp;gt;/action     Method GET   Permissions Auth: true   Scopes Group   Code getActionsForGroupHandler    GET /group/&amp;lt;group-name&amp;gt;/project    URL /group/&amp;lt;group-name&amp;gt;/project     Method GET   Permissions Auth: true   Scopes Group   Code getProjectGroupHandler    GET /group/&amp;lt;group-name&amp;gt;/worker/model    URL /group/&amp;lt;group-name&amp;gt;/worker/model     Method GET   Permissions Auth: true   Scopes WorkerModel   Code getWorkerModelsForGroupHandler    GET /group/&amp;lt;group-name&amp;gt;    URL /group/&amp;lt;group-name&amp;gt;     Method GET   Permissions Auth: true   Scopes Group   Code getGroupHandler    GET /group    URL /group     Method GET   Permissions Auth: true   Scopes Group   Code getGroupsHandler    POST /group/&amp;lt;group-name&amp;gt;/user    URL /group/&amp;lt;group-name&amp;gt;/user     Method POST   Permissions Auth: true   Scopes Group   Code postGroupUserHandler    POST /group    URL /group     Method POST   Permissions Auth: true   Scopes Group   Code postGroupHandler    PUT /group/&amp;lt;group-name&amp;gt;/user/&amp;lt;username&amp;gt;    URL /group/&amp;lt;group-name&amp;gt;/user/&amp;lt;username&amp;gt;     Method PUT   Permissions Auth: true   Scopes Group   Code putGroupUserHandler    PUT /group/&amp;lt;group-name&amp;gt;    URL /group/&amp;lt;group-name&amp;gt;     Method PUT   Permissions Auth: true   Scopes Group   Code putGroupHandler    </description>
    </item>
    
    <item>
      <title>helmPush</title>
      <link>/docs/actions/helmpush/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/helmpush/</guid>
      <description>This push Helm chart on Chart Museum or Artifactory.
Parameters  appVersion: (Optional) Override the app version before push to registry. chartFolder: Relative path to chart folder to be published chartVersion: (Optional) Override the chart version before push to registry. registryAccessToken: Send token in Authorization header  This parameter can be empty when an Artifactory integration is set up.
 registryAuthHeader: Alternative header to use for token auth  This parameter can be empty when an Artifactory integration is set up.</description>
    </item>
    
    <item>
      <title>history</title>
      <link>/docs/components/cdsctl/experimental/workflow/history/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/workflow/history/</guid>
      <description>cdsctl experimental workflow history Display the run history for the given workflow
Synopsis Display the run history for the given workflow
cdsctl experimental workflow history PROJ_KEY VCS_IDENTIFIER REPO_IDENTIFIER WORKFLOW_NAME [flags] Examples cdsctl experimental workflow history &amp;lt;proj_key&amp;gt; &amp;lt;vcs_identifier&amp;gt; &amp;lt;repo_identifier&amp;gt; &amp;lt;workflow_name&amp;gt; Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>history</title>
      <link>/docs/components/cdsctl/workflow/history/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/workflow/history/</guid>
      <description>cdsctl workflow history Display CDS workflow runs history
Synopsis Display CDS workflow runs history
cdsctl workflow history [ PROJECT-KEY WORKFLOW-NAME ] [OFFSET] [LIMIT] [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>hook</title>
      <link>/development/rest/hook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/rest/hook/</guid>
      <description>GET /hook/&amp;lt;uuid&amp;gt;/workflow/&amp;lt;workflow-id&amp;gt;/vcsevent/&amp;lt;vcs-server&amp;gt;    URL /hook/&amp;lt;uuid&amp;gt;/workflow/&amp;lt;workflow-id&amp;gt;/vcsevent/&amp;lt;vcs-server&amp;gt;     Method GET   Permissions Auth: true   Scopes Run   Code getHookPollingVCSEvents    </description>
    </item>
    
    <item>
      <title>hook-key</title>
      <link>/docs/components/cdsctl/experimental/project/repository/hook-key/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/project/repository/hook-key/</guid>
      <description>cdsctl experimental project repository hook-key Get repository webhook secret key
Synopsis Get repository webhook secret key
cdsctl experimental project repository hook-key [ PROJECT-KEY ] VCS-TYPE VCS-NAME REPOSITORY-NAME [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --format string Output format: plain|json|yaml (default &amp;quot;plain&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>import</title>
      <link>/development/rest/import/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/rest/import/</guid>
      <description>Import workflow as code    URL /import/&amp;lt;project-key&amp;gt;     Method POST   Permissions Auth: true   Scopes Project   Code postImportAsCodeHandler    Description This the entrypoint to perform workflow as code. The first step is to post an operation leading to checkout application and scrapping files
Request Body {&amp;quot;vcs_Server&amp;quot;:&amp;quot;github&amp;quot;, &amp;quot;url&amp;quot;:&amp;quot;https://github.com/fsamin/go-repo.git&amp;quot;,&amp;quot;strategy&amp;quot;:{&amp;quot;connection_type&amp;quot;:&amp;quot;https&amp;quot;,&amp;quot;ssh_key&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;user&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;password&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;branch&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;default_branch&amp;quot;:&amp;quot;master&amp;quot;,&amp;quot;pgp_key&amp;quot;:&amp;quot;&amp;quot;},&amp;quot;setup&amp;quot;:{&amp;quot;checkout&amp;quot;:{&amp;quot;branch&amp;quot;:&amp;quot;master&amp;quot;}}} Response Body {&amp;quot;uuid&amp;quot;:&amp;quot;ee3946ac-3a77-46b1-af78-77868fde75ec&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;https://github.com/fsamin/go-repo.git&amp;quot;,&amp;quot;strategy&amp;quot;:{&amp;quot;connection_type&amp;quot;:&amp;quot;https&amp;quot;,&amp;quot;ssh_key&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;user&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;password&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;branch&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;default_branch&amp;quot;:&amp;quot;master&amp;quot;,&amp;quot;pgp_key&amp;quot;:&amp;quot;&amp;quot;},&amp;quot;setup&amp;quot;:{&amp;quot;checkout&amp;quot;:{&amp;quot;branch&amp;quot;:&amp;quot;master&amp;quot;}}} Perform workflow as code import    URL /import/&amp;lt;project-key&amp;gt;/&amp;lt;uuid&amp;gt;/perform     Method POST   Permissions Auth: true   Scopes Project   Code postPerformImportAsCodeHandler    Description This operation push the workflow as code into the project</description>
    </item>
    
    <item>
      <title>import</title>
      <link>/docs/components/cdsctl/action/import/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/action/import/</guid>
      <description>cdsctl action import Import a CDS action
Synopsis Import a CDS action
cdsctl action import PATH Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl action	- Manage CDS action  </description>
    </item>
    
    <item>
      <title>import</title>
      <link>/docs/components/cdsctl/admin/features/import/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/features/import/</guid>
      <description>cdsctl admin features import Import a feature as a yaml file
Synopsis Import a feature as a yaml file
cdsctl admin features import FILE Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin features	- Manage CDS feature flipping rules  </description>
    </item>
    
    <item>
      <title>import</title>
      <link>/docs/components/cdsctl/admin/integration-model/import/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/integration-model/import/</guid>
      <description>cdsctl admin integration-model import Import a CDS Integration model from a yaml file
Synopsis Import a CDS Integration model from a yaml file
cdsctl admin integration-model import FILE Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin integration-model	- Manage CDS Integration models  </description>
    </item>
    
    <item>
      <title>import</title>
      <link>/docs/components/cdsctl/admin/metadata/application/import/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/metadata/application/import/</guid>
      <description>cdsctl admin metadata application import import CDS Application Metadata
Synopsis Metadata are represented with key:value
Example of a csv file for a CDS Application
project_key;application_name;last_modified;vcs_repofullname;ou1;ou2 YOUR_PROJECT_KEY;Your Application Name;2020-01-01T00:00:00;repo_of_application;OU_1_VALUE;OU_2_VALUE  You can enter as many metadata as desired, the key name is on the first line of the csv file.
cdsctl admin metadata application import PATH Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>import</title>
      <link>/docs/components/cdsctl/admin/metadata/project/import/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/metadata/project/import/</guid>
      <description>cdsctl admin metadata project import import CDS Project Metadata
Synopsis Metadata are represented with key:value
Example of a csv file for a CDS Project
project_key;project_name;last_modified;ou1;ou2 YOUR_PROJECT_KEY;Your Project Name;2020-01-01T00:00:00;OU_1_VALUE;OU_2_VALUE  You can enter as many metadata as desired, the key name is on the first line of the csv file.
cdsctl admin metadata project import PATH Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>import</title>
      <link>/docs/components/cdsctl/admin/plugins/import/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/plugins/import/</guid>
      <description>cdsctl admin plugins import Import a CDS Plugin
Synopsis Import a CDS Plugin
cdsctl admin plugins import FILE Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin plugins	- Manage CDS Plugins  </description>
    </item>
    
    <item>
      <title>import</title>
      <link>/docs/components/cdsctl/application/import/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/application/import/</guid>
      <description>cdsctl application import Import an application with a local filepath or an URL
Synopsis PATH: Path or URL of application to import
Without &amp;ndash;force, CDS won&amp;rsquo;t update an existing application. With &amp;ndash;force, CDS will allow you to update an existing application. If this application is managed &amp;lsquo;as-code&amp;rsquo;, CDS will override it. This application will be detached from the repository, until it is re-imported again following a commit on the repo.</description>
    </item>
    
    <item>
      <title>import</title>
      <link>/docs/components/cdsctl/environment/import/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/environment/import/</guid>
      <description>cdsctl environment import Import an environment with local filepath or URL
Synopsis PATH: Path or URL of environment to import
Without &amp;ndash;force, CDS won&amp;rsquo;t update an existing environment. With &amp;ndash;force, CDS will allow you to update an existing environment. If this environment is managed &amp;lsquo;as-code&amp;rsquo;, CDS will override it. This environment will be detached from the repository, until it is re-imported again following a commit on the repo.
cdsctl environment import [ PROJECT-KEY ] PATH [flags] Options  --force Override environment if exists Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>import</title>
      <link>/docs/components/cdsctl/experimental/plugin/import/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/plugin/import/</guid>
      <description>cdsctl experimental plugin import Import a plugin
Synopsis Import a plugin
cdsctl experimental plugin import FILE [flags] Options  --force Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental plugin	- CDS Experimental plugin commands  </description>
    </item>
    
    <item>
      <title>import</title>
      <link>/docs/components/cdsctl/experimental/project/notification/import/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/project/notification/import/</guid>
      <description>cdsctl experimental project notification import Import notification settings on a project from a yaml file
Synopsis Import notification settings on a project from a yaml file
cdsctl experimental project notification import [ PROJECT-KEY ] FILENAME [flags] Examples cdsctl project notification import MY-PROJECT file.yml Options  --force Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>import</title>
      <link>/docs/components/cdsctl/experimental/rbac/import/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/rbac/import/</guid>
      <description>cdsctl experimental rbac import Import a rbac rule from a yaml file
Synopsis Import a rbac rule from a yaml file
cdsctl experimental rbac import FILENAME [flags] Examples cdsctl rbac import file.yml Options  --force Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental rbac	- CDS Experimental rbac commands  </description>
    </item>
    
    <item>
      <title>import</title>
      <link>/docs/components/cdsctl/pipeline/import/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/pipeline/import/</guid>
      <description>cdsctl pipeline import Import CDS pipeline
Synopsis PATH: Path or URL of pipeline to import
Without &amp;ndash;force, CDS won&amp;rsquo;t update an existing pipeline. With &amp;ndash;force, CDS will allow you to update an existing pipeline. If this pipeline is managed &amp;lsquo;as-code&amp;rsquo;, CDS will override it. This pipeline will be detached from the repository, until it is re-imported again following a commit on the repo.
cdsctl pipeline import [ PROJECT-KEY ] PATH [flags] Options  --force Use force flag to update your pipeline Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>import</title>
      <link>/docs/components/cdsctl/project/integration/import/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/project/integration/import/</guid>
      <description>cdsctl project integration import Import a integration configuration on a project from a yaml file
Synopsis Import a integration configuration on a project from a yaml file
cdsctl project integration import [ PROJECT-KEY ] FILENAME [flags] Examples cdsctl project integration import MY-PROJECT file.yml Options  --force Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>import</title>
      <link>/docs/components/cdsctl/project/vcs/import/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/project/vcs/import/</guid>
      <description>cdsctl project vcs import Import a VCS configuration on a project from a yaml file
Synopsis Import a VCS configuration on a project from a yaml file
cdsctl project vcs import [ PROJECT-KEY ] FILENAME [flags] Examples cdsctl project vcs import MY-PROJECT file.yml Options  --force Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>import</title>
      <link>/docs/components/cdsctl/user/gpg/import/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/user/gpg/import/</guid>
      <description>cdsctl user gpg import Import a CDS user gpg key
Synopsis Import a CDS user gpg key
cdsctl user gpg import [flags] Options  -k, --pub-key-file string Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl user gpg	- Manage CDS user gpg keys  </description>
    </item>
    
    <item>
      <title>import</title>
      <link>/docs/components/cdsctl/worker/model/import/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/worker/model/import/</guid>
      <description>cdsctl worker model import Synopsis Available model type :
 Docker images (&amp;ldquo;docker&amp;rdquo;) Openstack image (&amp;ldquo;openstack&amp;rdquo;) VSphere image (&amp;ldquo;vsphere&amp;rdquo;)  For admin:
 For each type of model you have to indicate the main worker command to run your workflow (example: worker) For Openstack and VSphere model you can indicate a precmd and postcmd that will execute before and after the main worker command  cdsctl worker model import PATH .</description>
    </item>
    
    <item>
      <title>import</title>
      <link>/docs/components/cdsctl/workflow/import/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/workflow/import/</guid>
      <description>cdsctl workflow import Import a workflow
Synopsis In case you want to import just your workflow. Instead of use a local file you can also use an URL to your yaml file.
If you want to update also dependencies likes pipelines, applications or environments at same time you have to use workflow push instead workflow import.
Without &amp;ndash;force, CDS won&amp;rsquo;t update an existing workflow. With &amp;ndash;force, CDS will allow you to update an existing workflow.</description>
    </item>
    
    <item>
      <title>info</title>
      <link>/docs/components/cdsctl/experimental/workflow/info/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/workflow/info/</guid>
      <description>cdsctl experimental workflow info List run informations
Synopsis List run informations
cdsctl experimental workflow info PROJ_KEY RUN_IDENTIFIER [flags] Examples cdsctl experimental workflow info &amp;lt;proj_key&amp;gt; &amp;lt;run_identifier&amp;gt; Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>info</title>
      <link>/docs/components/cdsctl/experimental/workflow/jobs/info/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/workflow/jobs/info/</guid>
      <description>cdsctl experimental workflow jobs info Get the workflow run job infos
Synopsis Get the workflow run job infos
cdsctl experimental workflow jobs info PROJ_KEY RUN_IDENTIFIER JOB_IDENTIFIER [flags] Examples cdsctl experimental workflow run jobs info &amp;lt;proj_key&amp;gt; &amp;lt;run_identifier&amp;gt; &amp;lt;job_identifier&amp;gt; Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>init</title>
      <link>/docs/components/cdsctl/workflow/init/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/workflow/init/</guid>
      <description>cdsctl workflow init Init a workflow
Synopsis Initialize a workflow from your current repository, this will read or create yml files and push them to CDS.
Documentation: https://ovh.github.io/cds/docs/tutorials/init_workflow_with_cdsctl/
cdsctl workflow init [PROJECT-KEY] [flags] Options  --application string (Optional) Set the application name. If empty, it will deduce application name from the repository. --pipeline string (Optional) Set the root pipeline you want to use. If empty it will propose you to reuse of create a pipeline.</description>
    </item>
    
    <item>
      <title>init-token</title>
      <link>/docs/components/engine/config/init-token/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/engine/config/init-token/</guid>
      <description>engine config init-token Generate/Regenerate an init token for a given CDS configuration file
Synopsis $ engine config init-token
engine config init-token [flags] Options  --config string config file --remote-config string (optional) consul configuration store --remote-config-key string (optional) consul configuration store key (default &amp;quot;cds/config.api.toml&amp;quot;) --vault-addr string (optional) Vault address to fetch secrets from vault (example: https://vault.mydomain.net:8200) --vault-token string (optional) Vault token to fetch secrets from vault SEE ALSO  engine config	- Manage CDS Configuration  </description>
    </item>
    
    <item>
      <title>install</title>
      <link>/docs/components/worker/key/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/worker/key/install/</guid>
      <description>worker key install worker key install [--env-git] [--env] [--file destination-file] &amp;lt;key-name&amp;gt;
Synopsis Inside a step script you can install a SSH/PGP key generated in CDS in your ssh environment and return the PKEY variable (only for SSH)
So if you want to update your PKEY variable, which is the variable with the path to the SSH private key you just can write PKEY=$(worker key install proj-mykey)` (only for SSH)
You can use the --env flag to export the PKEY variable:</description>
    </item>
    
    <item>
      <title>integration</title>
      <link>/development/rest/integration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/rest/integration/</guid>
      <description>GET /integration/models/&amp;lt;name&amp;gt;    URL /integration/models/&amp;lt;name&amp;gt;     Method GET   Permissions Auth: true   Code getIntegrationModelHandler    GET /integration/models    URL /integration/models     Method GET   Permissions Auth: true   Code getIntegrationModelsHandler    </description>
    </item>
    
    <item>
      <title>interactive</title>
      <link>/docs/components/cdsctl/queue/interactive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/queue/interactive/</guid>
      <description>cdsctl queue interactive Show the current queue
Synopsis Show the current queue
cdsctl queue interactive Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl queue	- CDS Queue  </description>
    </item>
    
    <item>
      <title>JUnit</title>
      <link>/docs/actions/builtin-junit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/builtin-junit/</guid>
      <description>JUnit is a builtin action, you can&amp;rsquo;t modify it.
This action parses a given Junit formatted XML file to extract its test results.
Parameters  path: Path to junit xml file.  Requirements No Requirement
YAML example Example of a pipeline using JUnit action:
version: v1.0 name: Pipeline1 stages: - Stage1 jobs: - job: Job1 stage: Stage1 steps: - jUnitReport: &amp;#39;{{.cds.workspace}}/report.xml&amp;#39; Example  Job Configuration.   Launch pipeline, check XUnit Result   And view details:  </description>
    </item>
    
    <item>
      <title>junit</title>
      <link>/docs/actions/junit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/junit/</guid>
      <description>Parse a junit report, create a run result of type test
Parameters  path: File path to the junit report  </description>
    </item>
    
    <item>
      <title>junit-parser</title>
      <link>/docs/components/worker/junit-parser/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/worker/junit-parser/</guid>
      <description>worker junit-parser worker junit-parser
Synopsis worker junit-parser command helps you to parse junit files and print a summary.
It displays the number of tests, the number of passed tests, the number of failed tests and the number of skipped tests.
Examples: $ ls result1.xml	result2.xml $ worker junit-parser result1.xml 10 10 0 0 $ worker junit-parser *.xml 20 20 0 0
worker junit-parser SEE ALSO  worker	- CDS Worker  </description>
    </item>
    
    <item>
      <title>Kafka CDS Events</title>
      <link>/docs/integrations/kafka/kafka_events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/integrations/kafka/kafka_events/</guid>
      <description>The Kafka Integration is a Self-Service integration that can be configured on a CDS Project. If you are a CDS Administrator, you can configure this integration to be available on all CDS Projects.
An example of use case could be that you want to generate some svg badge. Then you can just add an event integration for your workflow and plug the badge microservice on this kafka topic.
Notice that Kafka communication is done using SASL and TLS enable only.</description>
    </item>
    
    <item>
      <title>Kafka Hooks</title>
      <link>/docs/integrations/kafka/kafka_hooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/integrations/kafka/kafka_hooks/</guid>
      <description>The Kafka Integration is a Self-Service integration that can be configured on a CDS Project. If you are a CDS Administrator, you can configure this integration to be available on all CDS Projects.
This integration enables the Kafka Hook feature.
Notice that Kafka communication is done using SASL and TLS enable only.
Configure with WebUI You can add a Kafka Integration on your CDS Project.
Configure with cdsctl Import a Kafka Integration on your CDS Project Create a file project-configuration.</description>
    </item>
    
    <item>
      <title>Kubernetes Compute</title>
      <link>/docs/integrations/kubernetes/kubernetes_compute/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/integrations/kubernetes/kubernetes_compute/</guid>
      <description>The Kubernetes integration have to be configured by CDS administrator.
This integration allows you to run the Kubernetes Hatchery to start CDS Workers.
As an end-users, this integration allows:
 to use Worker Models of type &amp;ldquo;Docker&amp;rdquo; to use Service Prerequisite on your CDS Jobs.  Start Kubernetes hatchery Generate a token:
$ cdsctl consumer new me \ --scopes=Hatchery,RunExecution,Service,WorkerModel \ --name=&amp;#34;hatchery.kubernetes&amp;#34; \ --description=&amp;#34;Consumer token for kubernetes hatchery&amp;#34; \ --groups=&amp;#34;&amp;#34; \ --no-interactive Builtin consumer successfully created, use the following token to sign in: xxxxxxxx.</description>
    </item>
    
    <item>
      <title>Kubernetes Deployment</title>
      <link>/docs/integrations/kubernetes/kubernetes_deployment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/integrations/kubernetes/kubernetes_deployment/</guid>
      <description>The Kubernetes Deployment Integration is a Self-Service integration that can be configured on a CDS Project.
This integration enables the DeployApplication action
Create Integration Model Create a file kubernetes-model-configuration.yml:
name: Kubernetes default_config: api_url: type: string ca_certificate: type: text description: Certificate Authority bundle (PEM format) token: type: password deployment: true deployment_default_config: timeout: type: string value: 180 description: timeout in seconds for v2 or duration for v3 (ex: 3m) namespace: type: string value: default description: Kubernetes namespace in which you want to deploy your components (OPTIONAL) deployment_files: type: string description: Glob to yaml filepaths helm_chart: type: string description: &amp;#34;Keep empty if you don&amp;#39;t use helm.</description>
    </item>
    
    <item>
      <title>LDAP Authentication</title>
      <link>/docs/integrations/ldap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/integrations/ldap/</guid>
      <description>The LDAP Integration have to be configured on your CDS by a CDS Administrator.
This integration allows you to authenticate users.
How to configure LDAP Authentication integration Edit the toml file:
 section [api.auth.ldap]  enable the signin with enabled = true if you want to disable signup, set signupDisabled = true    [api.auth.ldap] enabled = false host = &amp;#34;&amp;#34; # Define it if ldapsearch need to be authenticated managerDN = &amp;#34;cn=admin,dc=myorganization,dc=com&amp;#34; # Define it if ldapsearch need to be authenticated managerPassword = &amp;#34;SECRET_PASSWORD_MANAGER&amp;#34; port = 636 rootDN = &amp;#34;dc=myorganization,dc=com&amp;#34; signupDisabled = false ssl = true userFullname = &amp;#34;{{.</description>
    </item>
    
    <item>
      <title>link</title>
      <link>/development/rest/link/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/rest/link/</guid>
      <description>GET /link/driver    URL /link/driver     Method GET   Permissions Auth: true   Code getLinkDriversHandler    POST /link/&amp;lt;consumer-type&amp;gt;/ask    URL /link/&amp;lt;consumer-type&amp;gt;/ask     Method POST   Permissions Auth: true   Scopes User   Code postAskLinkExternalUserWithCDSHandler    POST /link/&amp;lt;consumer-type&amp;gt;    URL /link/&amp;lt;consumer-type&amp;gt;     Method POST   Permissions Auth: true   Scopes User   Code postLinkExternalUserWithCDSHandler    </description>
    </item>
    
    <item>
      <title>lint</title>
      <link>/docs/components/cdsctl/experimental/workflow/lint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/workflow/lint/</guid>
      <description>cdsctl experimental workflow lint Lint workflow files
Synopsis Lint workflow files
cdsctl experimental workflow lint CDS_WORKFLOW_DIRECTORY Examples cdsctl experimental workflow lint .cds/workflows Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental workflow	- CDS Experimental workflow commands  </description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/action/builtin/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/action/builtin/list/</guid>
      <description>cdsctl action builtin list List CDS builtin actions
Synopsis List CDS builtin actions
cdsctl action builtin list [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/action/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/action/list/</guid>
      <description>cdsctl action list List CDS actions
Synopsis List CDS actions
cdsctl action list [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/admin/cdn/unit/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/cdn/unit/list/</guid>
      <description>cdsctl admin cdn unit list list storage unit
Synopsis list storage unit
cdsctl admin cdn unit list [flags] Examples cdsctl admin cdn unit list Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/admin/database/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/database/list/</guid>
      <description>cdsctl admin database list List all CDS DB migrations
Synopsis List all CDS DB migrations
cdsctl admin database list SERVICE [flags] Examples  $ cdsctl admin database list api $ cdsctl admin database list cdn Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/admin/features/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/features/list/</guid>
      <description>cdsctl admin features list List all the features
Synopsis List all the features
cdsctl admin features list [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/admin/hooks/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/hooks/list/</guid>
      <description>cdsctl admin hooks list List CDS Hooks Tasks
Synopsis List CDS Hooks Tasks
cdsctl admin hooks list [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --sort string Sort task by nb_executions_total,nb_executions_todo --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/admin/hooks/repository/event/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/hooks/repository/event/list/</guid>
      <description>cdsctl admin hooks repository event list List repository events
Synopsis List repository events
cdsctl admin hooks repository event list VCS-SERVER REPOSITORY [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/admin/hooks/repository/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/hooks/repository/list/</guid>
      <description>cdsctl admin hooks repository list List repositories
Synopsis List repositories
cdsctl admin hooks repository list [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) --pattern string Filter on repository name -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/admin/integration-model/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/integration-model/list/</guid>
      <description>cdsctl admin integration-model list List CDS Integration models
Synopsis List CDS Integration models
cdsctl admin integration-model list [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/admin/migration/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/migration/list/</guid>
      <description>cdsctl admin migration list List all CDS migrations and their states
Synopsis List all CDS migrations and their states
cdsctl admin migration list [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/admin/organization/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/organization/list/</guid>
      <description>cdsctl admin organization list List all organizations
Synopsis List all organizations
cdsctl admin organization list [flags] Examples cdsctl admin organization list Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/admin/plugins/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/plugins/list/</guid>
      <description>cdsctl admin plugins list List CDS Plugins
Synopsis List CDS Plugins
cdsctl admin plugins list [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/admin/services/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/services/list/</guid>
      <description>cdsctl admin services list List CDS services
Synopsis List CDS services
cdsctl admin services list [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key -t, --type string Filter service by type: api, hatchery, hook, repository, vcs --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/application/keys/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/application/keys/list/</guid>
      <description>cdsctl application keys list List CDS application keys
Synopsis List CDS application keys
cdsctl application keys list [ PROJECT-KEY APPLICATION-NAME ] [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/application/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/application/list/</guid>
      <description>cdsctl application list List CDS applications
Synopsis List CDS applications
cdsctl application list [ PROJECT-KEY ] [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/application/variable/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/application/variable/list/</guid>
      <description>cdsctl application variable list List CDS application variables
Synopsis List CDS application variables
cdsctl application variable list [ PROJECT-KEY APPLICATION-NAME ] [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/consumer/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/consumer/list/</guid>
      <description>cdsctl consumer list List your auth consumers for given user
Synopsis List your auth consumers for given user
cdsctl consumer list [USERNAME] [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -g, --group strings filter by group -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/context/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/context/list/</guid>
      <description>cdsctl context list List cdsctl contexts
Synopsis List cdsctl contexts
cdsctl context list [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/encrypt/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/encrypt/list/</guid>
      <description>cdsctl encrypt list List all the encrypted variable of your CDS project
Synopsis List all the encrypted variable of your CDS project
cdsctl encrypt list [ PROJECT-KEY ] [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/environment/keys/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/environment/keys/list/</guid>
      <description>cdsctl environment keys list List CDS environment keys
Synopsis List CDS environment keys
cdsctl environment keys list [ PROJECT-KEY ] ENV-NAME [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/environment/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/environment/list/</guid>
      <description>cdsctl environment list List CDS environments
Synopsis List CDS environments
cdsctl environment list [ PROJECT-KEY ] [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/environment/variable/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/environment/variable/list/</guid>
      <description>cdsctl environment variable list List CDS environment variables
Synopsis List CDS environment variables
cdsctl environment variable list [ PROJECT-KEY ] ENV-NAME [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/experimental/hatchery/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/hatchery/list/</guid>
      <description>cdsctl experimental hatchery list List all hatcheries
Synopsis List all hatcheries
cdsctl experimental hatchery list [flags] Examples cdsctl hatchery list Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/experimental/organization/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/organization/list/</guid>
      <description>cdsctl experimental organization list List all organizations
Synopsis List all organizations
cdsctl experimental organization list [flags] Examples cdsctl organization list Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/experimental/project/analysis/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/project/analysis/list/</guid>
      <description>cdsctl experimental project analysis list List all repository analysis
Synopsis List all repository analysis
cdsctl experimental project analysis list [ PROJECT-KEY ] VCS-NAME REPOSITORY-NAME [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/experimental/project/notification/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/project/notification/list/</guid>
      <description>cdsctl experimental project notification list List available notifications on a project
Synopsis List available notifications on a project
cdsctl experimental project notification list [ PROJECT-KEY ] [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/experimental/project/repository/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/project/repository/list/</guid>
      <description>cdsctl experimental project repository list List available repositories on a project
Synopsis List available repositories on a project
cdsctl experimental project repository list [ PROJECT-KEY ] [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --vcs-name string Specified a VCS by its name --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/experimental/project/variableset/item/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/project/variableset/item/list/</guid>
      <description>cdsctl experimental project variableset item list List the items of the given Variable Set
Synopsis List the items of the given Variable Set
cdsctl experimental project variableset item list [ PROJECT-KEY ] VARIABLESET-NAME [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/experimental/project/variableset/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/project/variableset/list/</guid>
      <description>cdsctl experimental project variableset list List all variable sets in the given project
Synopsis List all variable sets in the given project
cdsctl experimental project variableset list [ PROJECT-KEY ] [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/experimental/rbac/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/rbac/list/</guid>
      <description>cdsctl experimental rbac list List CDS permissions
Synopsis List CDS permissions
cdsctl experimental rbac list [flags] Examples cdsctl rbac list Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/experimental/region/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/region/list/</guid>
      <description>cdsctl experimental region list List all regions
Synopsis List all regions
cdsctl experimental region list [flags] Examples cdsctl region list Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/experimental/worker-model/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/worker-model/list/</guid>
      <description>cdsctl experimental worker-model list Synopsis cdsctl experimental worker-model list [ PROJECT-KEY ] VCS-NAME REPOSITORY [flags] Examples cdsctl worker-model list Options  --branch string Filter on a specific branch --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/experimental/worker/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/worker/list/</guid>
      <description>cdsctl experimental worker list Synopsis cdsctl experimental worker list [flags] Examples cdsctl experimental worker list Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/group/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/group/list/</guid>
      <description>cdsctl group list List CDS groups
Synopsis List CDS groups
cdsctl group list [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/group/member/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/group/member/list/</guid>
      <description>cdsctl group member list List members into a group
Synopsis List members into a group
cdsctl group member list GROUP-NAME [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/pipeline/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/pipeline/list/</guid>
      <description>cdsctl pipeline list List CDS pipelines
Synopsis List CDS pipelines
cdsctl pipeline list [ PROJECT-KEY ] [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/project/integration/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/project/integration/list/</guid>
      <description>cdsctl project integration list List integrations available on a project
Synopsis List integrations available on a project
cdsctl project integration list [ PROJECT-KEY ] [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/project/keys/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/project/keys/list/</guid>
      <description>cdsctl project keys list List CDS project keys
Synopsis List CDS project keys
cdsctl project keys list [ PROJECT-KEY ] [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/project/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/project/list/</guid>
      <description>cdsctl project list List CDS projects
Synopsis List CDS projects
cdsctl project list [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/project/variable/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/project/variable/list/</guid>
      <description>cdsctl project variable list List CDS project variables
Synopsis List CDS project variables
cdsctl project variable list [ PROJECT-KEY ] [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/project/vcs/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/project/vcs/list/</guid>
      <description>cdsctl project vcs list List VCS available on a project
Synopsis List VCS available on a project
cdsctl project vcs list [ PROJECT-KEY ] [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/session/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/session/list/</guid>
      <description>cdsctl session list List your auth sessions for given user
Synopsis List your auth sessions for given user
cdsctl session list [USERNAME] [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/template/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/template/list/</guid>
      <description>cdsctl template list Get all available workflow template from CDS
Synopsis Get all available workflow template from CDS
cdsctl template list [flags] Examples cdsctl template list Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/user/gpg/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/user/gpg/list/</guid>
      <description>cdsctl user gpg list List CDS users gpg keys
Synopsis List CDS users gpg keys
cdsctl user gpg list [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/user/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/user/list/</guid>
      <description>cdsctl user list List CDS users
Synopsis List CDS users
cdsctl user list [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/worker/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/worker/list/</guid>
      <description>cdsctl worker list List CDS workers
Synopsis List CDS workers
cdsctl worker list [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/worker/model/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/worker/model/list/</guid>
      <description>cdsctl worker model list List CDS worker models
Synopsis List CDS worker models
cdsctl worker model list [flags] Options  -b, --binary string Use this flag to filter worker model list by its binary capabilities --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key -s, --state string Use this flag to filter worker model by his state (disabled|error|register|deprecated) --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/workflow/label/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/workflow/label/list/</guid>
      <description>cdsctl workflow label list List labels of one workflow
Synopsis List labels of one workflow
cdsctl workflow label list [ PROJECT-KEY WORKFLOW-NAME ] [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/workflow/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/workflow/list/</guid>
      <description>cdsctl workflow list List CDS workflows
Synopsis List CDS workflows
cdsctl workflow list [ PROJECT-KEY ] [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/workflow/logs/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/workflow/logs/list/</guid>
      <description>cdsctl workflow logs list List logs from a workflow run
Synopsis List logs from a workflow run. There on log file for each step.
# list all logs files from projet KEY, with workflow named WD on latest run $ cdsctl workflow logs list KEY WF # list all logs files from projet KEY, with workflow named WD on run 1 $ cdsctl workflow logs list KEY WF 1  cdsctl workflow logs list [ PROJECT-KEY WORKFLOW-NAME ] [RUN-NUMBER] Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list</title>
      <link>/docs/components/cdsctl/workflow/result/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/workflow/result/list/</guid>
      <description>cdsctl workflow result list List workflow run result
Synopsis List workflow run result
cdsctl workflow result list [ PROJECT-KEY WORKFLOW-NAME ] RUN-NUMBER [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key -t, --type string List only result of one type --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>list-encrypted-data</title>
      <link>/docs/components/cdsctl/admin/database/list-encrypted-data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/database/list-encrypted-data/</guid>
      <description>cdsctl admin database list-encrypted-data List all encrypted data in database
Synopsis List all encrypted data in database
cdsctl admin database list-encrypted-data SERVICE Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin database	- Manage CDS Database  </description>
    </item>
    
    <item>
      <title>list-signed-data</title>
      <link>/docs/components/cdsctl/admin/database/list-signed-data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/database/list-signed-data/</guid>
      <description>cdsctl admin database list-signed-data List all signed data in database
Synopsis List all signed data in database
cdsctl admin database list-signed-data SERVICE [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --format string Output format: plain|json|yaml (default &amp;quot;plain&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>listen</title>
      <link>/docs/components/cdsctl/events/listen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/events/listen/</guid>
      <description>cdsctl events listen Listen CDS events
Synopsis Listen CDS events
cdsctl events listen [flags] Examples  cdsctl events listen --queue cdsctl events listen --global cdsctl events listen --project MYPROJ cdsctl events listen --project MYPROJ --workflow my-workflow Options  --global listen global events --project string project key to listen --queue listen job queue events --workflow string workflow name to listen Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>login</title>
      <link>/docs/components/cdsctl/login/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/login/</guid>
      <description>cdsctl login Login to CDS
Synopsis For admin signup with LDAP driver, INIT_TOKEN environment variable must be set.
cdsctl login [flags] Examples Use it with &#39;eval&#39; and &#39;env&#39; flag to set environment variable: eval $(cds login -H API_URL -u USERNAME -p PASSWORD --env) Options  -H, --api-url string Url to your CDS api. -d, --driver string An enabled auth driver to login with. This should be local, GitHub, GitLab, Ldap, builtin or corporate-sso --env Display the commands to set up the environment for the cds client.</description>
    </item>
    
    <item>
      <title>maxrun</title>
      <link>/docs/components/cdsctl/admin/workflows/maxrun/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/workflows/maxrun/</guid>
      <description>cdsctl admin workflows maxrun Update the maximum number of workflow executions
Synopsis Update the maximum number of workflow executions
cdsctl admin workflows maxrun PROJECTKEY WORKFLOWNAME MAXRUNS Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin workflows	- Manage CDS workflows  </description>
    </item>
    
    <item>
      <title>me</title>
      <link>/docs/components/cdsctl/user/me/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/user/me/</guid>
      <description>cdsctl user me Show Current CDS user details
Synopsis Show Current CDS user details
cdsctl user me [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --format string Output format: plain|json|yaml (default &amp;quot;plain&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>migrate</title>
      <link>/docs/components/cdsctl/admin/cdn/migrate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/cdn/migrate/</guid>
      <description>cdsctl admin cdn migrate run migration from cds to cdn
Synopsis run migration from cds to cdn
cdsctl admin cdn migrate Examples cdsctl admin cdn migrate Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin cdn	- Manage CDS CDN uService  </description>
    </item>
    
    <item>
      <title>mon</title>
      <link>/development/rest/mon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/rest/mon/</guid>
      <description>GET /mon/status    URL /mon/status     Method GET   Permissions Auth: true   Code authOptionalMiddleware    </description>
    </item>
    
    <item>
      <title>new</title>
      <link>/docs/components/cdsctl/consumer/new/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/consumer/new/</guid>
      <description>cdsctl consumer new Create a new auth consumer for current user
Synopsis Create a new auth consumer for current user
cdsctl consumer new [USERNAME] [flags] Options  --description string What is the purpose of this consumer --duration string Validity period of the token generated for the consumer (in days) --groups strings Define the list of groups for the consumer --name string What is the name of this consumer --scopes strings Define the list of scopes for the consumer --service-name string Name of the service --service-region string Region where the service will be started --service-type string Type of service (hatchery, etc.</description>
    </item>
    
    <item>
      <title>new</title>
      <link>/docs/components/engine/config/new/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/engine/config/new/</guid>
      <description>engine config new CDS configuration file assistant
Synopsis Generate the whole configuration file $ engine config new &amp;gt; conf.toml
you can compose your file configuration this will generate a file configuration containing api and hatchery:local µService $ engine config new api hatchery:local
For advanced usage, Debug and Tracing section can be generated as: $ engine config new debug tracing [µService(s)&amp;hellip;]
All options $ engine config new [debug] [tracing] [api] [hatchery:local] [hatchery:openstack] [hatchery:swarm] [hatchery:vsphere] [elasticsearch] [hooks] [vcs] [repositories] [migrate]</description>
    </item>
    
    <item>
      <title>notification</title>
      <link>/development/rest/notification/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/rest/notification/</guid>
      <description>GET /notification/state    URL /notification/state     Method GET   Permissions Auth: true   Code getUserNotificationStateValueHandler    GET /notification/type    URL /notification/type     Method GET   Permissions Auth: true   Code getUserNotificationTypeHandler    </description>
    </item>
    
    <item>
      <title>OpenID-Connect Authentication</title>
      <link>/docs/integrations/openid-connect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/integrations/openid-connect/</guid>
      <description>The OpenID-Connect Integration have to be configured on your CDS by a CDS Administrator.
This integration allows you to delegate users authentication to an OpenID-Connect third party like Keycloak or Hydra
How to configure OpenID-Connect Authentication integration Edit the toml file:
 section [api.auth.oidc]  enable the signin with enabled = true if you want to disable signup, set signupDisabled = true    [api.auth.oidc] clientId = &amp;#34;YOUR CLIENT ID&amp;#34; clientSecret = &amp;#34;YOUR CLIENT SECRET&amp;#34; enabled = true signupDisabled = false url = &amp;#34;http[s]://&amp;lt;OIDC HOST&amp;gt;:&amp;lt;PORT&amp;gt;/auth/realms/&amp;lt;YOUR REALM&amp;gt;&amp;#34; For example :</description>
    </item>
    
    <item>
      <title>Openstack Compute</title>
      <link>/docs/integrations/openstack/openstack_compute/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/integrations/openstack/openstack_compute/</guid>
      <description>CDS build using OpenStack infrastructure to spawn each CDS Workers inside dedicated virtual machine.
Start OpenStack hatchery Generate a token:
$ cdsctl consumer new me \ --scopes=Hatchery,RunExecution,Service,WorkerModel \ --name=&amp;#34;hatchery.openstack&amp;#34; \ --description=&amp;#34;Consumer token for openstack hatchery&amp;#34; \ --groups=&amp;#34;&amp;#34; \ --no-interactive Builtin consumer successfully created, use the following token to sign in: xxxxxxxx.xxxxxxx.4Bd9XJMIWrfe8Lwb-Au68TKUqflPorY2Fmcuw5vIoUs5gQyCLuxxxxxxxxxxxxxx Edit the section hatchery.openstack in the CDS Configuration file. The token have to be set on the key hatchery.openstack.commonConfiguration.api.http.token.</description>
    </item>
    
    <item>
      <title>OpenStack Swift</title>
      <link>/docs/integrations/openstack/openstack_swift/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/integrations/openstack/openstack_swift/</guid>
      <description>The OpenStack Swift Integration is a Self-Service integration that can be configured on a CDS Project.
With this integration, you can use a dedicated OpenStack Swift Storage on :
 action Artifact Upload action Artifact Download worker cache command  Notice: by default, the storage is configured in CDS Configuration. This integration allows user to use their own OpenStack Storage and not use the shared storage.
Configure with WebUI You can add a OpenStack Swift on your CDS Project.</description>
    </item>
    
    <item>
      <title>parameter</title>
      <link>/development/rest/parameter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/rest/parameter/</guid>
      <description>GET /parameter/type    URL /parameter/type     Method GET   Permissions Auth: true   Code getParameterTypeHandler    </description>
    </item>
    
    <item>
      <title>plugin-archive</title>
      <link>/docs/actions/plugin-archive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/plugin-archive/</guid>
      <description>This is a plugin to compress or uncompress an archive. Supported formats: .zip, .tar, .tar.gz, .tar.bz2, .tar.xz, .tar.zst, .tar.lz4, .tar.sz, and .rar (extract-only)
Parameters  action: &amp;ldquo;compress&amp;rdquo; or &amp;ldquo;uncompress&amp;rdquo; an archive destination: The destination path source: The source path  </description>
    </item>
    
    <item>
      <title>plugin-arsenal-delete-alternative</title>
      <link>/docs/actions/plugin-arsenal-delete-alternative/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/plugin-arsenal-delete-alternative/</guid>
      <description>OVH Arsenal Delete Alternative Plugin
Parameters  alternative_name: alternative name to delete, defaults to alternative from deployment integration if not set  </description>
    </item>
    
    <item>
      <title>plugin-artifactory-release-bundle-create</title>
      <link>/docs/actions/plugin-artifactory-release-bundle-create/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/plugin-artifactory-release-bundle-create/</guid>
      <description>Creates and sign a Artifactory Release Bundle from a specification.
Read more: https://www.jfrog.com/confluence/display/CLI/CLI+for+JFrog+Artifactory#CLIforJFrogArtifactory-UsingFileSpecs
Parameters  description: Release Bundle description name: Release Bundle name release_notes: Release Notes (markdown format) specification: Spec Schema (yaml or json). see https://www.jfrog.com/confluence/display/CLI/CLI+for+JFrog+Artifactory#CLIforJFrogArtifactory-UsingFileSpecs token_variable: JFrog Distribution token variable name. Leave empty to use integration. url: JFrog Artifactory URL. Leave empty to use integration. version: Release Bundle version  </description>
    </item>
    
    <item>
      <title>plugin-artifactory-release-bundle-distribute</title>
      <link>/docs/actions/plugin-artifactory-release-bundle-distribute/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/plugin-artifactory-release-bundle-distribute/</guid>
      <description>Distributes a Artifactory Release Bundle on all the Jfrog Platform.
Parameters  name: Release Bundle name token_variable: JFrog Distribution token variable name. Leave empty to use integration. url: JFrog Artifactory URL. Leave empty to use integration. version: Release Bundle version  </description>
    </item>
    
    <item>
      <title>plugin-tmpl</title>
      <link>/docs/actions/plugin-tmpl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/plugin-tmpl/</guid>
      <description>This action helps you generates a file using a template file and text/template golang package.
Check documentation on text/template for more information https://golang.org/pkg/text/template.
Parameters  file: Template file to use output: Output path for generated file (default to .out or just trimming .tpl extension) params: Parameters to pass on the template file (key=value newline separated list)  </description>
    </item>
    
    <item>
      <title>powershell</title>
      <link>/docs/components/cdsctl/completion/powershell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/completion/powershell/</guid>
      <description>cdsctl completion powershell Generate the autocompletion script for powershell
Synopsis Generate the autocompletion script for powershell.
To load completions in your current shell session:
cdsctl completion powershell | Out-String | Invoke-Expression  To load completions for every new session, add the output of the above command to your powershell profile.
cdsctl completion powershell [flags] Options  --no-descriptions disable completion descriptions Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>powershell</title>
      <link>/docs/components/engine/completion/powershell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/engine/completion/powershell/</guid>
      <description>engine completion powershell Generate the autocompletion script for powershell
Synopsis Generate the autocompletion script for powershell.
To load completions in your current shell session:
engine completion powershell | Out-String | Invoke-Expression  To load completions for every new session, add the output of the above command to your powershell profile.
engine completion powershell [flags] Options  --no-descriptions disable completion descriptions SEE ALSO  engine completion	- Generate the autocompletion script for the specified shell  </description>
    </item>
    
    <item>
      <title>powershell</title>
      <link>/docs/components/worker/completion/powershell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/worker/completion/powershell/</guid>
      <description>worker completion powershell Generate the autocompletion script for powershell
Synopsis Generate the autocompletion script for powershell.
To load completions in your current shell session:
worker completion powershell | Out-String | Invoke-Expression  To load completions for every new session, add the output of the above command to your powershell profile.
worker completion powershell [flags] Options  --no-descriptions disable completion descriptions SEE ALSO  worker completion	- Generate the autocompletion script for the specified shell  </description>
    </item>
    
    <item>
      <title>project</title>
      <link>/development/rest/project/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/rest/project/</guid>
      <description>DELETE /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/deployment/config/&amp;lt;integration&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/deployment/config/&amp;lt;integration&amp;gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteApplicationDeploymentStrategyConfigHandler    DELETE /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/keys/&amp;lt;name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/keys/&amp;lt;name&amp;gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteKeyInApplicationHandler    DELETE /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/variable/&amp;lt;name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/variable/&amp;lt;name&amp;gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteVariableFromApplicationHandler    DELETE /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteApplicationHandler    DELETE /project/&amp;lt;project-key&amp;gt;/encrypt    URL /project/&amp;lt;project-key&amp;gt;/encrypt     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteEncryptVariableHandler    DELETE /project/&amp;lt;project-key&amp;gt;/environment/&amp;lt;environment-name&amp;gt;/keys/&amp;lt;name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/environment/&amp;lt;environment-name&amp;gt;/keys/&amp;lt;name&amp;gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteKeyInEnvironmentHandler    DELETE /project/&amp;lt;project-key&amp;gt;/environment/&amp;lt;environment-name&amp;gt;/variable/&amp;lt;name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/environment/&amp;lt;environment-name&amp;gt;/variable/&amp;lt;name&amp;gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteVariableFromEnvironmentHandler    DELETE /project/&amp;lt;project-key&amp;gt;/environment/&amp;lt;environment-name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/environment/&amp;lt;environment-name&amp;gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteEnvironmentHandler    DELETE /project/&amp;lt;project-key&amp;gt;/group/&amp;lt;group-name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/group/&amp;lt;group-name&amp;gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteGroupFromProjectHandler    DELETE /project/&amp;lt;project-key&amp;gt;/integrations/&amp;lt;integration-name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/integrations/&amp;lt;integration-name&amp;gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteProjectIntegrationHandler    DELETE /project/&amp;lt;project-key&amp;gt;/keys/&amp;lt;name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/keys/&amp;lt;name&amp;gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteKeyInProjectHandler    DELETE /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;/parameter/&amp;lt;name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;/parameter/&amp;lt;name&amp;gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteParameterFromPipelineHandler    DELETE /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;/stage/&amp;lt;stage-id&amp;gt;/job/&amp;lt;job-id&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;/stage/&amp;lt;stage-id&amp;gt;/job/&amp;lt;job-id&amp;gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteJobHandler    DELETE /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;/stage/&amp;lt;stage-id&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;/stage/&amp;lt;stage-id&amp;gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteStageHandler    DELETE /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deletePipelineHandler    DELETE /project/&amp;lt;project-key&amp;gt;/variable/&amp;lt;name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/variable/&amp;lt;name&amp;gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteVariableFromProjectHandler    DELETE /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/groups/&amp;lt;group-name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/groups/&amp;lt;group-name&amp;gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteWorkflowGroupHandler    DELETE /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/icon    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/icon     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteWorkflowIconHandler    DELETE /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/integration/&amp;lt;integration-id&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/integration/&amp;lt;integration-id&amp;gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteWorkflowEventsIntegrationHandler    DELETE /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/label/&amp;lt;label-id&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/label/&amp;lt;label-id&amp;gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteWorkflowLabelHandler    DELETE /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/&amp;lt;number&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/&amp;lt;number&amp;gt;     Method DELETE   Permissions Auth: true   Code deleteWorkflowRunHandler    DELETE /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/branch/&amp;lt;branch&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/branch/&amp;lt;branch&amp;gt;     Method DELETE   Permissions Auth: true   Scopes Run   Code deleteWorkflowRunsBranchHandler    DELETE /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteWorkflowHandler    DELETE /project/&amp;lt;project-key&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;     Method DELETE   Permissions Auth: true   Scopes Project   Code deleteProjectHandler    GET /project/&amp;lt;project-key&amp;gt;/action    URL /project/&amp;lt;project-key&amp;gt;/action     Method GET   Permissions Auth: true   Scopes Project   Code getActionsForProjectHandler    GET /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/deployment/config/&amp;lt;integration&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/deployment/config/&amp;lt;integration&amp;gt;     Method GET   Permissions Auth: true   Scopes Project   Code getApplicationDeploymentStrategyConfigHandler    GET /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/deployment/config    URL /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/deployment/config     Method GET   Permissions Auth: true   Scopes Project   Code getApplicationDeploymentStrategiesConfigHandler    GET /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/keys    URL /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/keys     Method GET   Permissions Auth: true   Scopes Project   Code getKeysInApplicationHandler    GET /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/metrics/&amp;lt;metric-name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/metrics/&amp;lt;metric-name&amp;gt;     Method GET   Permissions Auth: true   Scopes Project   Code getApplicationMetricHandler    GET /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/variable/&amp;lt;name&amp;gt;/audit    URL /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/variable/&amp;lt;name&amp;gt;/audit     Method GET   Permissions Auth: true   Scopes Project   Code getVariableAuditInApplicationHandler    GET /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/variable/&amp;lt;name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/variable/&amp;lt;name&amp;gt;     Method GET   Permissions Auth: true   Scopes Project   Code getVariableInApplicationHandler    GET /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/variable/audit    URL /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/variable/audit     Method GET   Permissions Auth: true   Scopes Project   Code getVariablesAuditInApplicationHandler    GET /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/variable    URL /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/variable     Method GET   Permissions Auth: true   Scopes Project   Code getVariablesInApplicationHandler    GET /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/vcsinfos    URL /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/vcsinfos     Method GET   Permissions Auth: true   Scopes Project   Code getApplicationVCSInfosHandler    GET /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;     Method GET   Permissions Auth: true   Scopes Project   Code getApplicationHandler    GET /project/&amp;lt;project-key&amp;gt;/applications    URL /project/&amp;lt;project-key&amp;gt;/applications     Method GET   Permissions Auth: true   Scopes Project   Code getApplicationsHandler    GET /project/&amp;lt;project-key&amp;gt;/encrypt/list    URL /project/&amp;lt;project-key&amp;gt;/encrypt/list     Method GET   Permissions Auth: true   Scopes Project   Code getListEncryptVariableHandler    GET /project/&amp;lt;project-key&amp;gt;/environment/&amp;lt;environment-name&amp;gt;/keys    URL /project/&amp;lt;project-key&amp;gt;/environment/&amp;lt;environment-name&amp;gt;/keys     Method GET   Permissions Auth: true   Scopes Project   Code getKeysInEnvironmentHandler    GET /project/&amp;lt;project-key&amp;gt;/environment/&amp;lt;environment-name&amp;gt;/usage    URL /project/&amp;lt;project-key&amp;gt;/environment/&amp;lt;environment-name&amp;gt;/usage     Method GET   Permissions Auth: true   Scopes Project   Code getEnvironmentUsageHandler    GET /project/&amp;lt;project-key&amp;gt;/environment/&amp;lt;environment-name&amp;gt;/variable/&amp;lt;name&amp;gt;/audit    URL /project/&amp;lt;project-key&amp;gt;/environment/&amp;lt;environment-name&amp;gt;/variable/&amp;lt;name&amp;gt;/audit     Method GET   Permissions Auth: true   Scopes Project   Code getVariableAuditInEnvironmentHandler    GET /project/&amp;lt;project-key&amp;gt;/environment/&amp;lt;environment-name&amp;gt;/variable/&amp;lt;name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/environment/&amp;lt;environment-name&amp;gt;/variable/&amp;lt;name&amp;gt;     Method GET   Permissions Auth: true   Scopes Project   Code getVariableInEnvironmentHandler    GET /project/&amp;lt;project-key&amp;gt;/environment/&amp;lt;environment-name&amp;gt;/variable    URL /project/&amp;lt;project-key&amp;gt;/environment/&amp;lt;environment-name&amp;gt;/variable     Method GET   Permissions Auth: true   Scopes Project   Code getVariablesInEnvironmentHandler    GET /project/&amp;lt;project-key&amp;gt;/environment/&amp;lt;environment-name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/environment/&amp;lt;environment-name&amp;gt;     Method GET   Permissions Auth: true   Scopes Project   Code getEnvironmentHandler    GET /project/&amp;lt;project-key&amp;gt;/environment    URL /project/&amp;lt;project-key&amp;gt;/environment     Method GET   Permissions Auth: true   Scopes Project   Code getEnvironmentsHandler    GET /project/&amp;lt;project-key&amp;gt;/export/application/&amp;lt;application-name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/export/application/&amp;lt;application-name&amp;gt;     Method GET   Permissions Auth: true   Scopes Project   Code getApplicationExportHandler    GET /project/&amp;lt;project-key&amp;gt;/export/environment/&amp;lt;environment-name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/export/environment/&amp;lt;environment-name&amp;gt;     Method GET   Permissions Auth: true   Scopes Project   Code getEnvironmentExportHandler    GET /project/&amp;lt;project-key&amp;gt;/export/pipeline/&amp;lt;pipeline-key&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/export/pipeline/&amp;lt;pipeline-key&amp;gt;     Method GET   Permissions Auth: true   Scopes Project   Code getPipelineExportHandler    GET /project/&amp;lt;project-key&amp;gt;/export/workflows/&amp;lt;workflow-name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/export/workflows/&amp;lt;workflow-name&amp;gt;     Method GET   Permissions Auth: true   Scopes Project   Code getWorkflowExportHandler    GET /project/&amp;lt;project-key&amp;gt;/integrations/&amp;lt;integration-name&amp;gt;/workerhooks    URL /project/&amp;lt;project-key&amp;gt;/integrations/&amp;lt;integration-name&amp;gt;/workerhooks     Method GET   Permissions Auth: true   Code getProjectIntegrationWorkerHookHandler    GET /project/&amp;lt;project-key&amp;gt;/integrations/&amp;lt;integration-name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/integrations/&amp;lt;integration-name&amp;gt;     Method GET   Permissions Auth: true   Scopes Project   Code getProjectIntegrationHandler    GET /project/&amp;lt;project-key&amp;gt;/integrations    URL /project/&amp;lt;project-key&amp;gt;/integrations     Method GET   Permissions Auth: true   Scopes Project   Code getProjectIntegrationsHandler    GET /project/&amp;lt;project-key&amp;gt;/keys    URL /project/&amp;lt;project-key&amp;gt;/keys     Method GET   Permissions Auth: true   Scopes Project   Code getKeysInProjectHandler    GET /project/&amp;lt;project-key&amp;gt;/notifications    URL /project/&amp;lt;project-key&amp;gt;/notifications     Method GET   Permissions Auth: true   Scopes Project   Code getProjectNotificationsHandler    GET /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;/audits    URL /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;/audits     Method GET   Permissions Auth: true   Scopes Project   Code getPipelineAuditHandler    GET /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;/parameter    URL /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;/parameter     Method GET   Permissions Auth: true   Scopes Project   Code getParametersInPipelineHandler    GET /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;/stage/&amp;lt;stage-id&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;/stage/&amp;lt;stage-id&amp;gt;     Method GET   Permissions Auth: true   Scopes Project   Code getStageHandler    GET /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;/stage/condition    URL /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;/stage/condition     Method GET   Permissions Auth: true   Scopes Project   Code getStageConditionsHandler    GET /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;     Method GET   Permissions Auth: true   Scopes Project   Code getPipelineHandler    GET /project/&amp;lt;project-key&amp;gt;/pipeline    URL /project/&amp;lt;project-key&amp;gt;/pipeline     Method GET   Permissions Auth: true   Scopes Project   Code getPipelinesHandler    GET /project/&amp;lt;project-key&amp;gt;/pull/workflows/&amp;lt;workflow-name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/pull/workflows/&amp;lt;workflow-name&amp;gt;     Method GET   Permissions Auth: true   Scopes Project   Code getWorkflowPullHandler    GET /project/&amp;lt;project-key&amp;gt;/repositories_manager/&amp;lt;name&amp;gt;/repo    URL /project/&amp;lt;project-key&amp;gt;/repositories_manager/&amp;lt;name&amp;gt;/repo     Method GET   Permissions Auth: true   Scopes Project   Code getRepoFromRepositoriesManagerHandler    GET /project/&amp;lt;project-key&amp;gt;/repositories_manager/&amp;lt;name&amp;gt;/repos    URL /project/&amp;lt;project-key&amp;gt;/repositories_manager/&amp;lt;name&amp;gt;/repos     Method GET   Permissions Auth: true   Scopes Project   Code getReposFromRepositoriesManagerHandler    GET /project/&amp;lt;project-key&amp;gt;/repositories_manager    URL /project/&amp;lt;project-key&amp;gt;/repositories_manager     Method GET   Permissions Auth: true   Scopes Project   Code getRepositoriesManagerForProjectHandler    GET /project/&amp;lt;project-key&amp;gt;/runs    URL /project/&amp;lt;project-key&amp;gt;/runs     Method GET   Permissions Auth: true   Scopes Project   Code getWorkflowAllRunsHandler    GET /project/&amp;lt;project-key&amp;gt;/type/&amp;lt;type&amp;gt;/access    URL /project/&amp;lt;project-key&amp;gt;/type/&amp;lt;type&amp;gt;/access     Method GET   Permissions Auth: true   Scopes Service   Code getProjectAccessHandler    GET /project/&amp;lt;project-key&amp;gt;/variable/&amp;lt;name&amp;gt;/audit    URL /project/&amp;lt;project-key&amp;gt;/variable/&amp;lt;name&amp;gt;/audit     Method GET   Permissions Auth: true   Scopes Project   Code getVariableAuditInProjectHandler    GET /project/&amp;lt;project-key&amp;gt;/variable/&amp;lt;name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/variable/&amp;lt;name&amp;gt;     Method GET   Permissions Auth: true   Scopes Project   Code getVariableInProjectHandler    GET /project/&amp;lt;project-key&amp;gt;/variable/audit    URL /project/&amp;lt;project-key&amp;gt;/variable/audit     Method GET   Permissions Auth: true   Scopes Project   Code getVariablesAuditInProjectnHandler    GET /project/&amp;lt;project-key&amp;gt;/variable    URL /project/&amp;lt;project-key&amp;gt;/variable     Method GET   Permissions Auth: true   Scopes Project   Code getVariablesInProjectHandler    GET /project/&amp;lt;project-key&amp;gt;/worker/model    URL /project/&amp;lt;project-key&amp;gt;/worker/model     Method GET   Permissions Auth: true   Scopes WorkerModel   Code getWorkerModelsForProjectHandler    GET /project/&amp;lt;project-key&amp;gt;/workflow/&amp;lt;workflow-name&amp;gt;/node/&amp;lt;node-id&amp;gt;/hook/model    URL /project/&amp;lt;project-key&amp;gt;/workflow/&amp;lt;workflow-name&amp;gt;/node/&amp;lt;node-id&amp;gt;/hook/model     Method GET   Permissions Auth: true   Scopes Project   Code getWorkflowHookModelsHandler    GET /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-id&amp;gt;/type/&amp;lt;type&amp;gt;/access    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-id&amp;gt;/type/&amp;lt;type&amp;gt;/access     Method GET   Permissions Auth: true   Scopes Service   Code getWorkflowAccessHandler    GET /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/delete/dependencies    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/delete/dependencies     Method GET   Permissions Auth: true   Scopes Project   Code getWorkflowDependenciesHandler    GET /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/hook/triggers/condition    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/hook/triggers/condition     Method GET   Permissions Auth: true   Scopes Run   Code getWorkflowTriggerHookConditionHandler    GET /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/hooks/&amp;lt;uuid&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/hooks/&amp;lt;uuid&amp;gt;     Method GET   Permissions Auth: true   Scopes Project   Code getWorkflowHookHandler    GET /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/nodes/&amp;lt;node-run-id&amp;gt;/job/&amp;lt;run-job-id&amp;gt;/links    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/nodes/&amp;lt;node-run-id&amp;gt;/job/&amp;lt;run-job-id&amp;gt;/links     Method GET   Permissions Auth: true   Scopes Run   Code getWorkflowNodeRunJobStepLinksHandler    GET /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/nodes/&amp;lt;node-run-id&amp;gt;/job/&amp;lt;run-job-id&amp;gt;/service/&amp;lt;service-name&amp;gt;/link    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/nodes/&amp;lt;node-run-id&amp;gt;/job/&amp;lt;run-job-id&amp;gt;/service/&amp;lt;service-name&amp;gt;/link     Method GET   Permissions Auth: true   Scopes Run   Code getWorkflowNodeRunJobServiceLinkHandler    GET /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/nodes/&amp;lt;node-run-id&amp;gt;/job/&amp;lt;run-job-id&amp;gt;/step/&amp;lt;step-order&amp;gt;/link    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/nodes/&amp;lt;node-run-id&amp;gt;/job/&amp;lt;run-job-id&amp;gt;/step/&amp;lt;step-order&amp;gt;/link     Method GET   Permissions Auth: true   Scopes Run   Code getWorkflowNodeRunJobStepLinkHandler    GET /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/notifications/conditions    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/notifications/conditions     Method GET   Permissions Auth: true   Scopes Project   Code getWorkflowNotificationsConditionsHandler    GET /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/retention/suggest    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/retention/suggest     Method GET   Permissions Auth: true   Scopes Project   Code getRetentionPolicySuggestionHandler    GET /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/&amp;lt;number&amp;gt;/&amp;lt;node-name&amp;gt;/commits    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/&amp;lt;number&amp;gt;/&amp;lt;node-name&amp;gt;/commits     Method GET   Permissions Auth: true   Scopes Run   Code getWorkflowCommitsHandler    GET /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/&amp;lt;number&amp;gt;/artifacts/links    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/&amp;lt;number&amp;gt;/artifacts/links     Method GET   Permissions Auth: true   Code getWorkflowRunArtifactLinksHandler    GET /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/&amp;lt;number&amp;gt;/hooks/&amp;lt;hook-run-id&amp;gt;/details    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/&amp;lt;number&amp;gt;/hooks/&amp;lt;hook-run-id&amp;gt;/details     Method GET   Permissions Auth: true   Scopes Run   Code getWorkflowJobHookDetailsHandler    GET /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/&amp;lt;number&amp;gt;/nodes/&amp;lt;node-id&amp;gt;/history    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/&amp;lt;number&amp;gt;/nodes/&amp;lt;node-id&amp;gt;/history     Method GET   Permissions Auth: true   Scopes Run   Code getWorkflowNodeRunHistoryHandler    GET /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/&amp;lt;number&amp;gt;/nodes/&amp;lt;node-run-id&amp;gt;/job/&amp;lt;run-job-id&amp;gt;/info    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/&amp;lt;number&amp;gt;/nodes/&amp;lt;node-run-id&amp;gt;/job/&amp;lt;run-job-id&amp;gt;/info     Method GET   Permissions Auth: true   Scopes Run   Code getWorkflowNodeRunJobSpawnInfosHandler    GET /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/&amp;lt;number&amp;gt;/nodes/&amp;lt;node-run-id&amp;gt;/results    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/&amp;lt;number&amp;gt;/nodes/&amp;lt;node-run-id&amp;gt;/results     Method GET   Permissions Auth: true   Code getWorkflowNodeRunResultsHandler    GET /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/&amp;lt;number&amp;gt;/nodes/&amp;lt;node-run-id&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/&amp;lt;number&amp;gt;/nodes/&amp;lt;node-run-id&amp;gt;     Method GET   Permissions Auth: true   Scopes Run   Code getWorkflowNodeRunHandler    GET /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/&amp;lt;number&amp;gt;/results    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/&amp;lt;number&amp;gt;/results     Method GET   Permissions Auth: true   Code getWorkflowRunResultsHandler    GET /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/&amp;lt;number&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/&amp;lt;number&amp;gt;     Method GET   Permissions Auth: true   Code getWorkflowRunHandler    GET /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/latest    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/latest     Method GET   Permissions Auth: true   Scopes Run   Code getLatestWorkflowRunHandler    GET /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/num    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/num     Method GET   Permissions Auth: true   Scopes Run   Code getWorkflowRunNumHandler    GET /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/tags    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/tags     Method GET   Permissions Auth: true   Scopes Run   Code getWorkflowRunTagsHandler    GET /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs     Method GET   Permissions Auth: true   Scopes Run   Code getWorkflowRunsHandler    GET /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/triggers/condition    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/triggers/condition     Method GET   Permissions Auth: true   Scopes Run   Code getWorkflowTriggerConditionHandler    GET /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;     Method GET   Permissions Auth: true   Scopes Project   Code getWorkflowHandler    GET /project/&amp;lt;project-key&amp;gt;/workflows    URL /project/&amp;lt;project-key&amp;gt;/workflows     Method GET   Permissions Auth: true   Scopes Project   Code getWorkflowsHandler    GET /project/&amp;lt;project-key&amp;gt;/workflowv3/&amp;lt;workflow-name&amp;gt;/run/&amp;lt;number&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/workflowv3/&amp;lt;workflow-name&amp;gt;/run/&amp;lt;number&amp;gt;     Method GET   Permissions Auth: true   Scopes Run   Code getWorkflowV3RunHandler    GET /project/&amp;lt;project-key&amp;gt;/workflowv3/&amp;lt;workflow-name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/workflowv3/&amp;lt;workflow-name&amp;gt;     Method GET   Permissions Auth: true   Scopes Project   Code getWorkflowV3Handler    GET /project/&amp;lt;project-key&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;     Method GET   Permissions Auth: true   Scopes Project   Code getProjectHandler    GET /project    URL /project     Method GET   Permissions Auth: true   Scopes Project   Code getProjectsHandler    POST /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/clone    URL /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/clone     Method POST   Permissions Auth: true   Scopes Project   Code cloneApplicationHandler    POST /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/deployment/config/&amp;lt;integration&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/deployment/config/&amp;lt;integration&amp;gt;     Method POST   Permissions Auth: true   Scopes Project   Code postApplicationDeploymentStrategyConfigHandler    POST /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/keys    URL /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/keys     Method POST   Permissions Auth: true   Scopes Project   Code addKeyInApplicationHandler    POST /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/metadata/&amp;lt;metadata&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/metadata/&amp;lt;metadata&amp;gt;     Method POST   Permissions Auth: true   Scopes Project   Code postApplicationMetadataHandler    POST /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/variable/&amp;lt;name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/variable/&amp;lt;name&amp;gt;     Method POST   Permissions Auth: true   Scopes Project   Code addVariableInApplicationHandler    POST /project/&amp;lt;project-key&amp;gt;/applications    URL /project/&amp;lt;project-key&amp;gt;/applications     Method POST   Permissions Auth: true   Scopes Project   Code addApplicationHandler    POST /project/&amp;lt;project-key&amp;gt;/encrypt    URL /project/&amp;lt;project-key&amp;gt;/encrypt     Method POST   Permissions Auth: true   Scopes Project   Code postEncryptVariableHandler    POST /project/&amp;lt;project-key&amp;gt;/environment/&amp;lt;environment-name&amp;gt;/clone/&amp;lt;clone-name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/environment/&amp;lt;environment-name&amp;gt;/clone/&amp;lt;clone-name&amp;gt;     Method POST   Permissions Auth: true   Scopes Project   Code cloneEnvironmentHandler    POST /project/&amp;lt;project-key&amp;gt;/environment/&amp;lt;environment-name&amp;gt;/keys    URL /project/&amp;lt;project-key&amp;gt;/environment/&amp;lt;environment-name&amp;gt;/keys     Method POST   Permissions Auth: true   Scopes Project   Code addKeyInEnvironmentHandler    POST /project/&amp;lt;project-key&amp;gt;/environment/&amp;lt;environment-name&amp;gt;/variable/&amp;lt;name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/environment/&amp;lt;environment-name&amp;gt;/variable/&amp;lt;name&amp;gt;     Method POST   Permissions Auth: true   Scopes Project   Code addVariableInEnvironmentHandler    POST /project/&amp;lt;project-key&amp;gt;/environment/import/&amp;lt;environment-name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/environment/import/&amp;lt;environment-name&amp;gt;     Method POST   Permissions Auth: true   Scopes Project   Code importIntoEnvironmentHandler    POST /project/&amp;lt;project-key&amp;gt;/environment/import    URL /project/&amp;lt;project-key&amp;gt;/environment/import     Method POST   Permissions Auth: true   Scopes Project   Code importNewEnvironmentHandler    POST /project/&amp;lt;project-key&amp;gt;/environment    URL /project/&amp;lt;project-key&amp;gt;/environment     Method POST   Permissions Auth: true   Scopes Project   Code addEnvironmentHandler    POST /project/&amp;lt;project-key&amp;gt;/group    URL /project/&amp;lt;project-key&amp;gt;/group     Method POST   Permissions Auth: true   Scopes Project   Code postGroupInProjectHandler    POST /project/&amp;lt;project-key&amp;gt;/import/application    URL /project/&amp;lt;project-key&amp;gt;/import/application     Method POST   Permissions Auth: true   Scopes Project   Code postApplicationImportHandler    POST /project/&amp;lt;project-key&amp;gt;/import/pipeline    URL /project/&amp;lt;project-key&amp;gt;/import/pipeline     Method POST   Permissions Auth: true   Scopes Project   Code importPipelineHandler    POST /project/&amp;lt;project-key&amp;gt;/import/workflows    URL /project/&amp;lt;project-key&amp;gt;/import/workflows     Method POST   Permissions Auth: true   Scopes Project   Code postWorkflowImportHandler    POST /project/&amp;lt;project-key&amp;gt;/integrations/&amp;lt;integration-name&amp;gt;/workerhooks    URL /project/&amp;lt;project-key&amp;gt;/integrations/&amp;lt;integration-name&amp;gt;/workerhooks     Method POST   Permissions Auth: true   Code postProjectIntegrationWorkerHookHandler    POST /project/&amp;lt;project-key&amp;gt;/integrations    URL /project/&amp;lt;project-key&amp;gt;/integrations     Method POST   Permissions Auth: true   Scopes Project   Code postProjectIntegrationHandler    POST /project/&amp;lt;project-key&amp;gt;/keys/&amp;lt;name&amp;gt;/disable    URL /project/&amp;lt;project-key&amp;gt;/keys/&amp;lt;name&amp;gt;/disable     Method POST   Permissions Auth: true   Scopes Project   Code postDisableKeyInProjectHandler    POST /project/&amp;lt;project-key&amp;gt;/keys/&amp;lt;name&amp;gt;/enable    URL /project/&amp;lt;project-key&amp;gt;/keys/&amp;lt;name&amp;gt;/enable     Method POST   Permissions Auth: true   Scopes Project   Code postEnableKeyInProjectHandler    POST /project/&amp;lt;project-key&amp;gt;/keys    URL /project/&amp;lt;project-key&amp;gt;/keys     Method POST   Permissions Auth: true   Scopes Project   Code addKeyInProjectHandler    POST /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;/parameter/&amp;lt;name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;/parameter/&amp;lt;name&amp;gt;     Method POST   Permissions Auth: true   Scopes Project   Code addParameterInPipelineHandler    POST /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;/rollback/&amp;lt;audit-id&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;/rollback/&amp;lt;audit-id&amp;gt;     Method POST   Permissions Auth: true   Scopes Project   Code postPipelineRollbackHandler    POST /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;/stage/&amp;lt;stage-id&amp;gt;/job    URL /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;/stage/&amp;lt;stage-id&amp;gt;/job     Method POST   Permissions Auth: true   Scopes Project   Code addJobToStageHandler    POST /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;/stage/move    URL /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;/stage/move     Method POST   Permissions Auth: true   Scopes Project   Code moveStageHandler    POST /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;/stage    URL /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;/stage     Method POST   Permissions Auth: true   Scopes Project   Code addStageHandler    POST /project/&amp;lt;project-key&amp;gt;/pipeline    URL /project/&amp;lt;project-key&amp;gt;/pipeline     Method POST   Permissions Auth: true   Scopes Project   Code addPipelineHandler    POST /project/&amp;lt;project-key&amp;gt;/preview/pipeline    URL /project/&amp;lt;project-key&amp;gt;/preview/pipeline     Method POST   Permissions Auth: true   Scopes Project   Code postPipelinePreviewHandler    POST /project/&amp;lt;project-key&amp;gt;/preview/workflows    URL /project/&amp;lt;project-key&amp;gt;/preview/workflows     Method POST   Permissions Auth: true   Scopes Project   Code postWorkflowPreviewHandler    POST /project/&amp;lt;project-key&amp;gt;/push/workflows    URL /project/&amp;lt;project-key&amp;gt;/push/workflows     Method POST   Permissions Auth: true   Scopes Project   Code postWorkflowPushHandler    POST /project/&amp;lt;project-key&amp;gt;/repositories_manager/&amp;lt;name&amp;gt;/application/&amp;lt;application-name&amp;gt;/attach    URL /project/&amp;lt;project-key&amp;gt;/repositories_manager/&amp;lt;name&amp;gt;/application/&amp;lt;application-name&amp;gt;/attach     Method POST   Permissions Auth: true   Scopes Project   Code attachRepositoriesManagerHandler    POST /project/&amp;lt;project-key&amp;gt;/repositories_manager/&amp;lt;name&amp;gt;/application/&amp;lt;application-name&amp;gt;/detach    URL /project/&amp;lt;project-key&amp;gt;/repositories_manager/&amp;lt;name&amp;gt;/application/&amp;lt;application-name&amp;gt;/detach     Method POST   Permissions Auth: true   Scopes Project   Code detachRepositoriesManagerHandler    POST /project/&amp;lt;project-key&amp;gt;/variable/&amp;lt;name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/variable/&amp;lt;name&amp;gt;     Method POST   Permissions Auth: true   Scopes Project   Code addVariableInProjectHandler    POST /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/ascode/events/resync    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/ascode/events/resync     Method POST   Permissions Auth: true   Scopes Project   Code postWorkflowAsCodeEventsResyncHandler    POST /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/ascode    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/ascode     Method POST   Permissions Auth: true   Scopes Project   Code postWorkflowAsCodeHandler    POST /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/groups    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/groups     Method POST   Permissions Auth: true   Scopes Project   Code postWorkflowGroupHandler    POST /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/label    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/label     Method POST   Permissions Auth: true   Scopes Project   Code postWorkflowLabelHandler    POST /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/retention/dryrun    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/retention/dryrun     Method POST   Permissions Auth: true   Scopes Project   Code postWorkflowRetentionPolicyDryRun    POST /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/rollback/&amp;lt;audit-id&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/rollback/&amp;lt;audit-id&amp;gt;     Method POST   Permissions Auth: true   Scopes Project   Code postWorkflowRollbackHandler    POST /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/&amp;lt;number&amp;gt;/hooks/&amp;lt;hook-run-id&amp;gt;/callback    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/&amp;lt;number&amp;gt;/hooks/&amp;lt;hook-run-id&amp;gt;/callback     Method POST   Permissions Auth: true   Scopes Run   Code postWorkflowJobHookCallbackHandler    POST /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/num    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/num     Method POST   Permissions Auth: true   Scopes Run   Code postWorkflowRunNumHandler    POST /project/&amp;lt;project-key&amp;gt;/workflows    URL /project/&amp;lt;project-key&amp;gt;/workflows     Method POST   Permissions Auth: true   Scopes Project   Code postWorkflowHandler    POST /project/&amp;lt;project-key&amp;gt;/workflowv3/validate    URL /project/&amp;lt;project-key&amp;gt;/workflowv3/validate     Method POST   Permissions Auth: true   Scopes Project   Code postWorkflowV3ValidateHandler    POST /project    URL /project     Method POST   Permissions Auth: true   Scopes Project   Code postProjectHandler    POSTEXECUTE /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/&amp;lt;number&amp;gt;/nodes/&amp;lt;node-run-id&amp;gt;/release    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/&amp;lt;number&amp;gt;/nodes/&amp;lt;node-run-id&amp;gt;/release     Method POSTEXECUTE   Permissions Auth: true   Scopes RunExecution   Code releaseApplicationWorkflowHandler    POSTEXECUTE /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/&amp;lt;number&amp;gt;/nodes/&amp;lt;node-run-id&amp;gt;/stop    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/&amp;lt;number&amp;gt;/nodes/&amp;lt;node-run-id&amp;gt;/stop     Method POSTEXECUTE   Permissions Auth: true   Scopes Run   Code stopWorkflowNodeRunHandler    POSTEXECUTE /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/&amp;lt;number&amp;gt;/stop    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/&amp;lt;number&amp;gt;/stop     Method POSTEXECUTE   Permissions Auth: true   Scopes Run   Code stopWorkflowRunHandler    POSTEXECUTE /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/&amp;lt;number&amp;gt;/vcs/resync    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs/&amp;lt;number&amp;gt;/vcs/resync     Method POSTEXECUTE   Permissions Auth: true   Scopes Run   Code postResyncVCSWorkflowRunHandler    POSTEXECUTE /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/runs     Method POSTEXECUTE   Permissions Auth: true   Scopes Run   Code postWorkflowRunHandler    PUT /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/ascode    URL /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/ascode     Method PUT   Permissions Auth: true   Scopes Project   Code updateAsCodeApplicationHandler    PUT /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/variable/&amp;lt;name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/variable/&amp;lt;name&amp;gt;     Method PUT   Permissions Auth: true   Scopes Project   Code updateVariableInApplicationHandler    PUT /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;     Method PUT   Permissions Auth: true   Scopes Project   Code updateApplicationHandler    PUT /project/&amp;lt;project-key&amp;gt;/environment/&amp;lt;environment-name&amp;gt;/ascode    URL /project/&amp;lt;project-key&amp;gt;/environment/&amp;lt;environment-name&amp;gt;/ascode     Method PUT   Permissions Auth: true   Scopes Project   Code updateAsCodeEnvironmentHandler    PUT /project/&amp;lt;project-key&amp;gt;/environment/&amp;lt;environment-name&amp;gt;/variable/&amp;lt;name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/environment/&amp;lt;environment-name&amp;gt;/variable/&amp;lt;name&amp;gt;     Method PUT   Permissions Auth: true   Scopes Project   Code updateVariableInEnvironmentHandler    PUT /project/&amp;lt;project-key&amp;gt;/environment/&amp;lt;environment-name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/environment/&amp;lt;environment-name&amp;gt;     Method PUT   Permissions Auth: true   Scopes Project   Code updateEnvironmentHandler    PUT /project/&amp;lt;project-key&amp;gt;/group/&amp;lt;group-name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/group/&amp;lt;group-name&amp;gt;     Method PUT   Permissions Auth: true   Scopes Project   Code putGroupRoleOnProjectHandler    PUT /project/&amp;lt;project-key&amp;gt;/import/pipeline/&amp;lt;pipeline-key&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/import/pipeline/&amp;lt;pipeline-key&amp;gt;     Method PUT   Permissions Auth: true   Scopes Project   Code putImportPipelineHandler    PUT /project/&amp;lt;project-key&amp;gt;/import/workflows/&amp;lt;workflow-name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/import/workflows/&amp;lt;workflow-name&amp;gt;     Method PUT   Permissions Auth: true   Scopes Project   Code putWorkflowImportHandler    PUT /project/&amp;lt;project-key&amp;gt;/integrations/&amp;lt;integration-name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/integrations/&amp;lt;integration-name&amp;gt;     Method PUT   Permissions Auth: true   Scopes Project   Code putProjectIntegrationHandler    PUT /project/&amp;lt;project-key&amp;gt;/labels    URL /project/&amp;lt;project-key&amp;gt;/labels     Method PUT   Permissions Auth: true   Scopes Project   Code putProjectLabelsHandler    PUT /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;/ascode    URL /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;/ascode     Method PUT   Permissions Auth: true   Scopes Project   Code updateAsCodePipelineHandler    PUT /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;/parameter/&amp;lt;name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;/parameter/&amp;lt;name&amp;gt;     Method PUT   Permissions Auth: true   Scopes Project   Code updateParameterInPipelineHandler    PUT /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;/stage/&amp;lt;stage-id&amp;gt;/job/&amp;lt;job-id&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;/stage/&amp;lt;stage-id&amp;gt;/job/&amp;lt;job-id&amp;gt;     Method PUT   Permissions Auth: true   Scopes Project   Code updateJobHandler    PUT /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;/stage/&amp;lt;stage-id&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;/stage/&amp;lt;stage-id&amp;gt;     Method PUT   Permissions Auth: true   Scopes Project   Code updateStageHandler    PUT /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/pipeline/&amp;lt;pipeline-key&amp;gt;     Method PUT   Permissions Auth: true   Scopes Project   Code updatePipelineHandler    PUT /project/&amp;lt;project-key&amp;gt;/variable/&amp;lt;name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/variable/&amp;lt;name&amp;gt;     Method PUT   Permissions Auth: true   Scopes Project   Code updateVariableInProjectHandler    PUT /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/groups/&amp;lt;group-name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/groups/&amp;lt;group-name&amp;gt;     Method PUT   Permissions Auth: true   Scopes Project   Code putWorkflowGroupHandler    PUT /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/icon    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;/icon     Method PUT   Permissions Auth: true   Scopes Project   Code putWorkflowIconHandler    PUT /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;/workflows/&amp;lt;workflow-name&amp;gt;     Method PUT   Permissions Auth: true   Scopes Project   Code putWorkflowHandler    PUT /project/&amp;lt;project-key&amp;gt;    URL /project/&amp;lt;project-key&amp;gt;     Method PUT   Permissions Auth: true   Scopes Project   Code updateProjectHandler    import an environment yml file    URL /project/&amp;lt;project-key&amp;gt;/import/environment     Method POST   Query Parameter force=true or false.</description>
    </item>
    
    <item>
      <title>projectsize</title>
      <link>/docs/components/cdsctl/admin/cdn/item/projectsize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/cdn/item/projectsize/</guid>
      <description>cdsctl admin cdn item projectsize Size used in octets by a project
Synopsis Size used in octets by a project
cdsctl admin cdn item projectsize [ PROJECT-KEY ] Examples cdsctl admin cdn item projectsize MYPROJ Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin cdn item	- Manage CDS CDN Items  </description>
    </item>
    
    <item>
      <title>Promote</title>
      <link>/docs/actions/builtin-promote/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/builtin-promote/</guid>
      <description>Promote is a builtin action, you can&amp;rsquo;t modify it.
This action promote artifacts in an artifact manager
Parameters  artifacts: (optional) Set a list of artifacts, separate by &amp;lsquo;,&amp;rsquo;. You can also use regexp. destMaturity: Repository suffix in which the artifact will be moved setProperties: Properties to add on the promoted artifacts srcMaturity: Repository suffix from which the artifact will be moved  Requirements No Requirement
YAML example Example of a pipeline using Promote action:</description>
    </item>
    
    <item>
      <title>pull</title>
      <link>/docs/components/cdsctl/template/pull/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/template/pull/</guid>
      <description>cdsctl template pull Pull CDS workflow template
Synopsis Pull CDS workflow template
cdsctl template pull [TEMPLATE-PATH] [flags] Examples cdsctl template pull group-name/template-slug Options  --force Force, may override files -d, --output-dir string Output directory (default &amp;quot;.cds&amp;quot;) --quiet If true, do not output filename created Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>pull</title>
      <link>/docs/components/cdsctl/workflow/pull/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/workflow/pull/</guid>
      <description>cdsctl workflow pull Pull a workflow
Synopsis Pull a workflow
cdsctl workflow pull [ PROJECT-KEY WORKFLOW-NAME ] [flags] Options  --force Force, may override files -d, --output-dir string Output directory (default &amp;quot;.cds&amp;quot;) --quiet If true, do not output filename created --with-permissions Export permissions Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>pull</title>
      <link>/docs/components/worker/cache/pull/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/worker/cache/pull/</guid>
      <description>worker cache pull worker cache pull tagValue
Synopsis Inside a project, you can fetch a cache from your worker with a tag
worker cache pull &amp;lt;tagValue&amp;gt;  If you push a cache with:
worker cache push latest {{.cds.workspace}}/pathToUpload  The command:
worker cache pull latest  will create the directory {{.cds.workspace}}/pathToUpload with the content of the cache
If you want to push a cache into a storage integration:
worker cache push latest --from=MyStorageIntegration {{.</description>
    </item>
    
    <item>
      <title>purge</title>
      <link>/docs/components/cdsctl/admin/hooks/purge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/hooks/purge/</guid>
      <description>cdsctl admin hooks purge Delete all executions for a task
Synopsis Delete all executions for a task
cdsctl admin hooks purge UUID Examples cdsctl admin hooks purge 5178ce1f-2f76-45c5-a203-58c10c3e2c73 Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin hooks	- Manage CDS Hooks tasks  </description>
    </item>
    
    <item>
      <title>push</title>
      <link>/docs/components/cdsctl/template/push/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/template/push/</guid>
      <description>cdsctl template push Push CDS workflow template
Synopsis Push CDS workflow template
cdsctl template push YAML-FILE ... [flags] Examples cdsctl template push my-template.yml workflow.yml 1.pipeline.yml Options  --skip-update-files Useful if you don&#39;t want to update yaml files after pushing the template. Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>push</title>
      <link>/docs/components/cdsctl/workflow/push/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/workflow/push/</guid>
      <description>cdsctl workflow push Push a workflow
Synopsis Useful when you want to push a workflow and his dependencies (pipelines, applications, environments)
For example if you have a workflow with pipelines build and tests you can push your workflow and pipelines with
cdsctl workflow push tests.pip.yml build.pip.yml myWorkflow.yml  cdsctl workflow push [ PROJECT-KEY ] YAML-FILE ... [flags] Options  --force Override workflow if exists --skip-update-files Useful if you don&#39;t want to update yaml files after pushing the workflow.</description>
    </item>
    
    <item>
      <title>push</title>
      <link>/docs/components/worker/cache/push/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/worker/cache/push/</guid>
      <description>worker cache push worker cache push tagValue {{.cds.workspace}}/pathToUpload
Synopsis Inside a project, you can create a cache from your worker with a tag (useful for vendors for example) worker cache push dir/file
You can use you storage integration: worker cache push &amp;ndash;destination=MyStorageIntegration dir/file
worker cache push [flags] Examples worker cache push {{.cds.workflow}}-{{.cds.version}} ./pathToUpload Options  --destination string optional. Your storage integration name SEE ALSO  worker cache	-  </description>
    </item>
    
    <item>
      <title>PushBuildInfo</title>
      <link>/docs/actions/builtin-pushbuildinfo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/builtin-pushbuildinfo/</guid>
      <description>PushBuildInfo is a builtin action, you can&amp;rsquo;t modify it.
Push build info into an artifact manager, useful only if you have an artifact manager linked to your workflow.
Parameters No Parameter
Requirements No Requirement
YAML example Example of a pipeline using PushBuildInfo action:
version: v1.0 name: Pipeline1 stages: - Stage1 jobs: - job: Job1 stage: Stage1 steps: - pushBuildInfo: &amp;#39;{{.cds.workflow}}&amp;#39; Note Implementation for artifactory can be found on GitHub</description>
    </item>
    
    <item>
      <title>pythonPush</title>
      <link>/docs/actions/pythonpush/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/pythonpush/</guid>
      <description>This pushes python package
Parameters  directory: Directory of the package package: The name of the package password: Password used to push the package  This parameter can be empty when an Artifactory integration is set up.
 url: Python repository url to push on.  This parameter can be empty when an Artifactory integration is set up.
 username: Username used to push the package  This parameter can be empty when an Artifactory integration is set up.</description>
    </item>
    
    <item>
      <title>queue</title>
      <link>/development/rest/queue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/rest/queue/</guid>
      <description>DELETE /queue/workflows/&amp;lt;job-id&amp;gt;/book    URL /queue/workflows/&amp;lt;job-id&amp;gt;/book     Method DELETE   Permissions Auth: true   Scopes RunExecution   Code deleteBookWorkflowJobHandler    GET /queue/workflows/&amp;lt;job-id&amp;gt;/cache/&amp;lt;tag&amp;gt;/links    URL /queue/workflows/&amp;lt;job-id&amp;gt;/cache/&amp;lt;tag&amp;gt;/links     Method GET   Permissions Auth: true   Scopes RunExecution   Code getWorkerCacheLinkHandler    GET /queue/workflows/&amp;lt;job-id&amp;gt;/infos    URL /queue/workflows/&amp;lt;job-id&amp;gt;/infos     Method GET   Permissions Auth: true   Scopes RunExecution   Code getWorkflowJobHandler    GET /queue/workflows/count    URL /queue/workflows/count     Method GET   Permissions Auth: true   Scopes RunExecution   Code countWorkflowJobQueueHandler    GET /queue/workflows    URL /queue/workflows     Method GET   Permissions Auth: true   Scopes RunExecution   Code getWorkflowJobQueueHandler    POST /queue/workflows/&amp;lt;job-id&amp;gt;/book    URL /queue/workflows/&amp;lt;job-id&amp;gt;/book     Method POST   Permissions Auth: true   Scopes RunExecution   Code postBookWorkflowJobHandler    POSTEXECUTE /queue/workflows/&amp;lt;job-id&amp;gt;/result    URL /queue/workflows/&amp;lt;job-id&amp;gt;/result     Method POSTEXECUTE   Permissions Auth: true   Scopes RunExecution   Code postWorkflowJobResultHandler    POSTEXECUTE /queue/workflows/&amp;lt;job-id&amp;gt;/run/results/check    URL /queue/workflows/&amp;lt;job-id&amp;gt;/run/results/check     Method POSTEXECUTE   Permissions Auth: true   Scopes RunExecution   Code workflowRunResultCheckUploadHandler    POSTEXECUTE /queue/workflows/&amp;lt;job-id&amp;gt;/run/results/promote    URL /queue/workflows/&amp;lt;job-id&amp;gt;/run/results/promote     Method POSTEXECUTE   Permissions Auth: true   Scopes RunExecution   Code workflowRunResultPromoteHandler    POSTEXECUTE /queue/workflows/&amp;lt;job-id&amp;gt;/run/results/release    URL /queue/workflows/&amp;lt;job-id&amp;gt;/run/results/release     Method POSTEXECUTE   Permissions Auth: true   Scopes RunExecution   Code workflowRunResultReleaseHandler    POSTEXECUTE /queue/workflows/&amp;lt;job-id&amp;gt;/run/results    URL /queue/workflows/&amp;lt;job-id&amp;gt;/run/results     Method POSTEXECUTE   Permissions Auth: true   Scopes RunExecution   Code postWorkflowRunResultsHandler    POSTEXECUTE /queue/workflows/&amp;lt;job-id&amp;gt;/spawn/infos    URL /queue/workflows/&amp;lt;job-id&amp;gt;/spawn/infos     Method POSTEXECUTE   Permissions Auth: true   Scopes RunExecution   Code postSpawnInfosWorkflowJobHandler    POSTEXECUTE /queue/workflows/&amp;lt;job-id&amp;gt;/step    URL /queue/workflows/&amp;lt;job-id&amp;gt;/step     Method POSTEXECUTE   Permissions Auth: true   Scopes RunExecution   Code postWorkflowJobStepStatusHandler    POSTEXECUTE /queue/workflows/&amp;lt;job-id&amp;gt;/tag    URL /queue/workflows/&amp;lt;job-id&amp;gt;/tag     Method POSTEXECUTE   Permissions Auth: true   Scopes RunExecution   Code postWorkflowJobTagsHandler    POSTEXECUTE /queue/workflows/&amp;lt;job-id&amp;gt;/take    URL /queue/workflows/&amp;lt;job-id&amp;gt;/take     Method POSTEXECUTE   Permissions Auth: true   Scopes RunExecution   Code postTakeWorkflowJobHandler    POSTEXECUTE /queue/workflows/&amp;lt;job-id&amp;gt;/test    URL /queue/workflows/&amp;lt;job-id&amp;gt;/test     Method POSTEXECUTE   Permissions Auth: true   Scopes RunExecution   Code postWorkflowJobTestsResultsHandler    POSTEXECUTE /queue/workflows/&amp;lt;job-id&amp;gt;/version    URL /queue/workflows/&amp;lt;job-id&amp;gt;/version     Method POSTEXECUTE   Permissions Auth: true   Scopes RunExecution   Code postWorkflowJobSetVersionHandler    </description>
    </item>
    
    <item>
      <title>RabbitMQ</title>
      <link>/docs/integrations/rabbitmq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/integrations/rabbitmq/</guid>
      <description>The RabbitMQ Integration is a Self-Service integration that can be configured on a CDS Project.
This integration enables the RabbitMQ Hook feature:
Configure with WebUI You can add a RabbitMQ Integration on your CDS Project.
Configure with cdsctl Import a RabbitMQ Integration on your CDS Project Create a file project-configuration.yml:
name: my-rabbitmq-integration model: name: RabbitMQ identifier: github.com/ovh/cds/integration/builtin/rabbitmq hook: true config: password: value: &amp;#39;**********&amp;#39; type: password uri: value: your-rabbit:5672 type: string username: value: your-username type: string Import the integration on your CDS Project with:</description>
    </item>
    
    <item>
      <title>regen</title>
      <link>/docs/components/cdsctl/consumer/regen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/consumer/regen/</guid>
      <description>cdsctl consumer regen Regenerate an existing auth consumer
Synopsis Regenerate an existing auth consumer
cdsctl consumer regen CONSUMER-ID [USERNAME] [flags] Options  --duration string Validity period of the token generated for the consumer (in days) --overlap string Overlap duration between actual token and the new one. eg: 24h, 30m Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>regen</title>
      <link>/docs/components/cdsctl/experimental/hatchery/regen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/hatchery/regen/</guid>
      <description>cdsctl experimental hatchery regen Regen the hatchery token
Synopsis Regen the hatchery token
cdsctl experimental hatchery regen HATCHERYIDENTIFIER [flags] Examples cdsctl hatchery regen &amp;lt;hatchery_name&amp;gt; Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --format string Output format: plain|json|yaml (default &amp;quot;plain&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>regen</title>
      <link>/docs/components/engine/config/regen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/engine/config/regen/</guid>
      <description>engine config regen Regen tokens and keys for given CDS configuration file
Synopsis $ engine config regen engine config regen [flags] Options  --env Print configuration as environment variable SEE ALSO  engine config	- Manage CDS Configuration  </description>
    </item>
    
    <item>
      <title>Release</title>
      <link>/docs/actions/builtin-release/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/builtin-release/</guid>
      <description>Release is a builtin action, you can&amp;rsquo;t modify it.
This action creates a release on a artifact manager. It promotes artifacts.
Parameters  artifacts: (optional) Set a list of artifacts, separate by &amp;lsquo;,&amp;rsquo;. You can also use regexp. destMaturity: Repository suffix in which the artifact will be moved releaseNote: (optional) Set a release note for the release. setProperties: Properties to add on the released artifacts srcMaturity: Repository suffix from which the artifact will be moved  Requirements No Requirement</description>
    </item>
    
    <item>
      <title>ReleaseVCS</title>
      <link>/docs/actions/builtin-releasevcs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/builtin-releasevcs/</guid>
      <description>ReleaseVCS is a builtin action, you can&amp;rsquo;t modify it.
This action creates a release on the git repository linked to the application, if repository manager implements it.
Parameters  artifacts: (optional) Set a list of artifacts, separate by &amp;lsquo;,&amp;rsquo;. You can also use regexp. releaseNote: (optional) Set a release note for the release. tag: Tag attached to the release. title: Set a title for the release.  Requirements No Requirement</description>
    </item>
    
    <item>
      <title>rename</title>
      <link>/docs/components/cdsctl/admin/users/rename/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/users/rename/</guid>
      <description>cdsctl admin users rename Rename a given user
Synopsis Rename a given user
cdsctl admin users rename USERNAME NEW-USERNAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin users	- Manage CDS users  </description>
    </item>
    
    <item>
      <title>rename</title>
      <link>/docs/components/cdsctl/group/rename/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/group/rename/</guid>
      <description>cdsctl group rename Rename a CDS group
Synopsis Rename a CDS group
cdsctl group rename OLD-GROUP-NAME NEW-GROUP-NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl group	- Manage CDS group  </description>
    </item>
    
    <item>
      <title>request</title>
      <link>/docs/components/cdsctl/admin/services/request/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/services/request/</guid>
      <description>cdsctl admin services request request GET on a CDS service
Synopsis request GET on a CDS service
cdsctl admin services request [flags] Examples  ## How to get the goroutine of the service named hatcheryLocal: ```bash cdsctl admin services request --name hatcheryLocal --query /debug/pprof/goroutine\?debug\=2  ## Options  --name string service name --query string http query, example: &#39;/debug/pprof/goroutine?debug=2&#39;   ## Options inherited from parent commands -c, &amp;ndash;context string cdsctl context name -f, &amp;ndash;file string set configuration file &amp;ndash;insecure (SSL) This option explicitly allows curl to perform &amp;ldquo;insecure&amp;rdquo; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>requirement</title>
      <link>/development/rest/requirement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/rest/requirement/</guid>
      <description>GET /requirement/types/&amp;lt;type&amp;gt;    URL /requirement/types/&amp;lt;type&amp;gt;     Method GET   Permissions Auth: true   Code getRequirementTypeValuesHandler    </description>
    </item>
    
    <item>
      <title>reset</title>
      <link>/docs/components/cdsctl/admin/migration/reset/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/migration/reset/</guid>
      <description>cdsctl admin migration reset Reset a CDS migration, so basically it put the migration status to &amp;quot;TO DO&amp;quot; (USE WITH CAUTION)
Synopsis Reset a CDS migration, so basically it put the migration status to &amp;quot;TO DO&amp;quot; (USE WITH CAUTION)
cdsctl admin migration reset ID Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>restart</title>
      <link>/docs/components/cdsctl/admin/hooks/repository/event/restart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/hooks/repository/event/restart/</guid>
      <description>cdsctl admin hooks repository event restart Restart an event
Synopsis Restart an event
cdsctl admin hooks repository event restart VCS-SERVER REPOSITORY EVENT-ID Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin hooks repository event	- Manage repositories events  </description>
    </item>
    
    <item>
      <title>restart</title>
      <link>/docs/components/cdsctl/experimental/workflow/restart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/workflow/restart/</guid>
      <description>cdsctl experimental workflow restart Restart workflow failed jobs
Synopsis Restart workflow failed jobs
cdsctl experimental workflow restart PROJ_KEY RUN_IDENTIFIER Examples cdsctl workflow restart &amp;lt;proj_key&amp;gt; &amp;lt;run_identifier&amp;gt; Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental workflow	- CDS Experimental workflow commands  </description>
    </item>
    
    <item>
      <title>revoke</title>
      <link>/docs/components/cdsctl/group/revoke/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/group/revoke/</guid>
      <description>cdsctl group revoke Revoke a CDS group in a project or workflow
Synopsis Revoke a CDS group in a project or workflow
cdsctl group revoke [ PROJECT-KEY ] GROUP-NAME [flags] Options  -w, --workflow string Workflow name Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl group	- Manage CDS group  </description>
    </item>
    
    <item>
      <title>Roadmap</title>
      <link>/about/roadmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/about/roadmap/</guid>
      <description>See https://github.com/ovh/cds/blob/master/ROADMAP.md</description>
    </item>
    
    <item>
      <title>roll-encrypted-data</title>
      <link>/docs/components/cdsctl/admin/database/roll-encrypted-data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/database/roll-encrypted-data/</guid>
      <description>cdsctl admin database roll-encrypted-data Roll a encrypted data in database
Synopsis Roll a encrypted data in database
cdsctl admin database roll-encrypted-data SERVICE ENTITY ... [flags] Options  --index string Resume from a specific index (only available for one entity) Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>roll-signed-data</title>
      <link>/docs/components/cdsctl/admin/database/roll-signed-data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/database/roll-signed-data/</guid>
      <description>cdsctl admin database roll-signed-data Roll a signed data in database
Synopsis Roll a signed data in database
cdsctl admin database roll-signed-data SERVICE ENTITY ... [flags] Options  --index string Resume from a specific index (only available for one entity) Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>run</title>
      <link>/docs/components/cdsctl/experimental/workflow/jobs/run/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/workflow/jobs/run/</guid>
      <description>cdsctl experimental workflow jobs run Start a job
Synopsis Start a job
cdsctl experimental workflow jobs run PROJ_KEY RUN_IDENTIFIER JOB_IDENTIFIER [flags] Examples cdsctl workflow run &amp;lt;proj_key&amp;gt; &amp;lt;run_identifier&amp;gt; &amp;lt;job_identifier&amp;gt; Options  --data string (default &amp;quot;{}&amp;quot;) Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental workflow jobs	- CDS Experimental workflow job commands  </description>
    </item>
    
    <item>
      <title>run</title>
      <link>/docs/components/cdsctl/experimental/workflow/run/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/workflow/run/</guid>
      <description>cdsctl experimental workflow run Start a new workflow
Synopsis Start a new workflow
cdsctl experimental workflow run PROJ_KEY VCS_IDENTIFIER REPO_IDENTIFIER WORKFLOW_NAME [flags] Examples cdsctl workflow run &amp;lt;proj_key&amp;gt; &amp;lt;vcs_identifier&amp;gt; &amp;lt;repo_identifier&amp;gt; &amp;lt;workflow_name&amp;gt; Options  --branch string --commit string --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --format string Output format: plain|json|yaml (default &amp;quot;plain&amp;quot;) -q, --quiet Only display object&#39;s key --tag string --verbose Display all object fields --workflow-branch string --workflow-tag string Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>run</title>
      <link>/docs/components/cdsctl/workflow/run/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/workflow/run/</guid>
      <description>cdsctl workflow run Run a CDS workflow
Synopsis Run a CDS workflow
cdsctl workflow run [ PROJECT-KEY WORKFLOW-NAME ] [flags] Options  -d, --data string Run the workflow with payload data -i, --interactive Follow the workflow run in an interactive terminal user interface --node-name string Node Name to launch; Flag run-number is mandatory -o, --open-web-browser Open web browser on the workflow run -p, --parameter strings Run the workflow with pipeline parameter --run-number string Existing Workflow RUN Number -s, --sync Synchronise your pipelines with your last editions.</description>
    </item>
    
    <item>
      <title>run-delete</title>
      <link>/docs/components/cdsctl/workflow/run-delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/workflow/run-delete/</guid>
      <description>cdsctl workflow run-delete Delete a workflow run
Synopsis Delete a workflow run
cdsctl workflow run-delete [ PROJECT-KEY WORKFLOW-NAME ] RUN-NUMBER ... [flags] Options  --force Force delete without confirmation and exit 0 if resource does not exist Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl workflow	- Manage CDS workflow  </description>
    </item>
    
    <item>
      <title>Script</title>
      <link>/docs/actions/builtin-script/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/builtin-script/</guid>
      <description>Script is a builtin action, you can&amp;rsquo;t modify it.
This action executes a given script with a given interpreter.
Parameters  script: Content of your script. You can put #!/bin/bash, or #!/bin/perl at first line. Make sure that the binary used is in the pre-requisites of action.  Requirements No Requirement
YAML example Example of a pipeline using Script action:
version: v1.0 name: Pipeline1 stages: - Stage1 jobs: - job: Job1 stage: Stage1 steps: - script: - &amp;#39;#!</description>
    </item>
    
    <item>
      <title>script</title>
      <link>/docs/actions/script/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/script/</guid>
      <description>This action execute a script
Parameters  content: The script to execute  </description>
    </item>
    
    <item>
      <title>SDK Golang</title>
      <link>/development/sdk/golang/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/sdk/golang/</guid>
      <description>How to use it? You have to initialize a cdsclient:
client := cdsclient.New(cdsclient.Config{ Host: host, }) res, err := client.AuthConsumerSignin(sdk.ConsumerBuiltin, sdk.AuthConsumerSigninRequest{ &amp;#34;token&amp;#34;: &amp;#34;&amp;lt;signin-token-value&amp;gt;&amp;#34;, }) client = cdsclient.New(cdsclient.Config{ Host: host, SessionToken: res.Token, }) and then, you can use it:
// list workers workers, err := client.WorkerList() // list users users, err := client.UserList() // list workflow runs runs, err := client.WorkflowRunList(...) Go on https://godoc.org/github.com/ovh/cds/sdk/cdsclient to see all available funcs.
Example  Create a file main.</description>
    </item>
    
    <item>
      <title>services</title>
      <link>/development/rest/services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/rest/services/</guid>
      <description>GET /services/&amp;lt;type&amp;gt;    URL /services/&amp;lt;type&amp;gt;     Method GET   Permissions Auth: true   Scopes Service   Code getServiceHandler    POST /services/heartbeat    URL /services/heartbeat     Method POST   Permissions Auth: true   Scopes Service   Code postServiceHearbeatHandler    </description>
    </item>
    
    <item>
      <title>set</title>
      <link>/docs/components/cdsctl/workflow/advanced/number/set/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/workflow/advanced/number/set/</guid>
      <description>cdsctl workflow advanced number set Set a Workflow Run Number
Synopsis Set a Workflow Run Number
cdsctl workflow advanced number set [ PROJECT-KEY WORKFLOW-NAME ] NUMBER Examples cdsctl workflow advanced number set MYPROJECT my-workflow 22 Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl workflow advanced number	- Manage Workflow Run Number  </description>
    </item>
    
    <item>
      <title>set-current</title>
      <link>/docs/components/cdsctl/context/set-current/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/context/set-current/</guid>
      <description>cdsctl context set-current Set the current context
Synopsis Set the current context
cdsctl context set-current NAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl context	- Manage cdsctl config file  </description>
    </item>
    
    <item>
      <title>set-organization</title>
      <link>/docs/components/cdsctl/admin/users/set-organization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/users/set-organization/</guid>
      <description>cdsctl admin users set-organization Set organization for given user
Synopsis Set organization for given user
cdsctl admin users set-organization USERNAME ORGANIZATION Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin users	- Manage CDS users  </description>
    </item>
    
    <item>
      <title>set-version</title>
      <link>/docs/components/worker/set-version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/worker/set-version/</guid>
      <description>worker set-version Override {{.cds.version}} value with given string. This value should be unique for the workflow and can&#39;t be changed when set.
Synopsis Override {{.cds.version}} value with given string. This value should be unique for the workflow and can&#39;t be changed when set.
worker set-version SEE ALSO  worker	- CDS Worker  </description>
    </item>
    
    <item>
      <title>shell</title>
      <link>/docs/components/cdsctl/shell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/shell/</guid>
      <description>cdsctl shell cdsctl interactive shell
Synopsis CDS Shell Mode. default commands:
 cd: reset current position. cd : go to an object. Try cd /project/ and tabulation to autocomplete find : find a project / application / workflow. not case sensitive help: display this help ls: display current list, quiet format ll: display current list mode: display current mode. Choose mode with &amp;ldquo;mode vi&amp;rdquo; ou &amp;ldquo;mode emacs&amp;rdquo; open: open CDS WebUI with current context version: same as cdsctl version command  Other commands are available depending on your position.</description>
    </item>
    
    <item>
      <title>show</title>
      <link>/docs/components/cdsctl/action/builtin/show/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/action/builtin/show/</guid>
      <description>cdsctl action builtin show Show a CDS builtin action
Synopsis Show a CDS builtin action
cdsctl action builtin show ACTION-NAME [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --format string Output format: plain|json|yaml (default &amp;quot;plain&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>show</title>
      <link>/docs/components/cdsctl/action/show/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/action/show/</guid>
      <description>cdsctl action show Show a CDS action
Synopsis Show a CDS action
cdsctl action show ACTION-PATH [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --format string Output format: plain|json|yaml (default &amp;quot;plain&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>show</title>
      <link>/docs/components/cdsctl/admin/hooks/repository/event/show/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/hooks/repository/event/show/</guid>
      <description>cdsctl admin hooks repository event show Get event
Synopsis Get event
cdsctl admin hooks repository event show VCS-SERVER REPOSITORY EVENT-ID [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --format string Output format: plain|json|yaml (default &amp;quot;plain&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>show</title>
      <link>/docs/components/cdsctl/admin/integration-model/show/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/integration-model/show/</guid>
      <description>cdsctl admin integration-model show Show details of a CDS Integration model
Synopsis Show details of a CDS Integration model
cdsctl admin integration-model show NAME [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --format string Output format: plain|json|yaml (default &amp;quot;plain&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>show</title>
      <link>/docs/components/cdsctl/application/show/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/application/show/</guid>
      <description>cdsctl application show Show a CDS application
Synopsis Show a CDS application
cdsctl application show [ PROJECT-KEY APPLICATION-NAME ] [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --format string Output format: plain|json|yaml (default &amp;quot;plain&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>show</title>
      <link>/docs/components/cdsctl/application/variable/show/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/application/variable/show/</guid>
      <description>cdsctl application variable show Show a CDS application variable
Synopsis Show a CDS application variable
cdsctl application variable show [ PROJECT-KEY APPLICATION-NAME ] VARIABLE-NAME [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --format string Output format: plain|json|yaml (default &amp;quot;plain&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>show</title>
      <link>/docs/components/cdsctl/environment/variable/show/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/environment/variable/show/</guid>
      <description>cdsctl environment variable show Show a CDS environment variable
Synopsis Show a CDS environment variable
cdsctl environment variable show [ PROJECT-KEY ] ENV-NAME VARIABLE-NAME [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --format string Output format: plain|json|yaml (default &amp;quot;plain&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>show</title>
      <link>/docs/components/cdsctl/experimental/hatchery/show/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/hatchery/show/</guid>
      <description>cdsctl experimental hatchery show Get an hatchery by its identifier
Synopsis Get an hatchery by its identifier
cdsctl experimental hatchery show HATCHERYIDENTIFIER [flags] Examples cdsctl hatchery show &amp;lt;hatchery_identifier&amp;gt; Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --format string Output format: plain|json|yaml (default &amp;quot;plain&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>show</title>
      <link>/docs/components/cdsctl/experimental/organization/show/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/organization/show/</guid>
      <description>cdsctl experimental organization show Get an organization by its identifier
Synopsis Get an organization by its identifier
cdsctl experimental organization show ORGANIZATIONIDENTIFIER [flags] Examples cdsctl organization show &amp;lt;organization_identifier&amp;gt; Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --format string Output format: plain|json|yaml (default &amp;quot;plain&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>show</title>
      <link>/docs/components/cdsctl/experimental/project/analysis/show/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/project/analysis/show/</guid>
      <description>cdsctl experimental project analysis show Get the given analysis
Synopsis Get the given analysis
cdsctl experimental project analysis show [ PROJECT-KEY ] VCS-NAME REPOSITORY-NAME ANALYSIS-ID Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental project analysis	- Manage repository analysis  </description>
    </item>
    
    <item>
      <title>show</title>
      <link>/docs/components/cdsctl/experimental/project/variableset/item/show/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/project/variableset/item/show/</guid>
      <description>cdsctl experimental project variableset item show Get the given variable set item
Synopsis Get the given variable set item
cdsctl experimental project variableset item show [ PROJECT-KEY ] VARIABLESET-NAME ITEM-NAME [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --format string Output format: plain|json|yaml (default &amp;quot;plain&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>show</title>
      <link>/docs/components/cdsctl/experimental/project/variableset/show/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/project/variableset/show/</guid>
      <description>cdsctl experimental project variableset show Get the given variable set
Synopsis Get the given variable set
cdsctl experimental project variableset show [ PROJECT-KEY ] NAME [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --format string Output format: plain|json|yaml (default &amp;quot;plain&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>show</title>
      <link>/docs/components/cdsctl/experimental/rbac/show/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/rbac/show/</guid>
      <description>cdsctl experimental rbac show GET a CDS permission
Synopsis GET a CDS permission
cdsctl experimental rbac show PERMISSIONIDENTIFIER [flags] Examples cdsctl rbac get &amp;lt;permission identifier&amp;gt; Options  --format string Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental rbac	- CDS Experimental rbac commands  </description>
    </item>
    
    <item>
      <title>show</title>
      <link>/docs/components/cdsctl/experimental/region/show/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/region/show/</guid>
      <description>cdsctl experimental region show Get an region by its identifier
Synopsis Get an region by its identifier
cdsctl experimental region show REGIONIDENTIFIER [flags] Examples cdsctl region show &amp;lt;region_identifier&amp;gt; Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --format string Output format: plain|json|yaml (default &amp;quot;plain&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>show</title>
      <link>/docs/components/cdsctl/experimental/workflow/jobs/show/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/workflow/jobs/show/</guid>
      <description>cdsctl experimental workflow jobs show Get the workflow run job status
Synopsis Get the workflow run job status
cdsctl experimental workflow jobs show PROJ_KEY RUN_IDENTIFIER JOB_IDENTIFIER [flags] Examples cdsctl experimental workflow run jobs status &amp;lt;proj_key&amp;gt; &amp;lt;run_identifier&amp;gt; &amp;lt;job_identifier&amp;gt; Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --format string Output format: plain|json|yaml (default &amp;quot;plain&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>show</title>
      <link>/docs/components/cdsctl/group/show/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/group/show/</guid>
      <description>cdsctl group show Show a CDS group
Synopsis Show a CDS group
cdsctl group show GROUP-NAME [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --format string Output format: plain|json|yaml (default &amp;quot;plain&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>show</title>
      <link>/docs/components/cdsctl/project/show/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/project/show/</guid>
      <description>cdsctl project show Show a CDS project
Synopsis Show a CDS project
cdsctl project show [ PROJECT-KEY ] [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --format string Output format: plain|json|yaml (default &amp;quot;plain&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>show</title>
      <link>/docs/components/cdsctl/project/variable/show/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/project/variable/show/</guid>
      <description>cdsctl project variable show Show a CDS project variable
Synopsis Show a CDS project variable
cdsctl project variable show [ PROJECT-KEY ] VARIABLE-NAME [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --format string Output format: plain|json|yaml (default &amp;quot;plain&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>show</title>
      <link>/docs/components/cdsctl/user/gpg/show/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/user/gpg/show/</guid>
      <description>cdsctl user gpg show Show Current CDS user gpg key
Synopsis Show Current CDS user gpg key
cdsctl user gpg show KEYID Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl user gpg	- Manage CDS user gpg keys  </description>
    </item>
    
    <item>
      <title>show</title>
      <link>/docs/components/cdsctl/user/show/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/user/show/</guid>
      <description>cdsctl user show Show CDS user details
Synopsis Show CDS user details
cdsctl user show USERNAME [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --format string Output format: plain|json|yaml (default &amp;quot;plain&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>show</title>
      <link>/docs/components/cdsctl/worker/model/show/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/worker/model/show/</guid>
      <description>cdsctl worker model show Show a Worker Model
Synopsis Show a Worker Model
cdsctl worker model show WORKER-MODEL-PATH [flags] Examples cdsctl worker model show myGroup/myModel Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --format string Output format: plain|json|yaml (default &amp;quot;plain&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>show</title>
      <link>/docs/components/cdsctl/workflow/advanced/number/show/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/workflow/advanced/number/show/</guid>
      <description>cdsctl workflow advanced number show Show a Workflow Run Number
Synopsis Show a Workflow Run Number
cdsctl workflow advanced number show [ PROJECT-KEY WORKFLOW-NAME ] [flags] Examples cdsctl workflow advanced number show MYPROJECT my-workflow Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --format string Output format: plain|json|yaml (default &amp;quot;plain&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>show</title>
      <link>/docs/components/cdsctl/workflow/show/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/workflow/show/</guid>
      <description>cdsctl workflow show Show a CDS workflow
Synopsis Show a CDS workflow
cdsctl workflow show [ PROJECT-KEY WORKFLOW-NAME ] [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --format string Output format: plain|json|yaml (default &amp;quot;plain&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>sql</title>
      <link>/docs/components/engine/download/sql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/engine/download/sql/</guid>
      <description>engine download sql Download sql files from the latest release on GitHub
Synopsis Download sql files from the latest release on GitHub
engine download sql [flags] Examples engine download sql Options  --config string config file --remote-config string (optional) consul configuration store --remote-config-key string (optional) consul configuration store key (default &amp;quot;cds/config.api.toml&amp;quot;) SEE ALSO  engine download	- Download binaries  </description>
    </item>
    
    <item>
      <title>start</title>
      <link>/docs/components/cdsctl/admin/hooks/start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/hooks/start/</guid>
      <description>cdsctl admin hooks start Start a task
Synopsis Start a task
cdsctl admin hooks start UUID Examples cdsctl admin hooks start 5178ce1f-2f76-45c5-a203-58c10c3e2c73 Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin hooks	- Manage CDS Hooks tasks  </description>
    </item>
    
    <item>
      <title>start</title>
      <link>/docs/components/engine/start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/engine/start/</guid>
      <description>engine start Start CDS
Synopsis Start CDS Engine Services
API This is the core component of CDS.
Hatcheries They are the components responsible for spawning workers. Supported integrations/orchestrators are:
 Local machine Openstack Docker Swarm Openstack Vsphere  Hooks This component operates CDS workflow hooks
Repositories This component operates CDS workflow repositories
VCS This component operates CDS VCS connectivity
CDN This component operates CDS CDN to handle storage
Start all of this with a single command:</description>
    </item>
    
    <item>
      <title>startall</title>
      <link>/docs/components/cdsctl/admin/hooks/startall/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/hooks/startall/</guid>
      <description>cdsctl admin hooks startall Start all tasks
Synopsis Start all tasks
cdsctl admin hooks startall Examples cdsctl admin hooks startall Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin hooks	- Manage CDS Hooks tasks  </description>
    </item>
    
    <item>
      <title>static-file</title>
      <link>/docs/components/worker/run-result/add/static-file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/worker/run-result/add/static-file/</guid>
      <description>worker run-result add static-file worker run-result add static-file &amp;lt;name&amp;gt; &amp;lt;remote_url&amp;gt;
Synopsis Inside a job, add a run result of type static-file: Worker Command:
worker run-result add static-file &amp;lt;name&amp;gt; &amp;lt;remote_url&amp;gt;  Example:
worker run-result add static-file the-title https://the-remote-url/somewhere/index.html  worker run-result add static-file SEE ALSO  worker run-result add	- worker run-result add  </description>
    </item>
    
    <item>
      <title>status</title>
      <link>/docs/components/cdsctl/admin/cdn/cache/status/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/cdn/cache/status/</guid>
      <description>cdsctl admin cdn cache status display the status of the cache log
Synopsis display the status of the cache log
cdsctl admin cdn cache status [flags] Examples cdsctl admin cdn cache status Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>status</title>
      <link>/docs/components/cdsctl/admin/cdn/status/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/cdn/status/</guid>
      <description>cdsctl admin cdn status display the status of cdn
Synopsis display the status of cdn
cdsctl admin cdn status [flags] Examples cdsctl admin cdn status Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>status</title>
      <link>/docs/components/cdsctl/admin/repositories/status/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/repositories/status/</guid>
      <description>cdsctl admin repositories status display the status of repositories
Synopsis display the status of repositories
cdsctl admin repositories status [flags] Examples cdsctl admin repositories status Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>status</title>
      <link>/docs/components/cdsctl/admin/services/status/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/services/status/</guid>
      <description>cdsctl admin services status Status CDS services
Synopsis Status CDS services
cdsctl admin services status [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) --name string Filter service by name -q, --quiet Only display object&#39;s key -t, --type string Filter service by type: api, hatchery, hook, repository, vcs --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>status</title>
      <link>/docs/components/cdsctl/experimental/workflow/jobs/status/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/workflow/jobs/status/</guid>
      <description>cdsctl experimental workflow jobs status Get the workflow run jobs status
Synopsis Get the workflow run jobs status
cdsctl experimental workflow jobs status PROJ_KEY RUN_IDENTIFIER [flags] Examples cdsctl experimental workflow run jobs status &amp;lt;proj_key&amp;gt; &amp;lt;run_identifier&amp;gt; Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>status</title>
      <link>/docs/components/cdsctl/experimental/workflow/status/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/workflow/status/</guid>
      <description>cdsctl experimental workflow status Get the workflow run status
Synopsis Get the workflow run status
cdsctl experimental workflow status PROJ_KEY RUN_IDENTIFIER [flags] Examples cdsctl experimental workflow status &amp;lt;proj_key&amp;gt; &amp;lt;run_identifier&amp;gt; Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --format string Output format: plain|json|yaml (default &amp;quot;plain&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>status</title>
      <link>/docs/components/cdsctl/health/status/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/health/status/</guid>
      <description>cdsctl health status Show CDS Status
Synopsis Show CDS Status
cdsctl health status [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>status</title>
      <link>/docs/components/cdsctl/workflow/status/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/workflow/status/</guid>
      <description>cdsctl workflow status Check the status of the run
Synopsis Check the status of the run
cdsctl workflow status [ PROJECT-KEY WORKFLOW-NAME ] [RUN-NUMBER] [flags] Options  --commit string Specify the git commit of the run you want --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --format string Output format: plain|json|yaml (default &amp;quot;plain&amp;quot;) -q, --quiet Only display object&#39;s key --track Wait the workflow to be over --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>status</title>
      <link>/docs/components/engine/database/status/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/engine/database/status/</guid>
      <description>engine database status Show current migration status
Synopsis Show current migration status
engine database status [flags] Options  --db-connect-timeout int Maximum wait for connection, in seconds (default 10) --db-host string DB Host (default &amp;quot;localhost&amp;quot;) --db-maxconn int DB Max connection (default 20) --db-name string DB Name (default &amp;quot;cds&amp;quot;) --db-password string DB Password --db-port int DB Port (default 5432) --db-role string DB Role --db-schema string DB Schema (default &amp;quot;public&amp;quot;) --db-sslmode string DB SSL Mode: require (default), verify-full, or disable (default &amp;quot;require&amp;quot;) --db-timeout int Statement timeout value in milliseconds (default 3000) --db-user string DB User (default &amp;quot;cds&amp;quot;) --migrate-dir string CDS SQL Migration directory (default &amp;quot;.</description>
    </item>
    
    <item>
      <title>stop</title>
      <link>/docs/components/cdsctl/admin/hooks/stop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/hooks/stop/</guid>
      <description>cdsctl admin hooks stop Stop a task
Synopsis Stop a task
cdsctl admin hooks stop UUID Examples cdsctl admin hooks stop 5178ce1f-2f76-45c5-a203-58c10c3e2c73 Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin hooks	- Manage CDS Hooks tasks  </description>
    </item>
    
    <item>
      <title>stop</title>
      <link>/docs/components/cdsctl/experimental/workflow/jobs/stop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/workflow/jobs/stop/</guid>
      <description>cdsctl experimental workflow jobs stop Stop the workflow run job
Synopsis Stop the workflow run job
cdsctl experimental workflow jobs stop PROJ_KEY RUN_IDENTIFIER JOB_IDENTIFIER Examples cdsctl experimental workflow job stop &amp;lt;proj_key&amp;gt; &amp;lt;run_identifier&amp;gt; &amp;lt;job_identifier&amp;gt; Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental workflow jobs	- CDS Experimental workflow job commands  </description>
    </item>
    
    <item>
      <title>stop</title>
      <link>/docs/components/cdsctl/experimental/workflow/stop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/workflow/stop/</guid>
      <description>cdsctl experimental workflow stop Stop the workflow run
Synopsis Stop the workflow run
cdsctl experimental workflow stop PROJ_KEY RUN_IDENTIFIER Examples cdsctl experimental workflow stop &amp;lt;proj_key&amp;gt; &amp;lt;run_identifier&amp;gt; Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl experimental workflow	- CDS Experimental workflow commands  </description>
    </item>
    
    <item>
      <title>stop</title>
      <link>/docs/components/cdsctl/workflow/stop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/workflow/stop/</guid>
      <description>cdsctl workflow stop Stop a CDS workflow or a specific node name
Synopsis Stop a CDS workflow or a specific node name
cdsctl workflow stop [ PROJECT-KEY WORKFLOW-NAME ] [RUN-NUMBER] [NODE-NAME] Examples cdsctl workflow stop # Stop the workflow run for the current repo and the current hash cdsctl workflow stop MYPROJECT myworkflow 5 # To stop a workflow run on number 5 cdsctl workflow stop MYPROJECT myworkflow 5 compile # To stop a workflow node run on workflow run 5 Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>stopall</title>
      <link>/docs/components/cdsctl/admin/hooks/stopall/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/hooks/stopall/</guid>
      <description>cdsctl admin hooks stopall Stop all tasks
Synopsis Stop all tasks
cdsctl admin hooks stopall Examples cdsctl admin hooks stopall Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin hooks	- Manage CDS Hooks tasks  </description>
    </item>
    
    <item>
      <title>stopall</title>
      <link>/docs/components/cdsctl/queue/stopall/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/queue/stopall/</guid>
      <description>cdsctl queue stopall Stop all job from the queue
Synopsis Stop all job from the queue
cdsctl queue stopall [PROJECT-KEY] [WORKFLOW-NAME] [flags] Examples cdsctl queue stopall Options  --force if true, do not ask user before stopping all workflows Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>stream</title>
      <link>/docs/components/cdsctl/workflow/logs/stream/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/workflow/logs/stream/</guid>
      <description>cdsctl workflow logs stream Stream logs for a job.
Synopsis Stream logs for a job.
cdsctl workflow logs stream [ PROJECT-KEY WORKFLOW-NAME ] [RUN-NUMBER] Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl workflow logs	- Manage CDS Workflow Run Logs  </description>
    </item>
    
    <item>
      <title>suggest</title>
      <link>/development/rest/suggest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/rest/suggest/</guid>
      <description>GET /suggest/variable/&amp;lt;project-key&amp;gt;    URL /suggest/variable/&amp;lt;project-key&amp;gt;     Method GET   Permissions Auth: true   Scopes Project   Code getVariablesHandler    </description>
    </item>
    
    <item>
      <title>sync-buffer</title>
      <link>/docs/components/cdsctl/admin/cdn/sync-buffer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/cdn/sync-buffer/</guid>
      <description>cdsctl admin cdn sync-buffer run synchronization of cdn buffer
Synopsis run synchronization of cdn buffer
cdsctl admin cdn sync-buffer Examples cdsctl admin cdn sync-buffer Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin cdn	- Manage CDS CDN uService  </description>
    </item>
    
    <item>
      <title>tag</title>
      <link>/docs/components/worker/tag/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/worker/tag/</guid>
      <description>worker tag worker tag key=value key=value
Synopsis On the workflow view, the sidebar on the left displays a select box to filter on CDS Tags.
So, what&amp;rsquo;s a tag? A tag is a CDS Variable, exported as a tag. There are default tags as git.branch, git.hash, tiggered_by and environment.
Inside a job, you can add a Tag with the worker command:
# worker tag &amp;lt;key&amp;gt;=&amp;lt;value&amp;gt; &amp;lt;key&amp;gt;=&amp;lt;value&amp;gt; worker tag tagKey=tagValue anotherTagKey=anotherTagValue  Tags are useful to add indication on the sidebar about the context of a Run.</description>
    </item>
    
    <item>
      <title>template</title>
      <link>/development/rest/template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/rest/template/</guid>
      <description>DELETE /template/&amp;lt;group-name&amp;gt;/&amp;lt;template-slug&amp;gt;/instance/&amp;lt;instance-id&amp;gt;    URL /template/&amp;lt;group-name&amp;gt;/&amp;lt;template-slug&amp;gt;/instance/&amp;lt;instance-id&amp;gt;     Method DELETE   Permissions Auth: true   Scopes Template   Code deleteTemplateInstanceHandler    DELETE /template/&amp;lt;group-name&amp;gt;/&amp;lt;template-slug&amp;gt;    URL /template/&amp;lt;group-name&amp;gt;/&amp;lt;template-slug&amp;gt;     Method DELETE   Permissions Auth: true   Scopes Template   Code deleteTemplateHandler    GET /template/&amp;lt;group-name&amp;gt;/&amp;lt;template-slug&amp;gt;/audit    URL /template/&amp;lt;group-name&amp;gt;/&amp;lt;template-slug&amp;gt;/audit     Method GET   Permissions Auth: true   Scopes Template   Code getTemplateAuditsHandler    GET /template/&amp;lt;group-name&amp;gt;/&amp;lt;template-slug&amp;gt;/bulk/&amp;lt;bulk-id&amp;gt;    URL /template/&amp;lt;group-name&amp;gt;/&amp;lt;template-slug&amp;gt;/bulk/&amp;lt;bulk-id&amp;gt;     Method GET   Permissions Auth: true   Scopes Template   Code getTemplateBulkHandler    GET /template/&amp;lt;group-name&amp;gt;/&amp;lt;template-slug&amp;gt;/instance    URL /template/&amp;lt;group-name&amp;gt;/&amp;lt;template-slug&amp;gt;/instance     Method GET   Permissions Auth: true   Scopes Template   Code getTemplateInstancesHandler    GET /template/&amp;lt;group-name&amp;gt;/&amp;lt;template-slug&amp;gt;/usage    URL /template/&amp;lt;group-name&amp;gt;/&amp;lt;template-slug&amp;gt;/usage     Method GET   Permissions Auth: true   Scopes Template   Code getTemplateUsageHandler    GET /template/&amp;lt;group-name&amp;gt;/&amp;lt;template-slug&amp;gt;    URL /template/&amp;lt;group-name&amp;gt;/&amp;lt;template-slug&amp;gt;     Method GET   Permissions Auth: true   Scopes Template   Code getTemplateHandler    GET /template    URL /template     Method GET   Permissions Auth: true   Scopes Template   Code getTemplatesHandler    POST /template/&amp;lt;group-name&amp;gt;/&amp;lt;template-slug&amp;gt;/apply    URL /template/&amp;lt;group-name&amp;gt;/&amp;lt;template-slug&amp;gt;/apply     Method POST   Permissions Auth: true   Scopes Template   Code postTemplateApplyHandler    POST /template/&amp;lt;group-name&amp;gt;/&amp;lt;template-slug&amp;gt;/bulk    URL /template/&amp;lt;group-name&amp;gt;/&amp;lt;template-slug&amp;gt;/bulk     Method POST   Permissions Auth: true   Scopes Template   Code postTemplateBulkHandler    POST /template/&amp;lt;group-name&amp;gt;/&amp;lt;template-slug&amp;gt;/pull    URL /template/&amp;lt;group-name&amp;gt;/&amp;lt;template-slug&amp;gt;/pull     Method POST   Permissions Auth: true   Scopes Template   Code postTemplatePullHandler    POST /template/push    URL /template/push     Method POST   Permissions Auth: true   Scopes Template   Code postTemplatePushHandler    POST /template    URL /template     Method POST   Permissions Auth: true   Scopes Template   Code postTemplateHandler    PUT /template/&amp;lt;group-name&amp;gt;/&amp;lt;template-slug&amp;gt;    URL /template/&amp;lt;group-name&amp;gt;/&amp;lt;template-slug&amp;gt;     Method PUT   Permissions Auth: true   Scopes Template   Code putTemplateHandler    </description>
    </item>
    
    <item>
      <title>tmpl</title>
      <link>/docs/components/worker/tmpl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/worker/tmpl/</guid>
      <description>worker tmpl worker tmpl inputFile outputFile
Synopsis Inside a step script (https://ovh.github.io/cds/docs/actions/builtin-script/), you can add a replace CDS variables with the real value into a file:
# create a file cat &amp;lt;&amp;lt; EOF &amp;gt; myFile this a a line in the file, with a CDS variable {{.cds.version}} EOF # worker tmpl &amp;lt;input file&amp;gt; &amp;lt;output file&amp;gt; worker tmpl {{.cds.workspace}}/myFile {{.cds.workspace}}/outputFile  The file outputFile will contain the string:
this a a line in the file, with a CDS variable 2  if it&amp;rsquo;s the RUN n°2 of the current workflow.</description>
    </item>
    
    <item>
      <title>trigger</title>
      <link>/docs/components/cdsctl/experimental/project/analysis/trigger/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/project/analysis/trigger/</guid>
      <description>cdsctl experimental project analysis trigger Trigger an analysis on the given branch
Synopsis Trigger an analysis on the given branch
cdsctl experimental project analysis trigger [ PROJECT-KEY ] VCS-NAME REPOSITORY-NAME [flags] Options  --branch string --commit string --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --format string Output format: plain|json|yaml (default &amp;quot;plain&amp;quot;) -q, --quiet Only display object&#39;s key --tag string --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>ui</title>
      <link>/development/rest/ui/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/rest/ui/</guid>
      <description>GET /ui/navbar    URL /ui/navbar     Method GET   Permissions Auth: true   Scopes User   Code getNavbarHandler    GET /ui/project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/overview    URL /ui/project/&amp;lt;project-key&amp;gt;/application/&amp;lt;application-name&amp;gt;/overview     Method GET   Permissions Auth: true   Scopes Project   Code getApplicationOverviewHandler    </description>
    </item>
    
    <item>
      <title>ui</title>
      <link>/docs/components/engine/download/ui/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/engine/download/ui/</guid>
      <description>engine download ui Download ui files from the latest release on GitHub
Synopsis Download ui files from the latest release on GitHub
engine download ui [flags] Examples engine download ui Options  --config string config file --remote-config string (optional) consul configuration store --remote-config-key string (optional) consul configuration store key (default &amp;quot;cds/config.api.toml&amp;quot;) SEE ALSO  engine download	- Download binaries  </description>
    </item>
    
    <item>
      <title>unlock</title>
      <link>/docs/components/cdsctl/admin/database/unlock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/database/unlock/</guid>
      <description>cdsctl admin database unlock Unlock a pending migration (Use with caution)
Synopsis Unlock a pending migration (Use with caution)
cdsctl admin database unlock SERVICE ID Examples  $ cdsctl admin database unlock api id-to-unlock $ cdsctl admin database unlock cdn id-to-unlock Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>update</title>
      <link>/docs/components/cdsctl/application/variable/update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/application/variable/update/</guid>
      <description>cdsctl application variable update Update CDS application variable value
Synopsis Update CDS application variable value
cdsctl application variable update [ PROJECT-KEY APPLICATION-NAME ] VARIABLE-OLDNAME VARIABLE-NAME VARIABLE-TYPE VARIABLE-VALUE Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl application variable	- Manage CDS application variables  </description>
    </item>
    
    <item>
      <title>update</title>
      <link>/docs/components/cdsctl/environment/variable/update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/environment/variable/update/</guid>
      <description>cdsctl environment variable update Update CDS environment variable value
Synopsis Update CDS environment variable value
cdsctl environment variable update [ PROJECT-KEY ] ENV-NAME VARIABLE-OLDNAME VARIABLE-NAME VARIABLE-TYPE VARIABLE-VALUE Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl environment variable	- Manage CDS environment variables  </description>
    </item>
    
    <item>
      <title>update</title>
      <link>/docs/components/cdsctl/experimental/project/variableset/item/update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/experimental/project/variableset/item/update/</guid>
      <description>cdsctl experimental project variableset item update Update an item inside a variable set
Synopsis Update an item inside a variable set
cdsctl experimental project variableset item update [ PROJECT-KEY ] VARIABLESET-NAME ITEM-NAME ITEM-VALUE Examples cdsctl exp project variableset item update MY-PROJECT MY-VARIABLESET-NAME ITEM-NAME ITEM-VALUE Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>update</title>
      <link>/docs/components/cdsctl/project/variable/update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/project/variable/update/</guid>
      <description>cdsctl project variable update Update CDS project variable value
Synopsis Update CDS project variable value
cdsctl project variable update [ PROJECT-KEY ] VARIABLE-OLDNAME VARIABLE-NAME VARIABLE-TYPE [VARIABLE-VALUE] [flags] Options  --stdin read the variable value from stdin Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl project variable	- Manage CDS project variables  </description>
    </item>
    
    <item>
      <title>update</title>
      <link>/docs/components/cdsctl/update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/update/</guid>
      <description>cdsctl update Update cdsctl from CDS API or from CDS Release
Synopsis Update cdsctl from CDS API or from CDS Release
cdsctl update [flags] Options  --from-github Update binary from latest github release Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl	- CDS Command line utility  </description>
    </item>
    
    <item>
      <title>update</title>
      <link>/docs/components/engine/update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/engine/update/</guid>
      <description>engine update Update engine binary
Synopsis Update engine binary
engine update [flags] Examples engine update --from-github Options  --api string Update binary from a CDS Engine API --from-github Update binary from latest github release SEE ALSO  engine	- CDS Engine  </description>
    </item>
    
    <item>
      <title>upgrade</title>
      <link>/docs/components/engine/database/upgrade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/engine/database/upgrade/</guid>
      <description>engine database upgrade Upgrade schema
Synopsis Migrates the database to the most recent version available.
engine database upgrade [flags] Examples engine database upgrade --db-password=your-password --db-sslmode=disable --db-name=cds --db-schema=public --migrate-dir=./sql/api # If the directory --migrate-dir is not up to date with the current version, this # directory will be automatically updated with the release from https://github.com/ovh/cds/releases Options  --db-connect-timeout int Maximum wait for connection, in seconds (default 10) --db-host string DB Host (default &amp;quot;localhost&amp;quot;) --db-maxconn int DB Max connection (default 20) --db-name string DB Name (default &amp;quot;cds&amp;quot;) --db-password string DB Password --db-port int DB Port (default 5432) --db-role string DB Role --db-schema string DB Schema (default &amp;quot;public&amp;quot;) --db-sslmode string DB SSL Mode: require (default), verify-full, or disable (default &amp;quot;require&amp;quot;) --db-timeout int Statement timeout value in milliseconds (default 3000) --db-user string DB User (default &amp;quot;cds&amp;quot;) --dry-run Dry run upgrade --limit int Max number of migrations to apply (0 = unlimited) --migrate-dir string CDS SQL Migration directory (default &amp;quot;.</description>
    </item>
    
    <item>
      <title>upload</title>
      <link>/docs/components/worker/upload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/worker/upload/</guid>
      <description>worker upload worker upload {{.cds.workspace}}/fileToUpload
Synopsis Inside a job, there are two ways to upload an artifact:
 with a step using action Upload Artifacts with a step script (https://ovh.github.io/cds/docs/actions/builtin-script/), using the worker command: worker upload &amp;lt;path&amp;gt;  worker upload --tag={{.cds.version}} {{.cds.workspace}}/files*.yml
You can use you storage integration: worker upload &amp;ndash;destination=&amp;ldquo;yourStorageIntegrationName&amp;rdquo;
worker upload [flags] Options  --destination string optional. Your storage integration name --tag string Tag for artifact Upload - Tag is mandatory SEE ALSO  worker	- CDS Worker  </description>
    </item>
    
    <item>
      <title>uploadArtifact</title>
      <link>/docs/actions/uploadartifact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/actions/uploadartifact/</guid>
      <description>This uploads artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete.
Parameters   if-no-files-found: The desired behavior if no files are found using the provided path. Available Options: warn: Output a warning but do not fail the action error: Fail the action with an error message ignore: Do not output any warnings or errors, the action does not fail</description>
    </item>
    
    <item>
      <title>uptodate</title>
      <link>/docs/components/engine/uptodate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/engine/uptodate/</guid>
      <description>engine uptodate check if engine is uptodate
Synopsis check if engine is uptodate with latest release on github (&amp;ndash;from-github) or from an existing API.
This command exit 0 if current binary is uptodate.
engine uptodate [flags] Examples engine uptodate --from-github Options  --api string Update binary from a CDS Engine API --from-github Update binary from latest github release SEE ALSO  engine	- CDS Engine  </description>
    </item>
    
    <item>
      <title>usage</title>
      <link>/docs/components/cdsctl/action/usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/action/usage/</guid>
      <description>cdsctl action usage CDS action usage
Synopsis CDS action usage
cdsctl action usage ACTION-PATH [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>usage</title>
      <link>/docs/components/cdsctl/application/usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/application/usage/</guid>
      <description>cdsctl application usage CDS application usage
Synopsis PATH: Path or URL of application
cdsctl application usage [ PROJECT-KEY APPLICATION-NAME ] [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>usage</title>
      <link>/docs/components/cdsctl/pipeline/usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/pipeline/usage/</guid>
      <description>cdsctl pipeline usage CDS pipeline usage
Synopsis PATH: Path or URL of pipeline
cdsctl pipeline usage [ PROJECT-KEY ] PIPELINE-NAME [flags] Options  --fields string Only display specified object fields. &#39;empty&#39; will display all fields, &#39;all&#39; will display all object fields, &#39;field1,field2&#39; to select multiple fields --filter string Filter output based on conditions provided --format string Output format: table|json|yaml (default &amp;quot;table&amp;quot;) -q, --quiet Only display object&#39;s key --verbose Display all object fields Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>user</title>
      <link>/development/rest/user/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/rest/user/</guid>
      <description>DELETE /user/&amp;lt;username&amp;gt;/auth/consumer/&amp;lt;consumer-id&amp;gt;    URL /user/&amp;lt;username&amp;gt;/auth/consumer/&amp;lt;consumer-id&amp;gt;     Method DELETE   Permissions Auth: true   Scopes AccessToken   Code deleteConsumerByUserHandler    DELETE /user/&amp;lt;username&amp;gt;/auth/session/&amp;lt;session-id&amp;gt;    URL /user/&amp;lt;username&amp;gt;/auth/session/&amp;lt;session-id&amp;gt;     Method DELETE   Permissions Auth: true   Scopes AccessToken   Code deleteSessionByUserHandler    DELETE /user/&amp;lt;username&amp;gt;    URL /user/&amp;lt;username&amp;gt;     Method DELETE   Permissions Auth: true   Scopes User   Code deleteUserHandler    GET /user/&amp;lt;username&amp;gt;/auth/consumer    URL /user/&amp;lt;username&amp;gt;/auth/consumer     Method GET   Permissions Auth: true   Scopes AccessToken   Code getConsumersByUserHandler    GET /user/&amp;lt;username&amp;gt;/auth/session    URL /user/&amp;lt;username&amp;gt;/auth/session     Method GET   Permissions Auth: true   Scopes AccessToken   Code getSessionsByUserHandler    GET /user/&amp;lt;username&amp;gt;/contact    URL /user/&amp;lt;username&amp;gt;/contact     Method GET   Permissions Auth: true   Scopes User   Code getUserContactsHandler    GET /user/&amp;lt;username&amp;gt;/group    URL /user/&amp;lt;username&amp;gt;/group     Method GET   Permissions Auth: true   Scopes User   Code getUserGroupsHandler    GET /user/&amp;lt;username&amp;gt;/link    URL /user/&amp;lt;username&amp;gt;/link     Method GET   Permissions Auth: true   Scopes User   Code getUserLinksHandler    GET /user/&amp;lt;username&amp;gt;    URL /user/&amp;lt;username&amp;gt;     Method GET   Permissions Auth: true   Scopes User   Code getUserHandler    GET /user/schema    URL /user/schema     Method GET   Permissions Auth: true   Scopes User   Code getUserJSONSchema    GET /user/timeline/filter    URL /user/timeline/filter     Method GET   Permissions Auth: true   Scopes User   Code getTimelineFilterHandler    GET /user/timeline    URL /user/timeline     Method GET   Permissions Auth: true   Scopes User   Code getTimelineHandler    GET /user    URL /user     Method GET   Permissions Auth: true   Scopes User   Code getUsersHandler    POST /user/&amp;lt;username&amp;gt;/auth/consumer/&amp;lt;consumer-id&amp;gt;/regen    URL /user/&amp;lt;username&amp;gt;/auth/consumer/&amp;lt;consumer-id&amp;gt;/regen     Method POST   Permissions Auth: true   Scopes AccessToken   Code postConsumerRegenByUserHandler    POST /user/&amp;lt;username&amp;gt;/auth/consumer    URL /user/&amp;lt;username&amp;gt;/auth/consumer     Method POST   Permissions Auth: true   Scopes AccessToken   Code postConsumerByUserHandler    POST /user/favorite    URL /user/favorite     Method POST   Permissions Auth: true   Scopes User   Code postUserFavoriteHandler    POST /user/timeline/filter    URL /user/timeline/filter     Method POST   Permissions Auth: true   Scopes User   Code postTimelineFilterHandler    PUT /user/&amp;lt;username&amp;gt;    URL /user/&amp;lt;username&amp;gt;     Method PUT   Permissions Auth: true   Scopes User   Code putUserHandler    </description>
    </item>
    
    <item>
      <title>user-migrate</title>
      <link>/docs/components/cdsctl/admin/organization/user-migrate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/admin/organization/user-migrate/</guid>
      <description>cdsctl admin organization user-migrate Associate an organization to all empty without it
Synopsis Associate an organization to all empty without it
cdsctl admin organization user-migrate ORGANIZATION-NAME Examples cdsctl admin organization user-migrate &amp;lt;organization-name&amp;gt; Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl admin organization	- Manage CDS Organization  </description>
    </item>
    
    <item>
      <title>variable</title>
      <link>/development/rest/variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/rest/variable/</guid>
      <description>GET /variable/type    URL /variable/type     Method GET   Permissions Auth: true   Code getVariableTypeHandler    </description>
    </item>
    
    <item>
      <title>verify</title>
      <link>/docs/components/cdsctl/signup/verify/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/signup/verify/</guid>
      <description>cdsctl signup verify Verify local CDS signup.
Synopsis For admin signup INIT_TOKEN environment variable must be set.
cdsctl signup verify TOKEN [flags] Options  -H, --api-url string Url to your CDS api. --env Display the commands to set up the environment for the cds client. Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>version</title>
      <link>/docs/components/cdsctl/version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/version/</guid>
      <description>cdsctl version show cdsctl version
Synopsis show cdsctl version
cdsctl version [flags] Options  --format string Specify out format (json or yaml) Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl	- CDS Command line utility  </description>
    </item>
    
    <item>
      <title>version</title>
      <link>/docs/components/engine/version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/engine/version/</guid>
      <description>engine version Display CDS version
Synopsis Display CDS version
engine version SEE ALSO  engine	- CDS Engine  </description>
    </item>
    
    <item>
      <title>version</title>
      <link>/docs/components/worker/version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/worker/version/</guid>
      <description>worker version Print the version of the worker binary
Synopsis Print the version of the worker binary
worker version SEE ALSO  worker	- CDS Worker  </description>
    </item>
    
    <item>
      <title>vSphere</title>
      <link>/docs/integrations/vsphere/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/integrations/vsphere/</guid>
      <description>CDS build using VMware vSphere infrastructure to spawn each CDS Workers inside dedicated VM.
Pre-requisites This hatchery spawns VM which obtains IP from DHCP. So first you have to create a DHCP server on your host with NAT if you want to access to the internet. In order to create you have multiple possibilities like create your own VM with a DHCP server configured or if you are comfortable with the VMware tools you can use the NSX system.</description>
    </item>
    
    <item>
      <title>worker</title>
      <link>/development/rest/worker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/rest/worker/</guid>
      <description>DELETE /worker/model/&amp;lt;group-name&amp;gt;/&amp;lt;model-name&amp;gt;    URL /worker/model/&amp;lt;group-name&amp;gt;/&amp;lt;model-name&amp;gt;     Method DELETE   Permissions Auth: true   Scopes WorkerModel   Code deleteWorkerModelHandler    GET /worker/&amp;lt;name&amp;gt;    URL /worker/&amp;lt;name&amp;gt;     Method GET   Permissions Auth: true   Scopes Service   Code getWorkerHandler    GET /worker/model/&amp;lt;group-name&amp;gt;/&amp;lt;model-name&amp;gt;/export    URL /worker/model/&amp;lt;group-name&amp;gt;/&amp;lt;model-name&amp;gt;/export     Method GET   Permissions Auth: true   Scopes WorkerModel   Code getWorkerModelExportHandler    GET /worker/model/&amp;lt;group-name&amp;gt;/&amp;lt;model-name&amp;gt;/secret    URL /worker/model/&amp;lt;group-name&amp;gt;/&amp;lt;model-name&amp;gt;/secret     Method GET   Permissions Auth: true   Scopes WorkerModel   Code getWorkerModelSecretHandler    GET /worker/model/&amp;lt;group-name&amp;gt;/&amp;lt;model-name&amp;gt;/usage    URL /worker/model/&amp;lt;group-name&amp;gt;/&amp;lt;model-name&amp;gt;/usage     Method GET   Permissions Auth: true   Scopes WorkerModel   Code getWorkerModelUsageHandler    GET /worker/model/&amp;lt;group-name&amp;gt;/&amp;lt;model-name&amp;gt;    URL /worker/model/&amp;lt;group-name&amp;gt;/&amp;lt;model-name&amp;gt;     Method GET   Permissions Auth: true   Scopes WorkerModel   Code getWorkerModelHandler    GET /worker/model/capability/type    URL /worker/model/capability/type     Method GET   Permissions Auth: true   Scopes WorkerModel   Code getRequirementTypesHandler    GET /worker/model/enabled    URL /worker/model/enabled     Method GET   Permissions Auth: true   Scopes WorkerModel   Code getWorkerModelsEnabledHandler    GET /worker/model/pattern/&amp;lt;type&amp;gt;/&amp;lt;name&amp;gt;    URL /worker/model/pattern/&amp;lt;type&amp;gt;/&amp;lt;name&amp;gt;     Method GET   Permissions Auth: true   Scopes WorkerModel   Code getWorkerModelPatternHandler    GET /worker/model/pattern    URL /worker/model/pattern     Method GET   Permissions Auth: true   Scopes WorkerModel   Code getWorkerModelPatternsHandler    GET /worker/model/type    URL /worker/model/type     Method GET   Permissions Auth: true   Scopes WorkerModel   Code getWorkerModelTypesHandler    GET /worker/model    URL /worker/model     Method GET   Permissions Auth: true   Code getWorkerModelsHandler    GET /worker    URL /worker     Method GET   Permissions Auth: true   Scopes Hatchery   Code getWorkersHandler    POST /worker/&amp;lt;id&amp;gt;/disable    URL /worker/&amp;lt;id&amp;gt;/disable     Method POST   Permissions Auth: true   Scopes Hatchery   Code disableWorkerHandler    POST /worker/model    URL /worker/model     Method POST   Permissions Auth: true   Code postWorkerModelHandler    POST /worker/refresh    URL /worker/refresh     Method POST   Permissions Auth: true   Code postRefreshWorkerHandler    POST /worker/waiting    URL /worker/waiting     Method POST   Permissions Auth: true   Code workerWaitingHandler    PUT /worker/model/&amp;lt;group-name&amp;gt;/&amp;lt;model-name&amp;gt;/book    URL /worker/model/&amp;lt;group-name&amp;gt;/&amp;lt;model-name&amp;gt;/book     Method PUT   Permissions Auth: true   Scopes WorkerModel   Code putBookWorkerModelHandler    PUT /worker/model/&amp;lt;group-name&amp;gt;/&amp;lt;model-name&amp;gt;/error    URL /worker/model/&amp;lt;group-name&amp;gt;/&amp;lt;model-name&amp;gt;/error     Method PUT   Permissions Auth: true   Scopes WorkerModel   Code putSpawnErrorWorkerModelHandler    PUT /worker/model/&amp;lt;group-name&amp;gt;/&amp;lt;model-name&amp;gt;    URL /worker/model/&amp;lt;group-name&amp;gt;/&amp;lt;model-name&amp;gt;     Method PUT   Permissions Auth: true   Scopes WorkerModel   Code putWorkerModelHandler    import a worker model yml/json file    URL /worker/model/import     Method POST   Query Parameter force=true or false.</description>
    </item>
    
    <item>
      <title>worker-hooks-export</title>
      <link>/docs/components/cdsctl/project/integration/worker-hooks-export/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/project/integration/worker-hooks-export/</guid>
      <description>cdsctl project integration worker-hooks-export Export integration worker hook configuration
Synopsis Export integration worker hook configuration
cdsctl project integration worker-hooks-export [ PROJECT-KEY ] INTEGRATION Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl project integration	- Manage CDS integrations  </description>
    </item>
    
    <item>
      <title>worker-hooks-import</title>
      <link>/docs/components/cdsctl/project/integration/worker-hooks-import/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/project/integration/worker-hooks-import/</guid>
      <description>cdsctl project integration worker-hooks-import Import integration worker hook configuration
Synopsis Import integration worker hook configuration
cdsctl project integration worker-hooks-import [ PROJECT-KEY ] INTEGRATION FILENAME Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl project integration	- Manage CDS integrations  </description>
    </item>
    
    <item>
      <title>workers</title>
      <link>/docs/components/engine/download/workers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/engine/download/workers/</guid>
      <description>engine download workers Download workers binaries from the latest release on GitHub
Synopsis Download workers binaries from the latest release on GitHub
You can also indicate a specific os or architecture to not download all binaries available with flag &amp;ndash;os and &amp;ndash;arch
engine download workers [flags] Examples engine download workers Options  --api string Update binary from a CDS Engine API --arch string Download only for this arch --config string config file --os string Download only for this os --remote-config string (optional) consul configuration store --remote-config-key string (optional) consul configuration store key (default &amp;quot;cds/config.</description>
    </item>
    
    <item>
      <title>workflow</title>
      <link>/development/rest/workflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/rest/workflow/</guid>
      <description>GET /workflow/hook/executions    URL /workflow/hook/executions     Method GET   Permissions Auth: true   Scopes Hooks   Code getWorkflowHookExecutionsHandler    GET /workflow/hook/model/&amp;lt;model&amp;gt;    URL /workflow/hook/model/&amp;lt;model&amp;gt;     Method GET   Permissions Auth: true   Code getWorkflowHookModelHandler    GET /workflow/hook    URL /workflow/hook     Method GET   Permissions Auth: true   Scopes Hooks   Code getWorkflowHooksHandler    GET /workflow/outgoinghook/model    URL /workflow/outgoinghook/model     Method GET   Permissions Auth: true   Code getWorkflowOutgoingHookModelsHandler    GET /workflow/search    URL /workflow/search     Method GET   Permissions Auth: true   Scopes Project   Code getSearchWorkflowHandler    PUT /workflow/hook/model/&amp;lt;model&amp;gt;    URL /workflow/hook/model/&amp;lt;model&amp;gt;     Method PUT   Permissions Auth: true   Code authAdminMiddleware    </description>
    </item>
    
    <item>
      <title>workflowv3-convert</title>
      <link>/docs/components/cdsctl/preview/workflowv3-convert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/preview/workflowv3-convert/</guid>
      <description>cdsctl preview workflowv3-convert Convert existing workflow to Workflow V3 files.
Synopsis Convert existing workflow to Workflow V3 files.
cdsctl preview workflowv3-convert [ PROJECT-KEY WORKFLOW-NAME ] [flags] Options  --format string Specify export format (json or yaml) (default &amp;quot;yaml&amp;quot;) --full Set the flag to export pipeline, application and environment content. Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers.</description>
    </item>
    
    <item>
      <title>workflowv3-validate</title>
      <link>/docs/components/cdsctl/preview/workflowv3-validate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/preview/workflowv3-validate/</guid>
      <description>cdsctl preview workflowv3-validate Parse and validate given Workflow V3 files.
Synopsis Parse and validate given Workflow V3 files.
cdsctl preview workflowv3-validate [ PROJECT-KEY ] YAML-FILE ... [flags] Options  --silent Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl preview	- CDS feature preview  </description>
    </item>
    
    <item>
      <title>ws</title>
      <link>/development/rest/ws/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/development/rest/ws/</guid>
      <description>GET /ws    URL /ws     Method GET   Permissions Auth: true   Code getWebsocketHandler    </description>
    </item>
    
    <item>
      <title>yaml-schema</title>
      <link>/docs/components/cdsctl/tools/yaml-schema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/tools/yaml-schema/</guid>
      <description>cdsctl tools yaml-schema Generate and install CDS yaml schema for given IDE
Synopsis Generate and install CDS yaml schema for given IDE
cdsctl tools yaml-schema IDE-NAME Examples cdsctl tools yaml-schema vscode Options inherited from parent commands  -c, --context string cdsctl context name -f, --file string set configuration file --insecure (SSL) This option explicitly allows curl to perform &amp;quot;insecure&amp;quot; SSL connections and transfers. -n, --no-interactive Set to disable interaction with ctl --verbose Enable verbose output SEE ALSO  cdsctl tools	- Some tooling for CDS  </description>
    </item>
    
    <item>
      <title>zsh</title>
      <link>/docs/components/cdsctl/completion/zsh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/cdsctl/completion/zsh/</guid>
      <description>cdsctl completion zsh Generate the autocompletion script for zsh
Synopsis Generate the autocompletion script for the zsh shell.
If shell completion is not already enabled in your environment you will need to enable it. You can execute the following once:
echo &amp;quot;autoload -U compinit; compinit&amp;quot; &amp;gt;&amp;gt; ~/.zshrc  To load completions in your current shell session:
source &amp;lt;(cdsctl completion zsh)  To load completions for every new session, execute once:</description>
    </item>
    
    <item>
      <title>zsh</title>
      <link>/docs/components/engine/completion/zsh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/engine/completion/zsh/</guid>
      <description>engine completion zsh Generate the autocompletion script for zsh
Synopsis Generate the autocompletion script for the zsh shell.
If shell completion is not already enabled in your environment you will need to enable it. You can execute the following once:
echo &amp;quot;autoload -U compinit; compinit&amp;quot; &amp;gt;&amp;gt; ~/.zshrc  To load completions in your current shell session:
source &amp;lt;(engine completion zsh)  To load completions for every new session, execute once:</description>
    </item>
    
    <item>
      <title>zsh</title>
      <link>/docs/components/worker/completion/zsh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/components/worker/completion/zsh/</guid>
      <description>worker completion zsh Generate the autocompletion script for zsh
Synopsis Generate the autocompletion script for the zsh shell.
If shell completion is not already enabled in your environment you will need to enable it. You can execute the following once:
echo &amp;quot;autoload -U compinit; compinit&amp;quot; &amp;gt;&amp;gt; ~/.zshrc  To load completions in your current shell session:
source &amp;lt;(worker completion zsh)  To load completions for every new session, execute once:</description>
    </item>
    
  </channel>
</rss>
